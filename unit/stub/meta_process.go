// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package stub

import (
	"ergo.services/ergo/gen"
	mock "github.com/stretchr/testify/mock"
)

// NewMetaProcess creates a new instance of MetaProcess. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetaProcess(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetaProcess {
	mock := &MetaProcess{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MetaProcess is an autogenerated mock type for the MetaProcess type
type MetaProcess struct {
	mock.Mock
}

type MetaProcess_Expecter struct {
	mock *mock.Mock
}

func (_m *MetaProcess) EXPECT() *MetaProcess_Expecter {
	return &MetaProcess_Expecter{mock: &_m.Mock}
}

// Env provides a mock function for the type MetaProcess
func (_mock *MetaProcess) Env(name gen.Env) (any, bool) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Env")
	}

	var r0 any
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(gen.Env) (any, bool)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.Env) any); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(gen.Env) bool); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MetaProcess_Env_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Env'
type MetaProcess_Env_Call struct {
	*mock.Call
}

// Env is a helper method to define mock.On call
//   - name
func (_e *MetaProcess_Expecter) Env(name interface{}) *MetaProcess_Env_Call {
	return &MetaProcess_Env_Call{Call: _e.mock.On("Env", name)}
}

func (_c *MetaProcess_Env_Call) Run(run func(name gen.Env)) *MetaProcess_Env_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Env))
	})
	return _c
}

func (_c *MetaProcess_Env_Call) Return(v any, b bool) *MetaProcess_Env_Call {
	_c.Call.Return(v, b)
	return _c
}

func (_c *MetaProcess_Env_Call) RunAndReturn(run func(name gen.Env) (any, bool)) *MetaProcess_Env_Call {
	_c.Call.Return(run)
	return _c
}

// EnvList provides a mock function for the type MetaProcess
func (_mock *MetaProcess) EnvList() map[gen.Env]any {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnvList")
	}

	var r0 map[gen.Env]any
	if returnFunc, ok := ret.Get(0).(func() map[gen.Env]any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[gen.Env]any)
		}
	}
	return r0
}

// MetaProcess_EnvList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnvList'
type MetaProcess_EnvList_Call struct {
	*mock.Call
}

// EnvList is a helper method to define mock.On call
func (_e *MetaProcess_Expecter) EnvList() *MetaProcess_EnvList_Call {
	return &MetaProcess_EnvList_Call{Call: _e.mock.On("EnvList")}
}

func (_c *MetaProcess_EnvList_Call) Run(run func()) *MetaProcess_EnvList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetaProcess_EnvList_Call) Return(envToV map[gen.Env]any) *MetaProcess_EnvList_Call {
	_c.Call.Return(envToV)
	return _c
}

func (_c *MetaProcess_EnvList_Call) RunAndReturn(run func() map[gen.Env]any) *MetaProcess_EnvList_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function for the type MetaProcess
func (_mock *MetaProcess) ID() gen.Alias {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 gen.Alias
	if returnFunc, ok := ret.Get(0).(func() gen.Alias); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.Alias)
	}
	return r0
}

// MetaProcess_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MetaProcess_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MetaProcess_Expecter) ID() *MetaProcess_ID_Call {
	return &MetaProcess_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MetaProcess_ID_Call) Run(run func()) *MetaProcess_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetaProcess_ID_Call) Return(alias gen.Alias) *MetaProcess_ID_Call {
	_c.Call.Return(alias)
	return _c
}

func (_c *MetaProcess_ID_Call) RunAndReturn(run func() gen.Alias) *MetaProcess_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Log provides a mock function for the type MetaProcess
func (_mock *MetaProcess) Log() gen.Log {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 gen.Log
	if returnFunc, ok := ret.Get(0).(func() gen.Log); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gen.Log)
		}
	}
	return r0
}

// MetaProcess_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type MetaProcess_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
func (_e *MetaProcess_Expecter) Log() *MetaProcess_Log_Call {
	return &MetaProcess_Log_Call{Call: _e.mock.On("Log")}
}

func (_c *MetaProcess_Log_Call) Run(run func()) *MetaProcess_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetaProcess_Log_Call) Return(log gen.Log) *MetaProcess_Log_Call {
	_c.Call.Return(log)
	return _c
}

func (_c *MetaProcess_Log_Call) RunAndReturn(run func() gen.Log) *MetaProcess_Log_Call {
	_c.Call.Return(run)
	return _c
}

// Parent provides a mock function for the type MetaProcess
func (_mock *MetaProcess) Parent() gen.PID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Parent")
	}

	var r0 gen.PID
	if returnFunc, ok := ret.Get(0).(func() gen.PID); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.PID)
	}
	return r0
}

// MetaProcess_Parent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parent'
type MetaProcess_Parent_Call struct {
	*mock.Call
}

// Parent is a helper method to define mock.On call
func (_e *MetaProcess_Expecter) Parent() *MetaProcess_Parent_Call {
	return &MetaProcess_Parent_Call{Call: _e.mock.On("Parent")}
}

func (_c *MetaProcess_Parent_Call) Run(run func()) *MetaProcess_Parent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetaProcess_Parent_Call) Return(pID gen.PID) *MetaProcess_Parent_Call {
	_c.Call.Return(pID)
	return _c
}

func (_c *MetaProcess_Parent_Call) RunAndReturn(run func() gen.PID) *MetaProcess_Parent_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function for the type MetaProcess
func (_mock *MetaProcess) Send(to any, message any) error {
	ret := _mock.Called(to, message)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any, any) error); ok {
		r0 = returnFunc(to, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MetaProcess_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MetaProcess_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - to
//   - message
func (_e *MetaProcess_Expecter) Send(to interface{}, message interface{}) *MetaProcess_Send_Call {
	return &MetaProcess_Send_Call{Call: _e.mock.On("Send", to, message)}
}

func (_c *MetaProcess_Send_Call) Run(run func(to any, message any)) *MetaProcess_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any), args[1].(any))
	})
	return _c
}

func (_c *MetaProcess_Send_Call) Return(err error) *MetaProcess_Send_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MetaProcess_Send_Call) RunAndReturn(run func(to any, message any) error) *MetaProcess_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SendImportant provides a mock function for the type MetaProcess
func (_mock *MetaProcess) SendImportant(to any, message any) error {
	ret := _mock.Called(to, message)

	if len(ret) == 0 {
		panic("no return value specified for SendImportant")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any, any) error); ok {
		r0 = returnFunc(to, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MetaProcess_SendImportant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendImportant'
type MetaProcess_SendImportant_Call struct {
	*mock.Call
}

// SendImportant is a helper method to define mock.On call
//   - to
//   - message
func (_e *MetaProcess_Expecter) SendImportant(to interface{}, message interface{}) *MetaProcess_SendImportant_Call {
	return &MetaProcess_SendImportant_Call{Call: _e.mock.On("SendImportant", to, message)}
}

func (_c *MetaProcess_SendImportant_Call) Run(run func(to any, message any)) *MetaProcess_SendImportant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any), args[1].(any))
	})
	return _c
}

func (_c *MetaProcess_SendImportant_Call) Return(err error) *MetaProcess_SendImportant_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MetaProcess_SendImportant_Call) RunAndReturn(run func(to any, message any) error) *MetaProcess_SendImportant_Call {
	_c.Call.Return(run)
	return _c
}

// SendWithPriority provides a mock function for the type MetaProcess
func (_mock *MetaProcess) SendWithPriority(to any, message any, priority gen.MessagePriority) error {
	ret := _mock.Called(to, message, priority)

	if len(ret) == 0 {
		panic("no return value specified for SendWithPriority")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any, any, gen.MessagePriority) error); ok {
		r0 = returnFunc(to, message, priority)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MetaProcess_SendWithPriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendWithPriority'
type MetaProcess_SendWithPriority_Call struct {
	*mock.Call
}

// SendWithPriority is a helper method to define mock.On call
//   - to
//   - message
//   - priority
func (_e *MetaProcess_Expecter) SendWithPriority(to interface{}, message interface{}, priority interface{}) *MetaProcess_SendWithPriority_Call {
	return &MetaProcess_SendWithPriority_Call{Call: _e.mock.On("SendWithPriority", to, message, priority)}
}

func (_c *MetaProcess_SendWithPriority_Call) Run(run func(to any, message any, priority gen.MessagePriority)) *MetaProcess_SendWithPriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any), args[1].(any), args[2].(gen.MessagePriority))
	})
	return _c
}

func (_c *MetaProcess_SendWithPriority_Call) Return(err error) *MetaProcess_SendWithPriority_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MetaProcess_SendWithPriority_Call) RunAndReturn(run func(to any, message any, priority gen.MessagePriority) error) *MetaProcess_SendWithPriority_Call {
	_c.Call.Return(run)
	return _c
}

// Spawn provides a mock function for the type MetaProcess
func (_mock *MetaProcess) Spawn(behavior gen.MetaBehavior, options gen.MetaOptions) (gen.Alias, error) {
	ret := _mock.Called(behavior, options)

	if len(ret) == 0 {
		panic("no return value specified for Spawn")
	}

	var r0 gen.Alias
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.MetaBehavior, gen.MetaOptions) (gen.Alias, error)); ok {
		return returnFunc(behavior, options)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.MetaBehavior, gen.MetaOptions) gen.Alias); ok {
		r0 = returnFunc(behavior, options)
	} else {
		r0 = ret.Get(0).(gen.Alias)
	}
	if returnFunc, ok := ret.Get(1).(func(gen.MetaBehavior, gen.MetaOptions) error); ok {
		r1 = returnFunc(behavior, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MetaProcess_Spawn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Spawn'
type MetaProcess_Spawn_Call struct {
	*mock.Call
}

// Spawn is a helper method to define mock.On call
//   - behavior
//   - options
func (_e *MetaProcess_Expecter) Spawn(behavior interface{}, options interface{}) *MetaProcess_Spawn_Call {
	return &MetaProcess_Spawn_Call{Call: _e.mock.On("Spawn", behavior, options)}
}

func (_c *MetaProcess_Spawn_Call) Run(run func(behavior gen.MetaBehavior, options gen.MetaOptions)) *MetaProcess_Spawn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.MetaBehavior), args[1].(gen.MetaOptions))
	})
	return _c
}

func (_c *MetaProcess_Spawn_Call) Return(alias gen.Alias, err error) *MetaProcess_Spawn_Call {
	_c.Call.Return(alias, err)
	return _c
}

func (_c *MetaProcess_Spawn_Call) RunAndReturn(run func(behavior gen.MetaBehavior, options gen.MetaOptions) (gen.Alias, error)) *MetaProcess_Spawn_Call {
	_c.Call.Return(run)
	return _c
}
