// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package stub

import (
	"ergo.services/ergo/gen"
	mock "github.com/stretchr/testify/mock"
)

// NewRemoteNode creates a new instance of RemoteNode. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRemoteNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *RemoteNode {
	mock := &RemoteNode{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RemoteNode is an autogenerated mock type for the RemoteNode type
type RemoteNode struct {
	mock.Mock
}

type RemoteNode_Expecter struct {
	mock *mock.Mock
}

func (_m *RemoteNode) EXPECT() *RemoteNode_Expecter {
	return &RemoteNode_Expecter{mock: &_m.Mock}
}

// ApplicationStart provides a mock function for the type RemoteNode
func (_mock *RemoteNode) ApplicationStart(name gen.Atom, options gen.ApplicationOptions) error {
	ret := _mock.Called(name, options)

	if len(ret) == 0 {
		panic("no return value specified for ApplicationStart")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.ApplicationOptions) error); ok {
		r0 = returnFunc(name, options)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RemoteNode_ApplicationStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplicationStart'
type RemoteNode_ApplicationStart_Call struct {
	*mock.Call
}

// ApplicationStart is a helper method to define mock.On call
//   - name
//   - options
func (_e *RemoteNode_Expecter) ApplicationStart(name interface{}, options interface{}) *RemoteNode_ApplicationStart_Call {
	return &RemoteNode_ApplicationStart_Call{Call: _e.mock.On("ApplicationStart", name, options)}
}

func (_c *RemoteNode_ApplicationStart_Call) Run(run func(name gen.Atom, options gen.ApplicationOptions)) *RemoteNode_ApplicationStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Atom), args[1].(gen.ApplicationOptions))
	})
	return _c
}

func (_c *RemoteNode_ApplicationStart_Call) Return(err error) *RemoteNode_ApplicationStart_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RemoteNode_ApplicationStart_Call) RunAndReturn(run func(name gen.Atom, options gen.ApplicationOptions) error) *RemoteNode_ApplicationStart_Call {
	_c.Call.Return(run)
	return _c
}

// ApplicationStartPermanent provides a mock function for the type RemoteNode
func (_mock *RemoteNode) ApplicationStartPermanent(name gen.Atom, options gen.ApplicationOptions) error {
	ret := _mock.Called(name, options)

	if len(ret) == 0 {
		panic("no return value specified for ApplicationStartPermanent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.ApplicationOptions) error); ok {
		r0 = returnFunc(name, options)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RemoteNode_ApplicationStartPermanent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplicationStartPermanent'
type RemoteNode_ApplicationStartPermanent_Call struct {
	*mock.Call
}

// ApplicationStartPermanent is a helper method to define mock.On call
//   - name
//   - options
func (_e *RemoteNode_Expecter) ApplicationStartPermanent(name interface{}, options interface{}) *RemoteNode_ApplicationStartPermanent_Call {
	return &RemoteNode_ApplicationStartPermanent_Call{Call: _e.mock.On("ApplicationStartPermanent", name, options)}
}

func (_c *RemoteNode_ApplicationStartPermanent_Call) Run(run func(name gen.Atom, options gen.ApplicationOptions)) *RemoteNode_ApplicationStartPermanent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Atom), args[1].(gen.ApplicationOptions))
	})
	return _c
}

func (_c *RemoteNode_ApplicationStartPermanent_Call) Return(err error) *RemoteNode_ApplicationStartPermanent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RemoteNode_ApplicationStartPermanent_Call) RunAndReturn(run func(name gen.Atom, options gen.ApplicationOptions) error) *RemoteNode_ApplicationStartPermanent_Call {
	_c.Call.Return(run)
	return _c
}

// ApplicationStartTemporary provides a mock function for the type RemoteNode
func (_mock *RemoteNode) ApplicationStartTemporary(name gen.Atom, options gen.ApplicationOptions) error {
	ret := _mock.Called(name, options)

	if len(ret) == 0 {
		panic("no return value specified for ApplicationStartTemporary")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.ApplicationOptions) error); ok {
		r0 = returnFunc(name, options)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RemoteNode_ApplicationStartTemporary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplicationStartTemporary'
type RemoteNode_ApplicationStartTemporary_Call struct {
	*mock.Call
}

// ApplicationStartTemporary is a helper method to define mock.On call
//   - name
//   - options
func (_e *RemoteNode_Expecter) ApplicationStartTemporary(name interface{}, options interface{}) *RemoteNode_ApplicationStartTemporary_Call {
	return &RemoteNode_ApplicationStartTemporary_Call{Call: _e.mock.On("ApplicationStartTemporary", name, options)}
}

func (_c *RemoteNode_ApplicationStartTemporary_Call) Run(run func(name gen.Atom, options gen.ApplicationOptions)) *RemoteNode_ApplicationStartTemporary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Atom), args[1].(gen.ApplicationOptions))
	})
	return _c
}

func (_c *RemoteNode_ApplicationStartTemporary_Call) Return(err error) *RemoteNode_ApplicationStartTemporary_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RemoteNode_ApplicationStartTemporary_Call) RunAndReturn(run func(name gen.Atom, options gen.ApplicationOptions) error) *RemoteNode_ApplicationStartTemporary_Call {
	_c.Call.Return(run)
	return _c
}

// ApplicationStartTransient provides a mock function for the type RemoteNode
func (_mock *RemoteNode) ApplicationStartTransient(name gen.Atom, options gen.ApplicationOptions) error {
	ret := _mock.Called(name, options)

	if len(ret) == 0 {
		panic("no return value specified for ApplicationStartTransient")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.ApplicationOptions) error); ok {
		r0 = returnFunc(name, options)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RemoteNode_ApplicationStartTransient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplicationStartTransient'
type RemoteNode_ApplicationStartTransient_Call struct {
	*mock.Call
}

// ApplicationStartTransient is a helper method to define mock.On call
//   - name
//   - options
func (_e *RemoteNode_Expecter) ApplicationStartTransient(name interface{}, options interface{}) *RemoteNode_ApplicationStartTransient_Call {
	return &RemoteNode_ApplicationStartTransient_Call{Call: _e.mock.On("ApplicationStartTransient", name, options)}
}

func (_c *RemoteNode_ApplicationStartTransient_Call) Run(run func(name gen.Atom, options gen.ApplicationOptions)) *RemoteNode_ApplicationStartTransient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Atom), args[1].(gen.ApplicationOptions))
	})
	return _c
}

func (_c *RemoteNode_ApplicationStartTransient_Call) Return(err error) *RemoteNode_ApplicationStartTransient_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RemoteNode_ApplicationStartTransient_Call) RunAndReturn(run func(name gen.Atom, options gen.ApplicationOptions) error) *RemoteNode_ApplicationStartTransient_Call {
	_c.Call.Return(run)
	return _c
}

// ConnectionUptime provides a mock function for the type RemoteNode
func (_mock *RemoteNode) ConnectionUptime() int64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConnectionUptime")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func() int64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// RemoteNode_ConnectionUptime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectionUptime'
type RemoteNode_ConnectionUptime_Call struct {
	*mock.Call
}

// ConnectionUptime is a helper method to define mock.On call
func (_e *RemoteNode_Expecter) ConnectionUptime() *RemoteNode_ConnectionUptime_Call {
	return &RemoteNode_ConnectionUptime_Call{Call: _e.mock.On("ConnectionUptime")}
}

func (_c *RemoteNode_ConnectionUptime_Call) Run(run func()) *RemoteNode_ConnectionUptime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RemoteNode_ConnectionUptime_Call) Return(n int64) *RemoteNode_ConnectionUptime_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *RemoteNode_ConnectionUptime_Call) RunAndReturn(run func() int64) *RemoteNode_ConnectionUptime_Call {
	_c.Call.Return(run)
	return _c
}

// Creation provides a mock function for the type RemoteNode
func (_mock *RemoteNode) Creation() int64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Creation")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func() int64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// RemoteNode_Creation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Creation'
type RemoteNode_Creation_Call struct {
	*mock.Call
}

// Creation is a helper method to define mock.On call
func (_e *RemoteNode_Expecter) Creation() *RemoteNode_Creation_Call {
	return &RemoteNode_Creation_Call{Call: _e.mock.On("Creation")}
}

func (_c *RemoteNode_Creation_Call) Run(run func()) *RemoteNode_Creation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RemoteNode_Creation_Call) Return(n int64) *RemoteNode_Creation_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *RemoteNode_Creation_Call) RunAndReturn(run func() int64) *RemoteNode_Creation_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function for the type RemoteNode
func (_mock *RemoteNode) Disconnect() {
	_mock.Called()
	return
}

// RemoteNode_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type RemoteNode_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
func (_e *RemoteNode_Expecter) Disconnect() *RemoteNode_Disconnect_Call {
	return &RemoteNode_Disconnect_Call{Call: _e.mock.On("Disconnect")}
}

func (_c *RemoteNode_Disconnect_Call) Run(run func()) *RemoteNode_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RemoteNode_Disconnect_Call) Return() *RemoteNode_Disconnect_Call {
	_c.Call.Return()
	return _c
}

func (_c *RemoteNode_Disconnect_Call) RunAndReturn(run func()) *RemoteNode_Disconnect_Call {
	_c.Run(run)
	return _c
}

// Info provides a mock function for the type RemoteNode
func (_mock *RemoteNode) Info() gen.RemoteNodeInfo {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 gen.RemoteNodeInfo
	if returnFunc, ok := ret.Get(0).(func() gen.RemoteNodeInfo); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.RemoteNodeInfo)
	}
	return r0
}

// RemoteNode_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type RemoteNode_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
func (_e *RemoteNode_Expecter) Info() *RemoteNode_Info_Call {
	return &RemoteNode_Info_Call{Call: _e.mock.On("Info")}
}

func (_c *RemoteNode_Info_Call) Run(run func()) *RemoteNode_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RemoteNode_Info_Call) Return(remoteNodeInfo gen.RemoteNodeInfo) *RemoteNode_Info_Call {
	_c.Call.Return(remoteNodeInfo)
	return _c
}

func (_c *RemoteNode_Info_Call) RunAndReturn(run func() gen.RemoteNodeInfo) *RemoteNode_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type RemoteNode
func (_mock *RemoteNode) Name() gen.Atom {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 gen.Atom
	if returnFunc, ok := ret.Get(0).(func() gen.Atom); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.Atom)
	}
	return r0
}

// RemoteNode_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type RemoteNode_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *RemoteNode_Expecter) Name() *RemoteNode_Name_Call {
	return &RemoteNode_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *RemoteNode_Name_Call) Run(run func()) *RemoteNode_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RemoteNode_Name_Call) Return(atom gen.Atom) *RemoteNode_Name_Call {
	_c.Call.Return(atom)
	return _c
}

func (_c *RemoteNode_Name_Call) RunAndReturn(run func() gen.Atom) *RemoteNode_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Spawn provides a mock function for the type RemoteNode
func (_mock *RemoteNode) Spawn(name gen.Atom, options gen.ProcessOptions, args ...any) (gen.PID, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(name, options, args)
	} else {
		tmpRet = _mock.Called(name, options)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Spawn")
	}

	var r0 gen.PID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.ProcessOptions, ...any) (gen.PID, error)); ok {
		return returnFunc(name, options, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.ProcessOptions, ...any) gen.PID); ok {
		r0 = returnFunc(name, options, args...)
	} else {
		r0 = ret.Get(0).(gen.PID)
	}
	if returnFunc, ok := ret.Get(1).(func(gen.Atom, gen.ProcessOptions, ...any) error); ok {
		r1 = returnFunc(name, options, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RemoteNode_Spawn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Spawn'
type RemoteNode_Spawn_Call struct {
	*mock.Call
}

// Spawn is a helper method to define mock.On call
//   - name
//   - options
//   - args
func (_e *RemoteNode_Expecter) Spawn(name interface{}, options interface{}, args ...interface{}) *RemoteNode_Spawn_Call {
	return &RemoteNode_Spawn_Call{Call: _e.mock.On("Spawn",
		append([]interface{}{name, options}, args...)...)}
}

func (_c *RemoteNode_Spawn_Call) Run(run func(name gen.Atom, options gen.ProcessOptions, args ...any)) *RemoteNode_Spawn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]any)
		run(args[0].(gen.Atom), args[1].(gen.ProcessOptions), variadicArgs...)
	})
	return _c
}

func (_c *RemoteNode_Spawn_Call) Return(pID gen.PID, err error) *RemoteNode_Spawn_Call {
	_c.Call.Return(pID, err)
	return _c
}

func (_c *RemoteNode_Spawn_Call) RunAndReturn(run func(name gen.Atom, options gen.ProcessOptions, args ...any) (gen.PID, error)) *RemoteNode_Spawn_Call {
	_c.Call.Return(run)
	return _c
}

// SpawnRegister provides a mock function for the type RemoteNode
func (_mock *RemoteNode) SpawnRegister(register gen.Atom, name gen.Atom, options gen.ProcessOptions, args ...any) (gen.PID, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(register, name, options, args)
	} else {
		tmpRet = _mock.Called(register, name, options)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for SpawnRegister")
	}

	var r0 gen.PID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.Atom, gen.ProcessOptions, ...any) (gen.PID, error)); ok {
		return returnFunc(register, name, options, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.Atom, gen.ProcessOptions, ...any) gen.PID); ok {
		r0 = returnFunc(register, name, options, args...)
	} else {
		r0 = ret.Get(0).(gen.PID)
	}
	if returnFunc, ok := ret.Get(1).(func(gen.Atom, gen.Atom, gen.ProcessOptions, ...any) error); ok {
		r1 = returnFunc(register, name, options, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RemoteNode_SpawnRegister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SpawnRegister'
type RemoteNode_SpawnRegister_Call struct {
	*mock.Call
}

// SpawnRegister is a helper method to define mock.On call
//   - register
//   - name
//   - options
//   - args
func (_e *RemoteNode_Expecter) SpawnRegister(register interface{}, name interface{}, options interface{}, args ...interface{}) *RemoteNode_SpawnRegister_Call {
	return &RemoteNode_SpawnRegister_Call{Call: _e.mock.On("SpawnRegister",
		append([]interface{}{register, name, options}, args...)...)}
}

func (_c *RemoteNode_SpawnRegister_Call) Run(run func(register gen.Atom, name gen.Atom, options gen.ProcessOptions, args ...any)) *RemoteNode_SpawnRegister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]any)
		run(args[0].(gen.Atom), args[1].(gen.Atom), args[2].(gen.ProcessOptions), variadicArgs...)
	})
	return _c
}

func (_c *RemoteNode_SpawnRegister_Call) Return(pID gen.PID, err error) *RemoteNode_SpawnRegister_Call {
	_c.Call.Return(pID, err)
	return _c
}

func (_c *RemoteNode_SpawnRegister_Call) RunAndReturn(run func(register gen.Atom, name gen.Atom, options gen.ProcessOptions, args ...any) (gen.PID, error)) *RemoteNode_SpawnRegister_Call {
	_c.Call.Return(run)
	return _c
}

// Uptime provides a mock function for the type RemoteNode
func (_mock *RemoteNode) Uptime() int64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Uptime")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func() int64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// RemoteNode_Uptime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Uptime'
type RemoteNode_Uptime_Call struct {
	*mock.Call
}

// Uptime is a helper method to define mock.On call
func (_e *RemoteNode_Expecter) Uptime() *RemoteNode_Uptime_Call {
	return &RemoteNode_Uptime_Call{Call: _e.mock.On("Uptime")}
}

func (_c *RemoteNode_Uptime_Call) Run(run func()) *RemoteNode_Uptime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RemoteNode_Uptime_Call) Return(n int64) *RemoteNode_Uptime_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *RemoteNode_Uptime_Call) RunAndReturn(run func() int64) *RemoteNode_Uptime_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function for the type RemoteNode
func (_mock *RemoteNode) Version() gen.Version {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 gen.Version
	if returnFunc, ok := ret.Get(0).(func() gen.Version); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.Version)
	}
	return r0
}

// RemoteNode_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type RemoteNode_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *RemoteNode_Expecter) Version() *RemoteNode_Version_Call {
	return &RemoteNode_Version_Call{Call: _e.mock.On("Version")}
}

func (_c *RemoteNode_Version_Call) Run(run func()) *RemoteNode_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RemoteNode_Version_Call) Return(version gen.Version) *RemoteNode_Version_Call {
	_c.Call.Return(version)
	return _c
}

func (_c *RemoteNode_Version_Call) RunAndReturn(run func() gen.Version) *RemoteNode_Version_Call {
	_c.Call.Return(run)
	return _c
}
