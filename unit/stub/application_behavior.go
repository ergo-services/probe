// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package stub

import (
	"ergo.services/ergo/gen"
	mock "github.com/stretchr/testify/mock"
)

// NewApplicationBehavior creates a new instance of ApplicationBehavior. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplicationBehavior(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApplicationBehavior {
	mock := &ApplicationBehavior{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ApplicationBehavior is an autogenerated mock type for the ApplicationBehavior type
type ApplicationBehavior struct {
	mock.Mock
}

type ApplicationBehavior_Expecter struct {
	mock *mock.Mock
}

func (_m *ApplicationBehavior) EXPECT() *ApplicationBehavior_Expecter {
	return &ApplicationBehavior_Expecter{mock: &_m.Mock}
}

// Load provides a mock function for the type ApplicationBehavior
func (_mock *ApplicationBehavior) Load(node gen.Node, args ...any) (gen.ApplicationSpec, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(node, args)
	} else {
		tmpRet = _mock.Called(node)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 gen.ApplicationSpec
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.Node, ...any) (gen.ApplicationSpec, error)); ok {
		return returnFunc(node, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.Node, ...any) gen.ApplicationSpec); ok {
		r0 = returnFunc(node, args...)
	} else {
		r0 = ret.Get(0).(gen.ApplicationSpec)
	}
	if returnFunc, ok := ret.Get(1).(func(gen.Node, ...any) error); ok {
		r1 = returnFunc(node, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ApplicationBehavior_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type ApplicationBehavior_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - node
//   - args
func (_e *ApplicationBehavior_Expecter) Load(node interface{}, args ...interface{}) *ApplicationBehavior_Load_Call {
	return &ApplicationBehavior_Load_Call{Call: _e.mock.On("Load",
		append([]interface{}{node}, args...)...)}
}

func (_c *ApplicationBehavior_Load_Call) Run(run func(node gen.Node, args ...any)) *ApplicationBehavior_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]any)
		run(args[0].(gen.Node), variadicArgs...)
	})
	return _c
}

func (_c *ApplicationBehavior_Load_Call) Return(applicationSpec gen.ApplicationSpec, err error) *ApplicationBehavior_Load_Call {
	_c.Call.Return(applicationSpec, err)
	return _c
}

func (_c *ApplicationBehavior_Load_Call) RunAndReturn(run func(node gen.Node, args ...any) (gen.ApplicationSpec, error)) *ApplicationBehavior_Load_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type ApplicationBehavior
func (_mock *ApplicationBehavior) Start(mode gen.ApplicationMode) {
	_mock.Called(mode)
	return
}

// ApplicationBehavior_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type ApplicationBehavior_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - mode
func (_e *ApplicationBehavior_Expecter) Start(mode interface{}) *ApplicationBehavior_Start_Call {
	return &ApplicationBehavior_Start_Call{Call: _e.mock.On("Start", mode)}
}

func (_c *ApplicationBehavior_Start_Call) Run(run func(mode gen.ApplicationMode)) *ApplicationBehavior_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.ApplicationMode))
	})
	return _c
}

func (_c *ApplicationBehavior_Start_Call) Return() *ApplicationBehavior_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *ApplicationBehavior_Start_Call) RunAndReturn(run func(mode gen.ApplicationMode)) *ApplicationBehavior_Start_Call {
	_c.Run(run)
	return _c
}

// Terminate provides a mock function for the type ApplicationBehavior
func (_mock *ApplicationBehavior) Terminate(reason error) {
	_mock.Called(reason)
	return
}

// ApplicationBehavior_Terminate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Terminate'
type ApplicationBehavior_Terminate_Call struct {
	*mock.Call
}

// Terminate is a helper method to define mock.On call
//   - reason
func (_e *ApplicationBehavior_Expecter) Terminate(reason interface{}) *ApplicationBehavior_Terminate_Call {
	return &ApplicationBehavior_Terminate_Call{Call: _e.mock.On("Terminate", reason)}
}

func (_c *ApplicationBehavior_Terminate_Call) Run(run func(reason error)) *ApplicationBehavior_Terminate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *ApplicationBehavior_Terminate_Call) Return() *ApplicationBehavior_Terminate_Call {
	_c.Call.Return()
	return _c
}

func (_c *ApplicationBehavior_Terminate_Call) RunAndReturn(run func(reason error)) *ApplicationBehavior_Terminate_Call {
	_c.Run(run)
	return _c
}
