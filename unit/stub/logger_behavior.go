// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package stub

import (
	"ergo.services/ergo/gen"
	mock "github.com/stretchr/testify/mock"
)

// NewLoggerBehavior creates a new instance of LoggerBehavior. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoggerBehavior(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoggerBehavior {
	mock := &LoggerBehavior{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// LoggerBehavior is an autogenerated mock type for the LoggerBehavior type
type LoggerBehavior struct {
	mock.Mock
}

type LoggerBehavior_Expecter struct {
	mock *mock.Mock
}

func (_m *LoggerBehavior) EXPECT() *LoggerBehavior_Expecter {
	return &LoggerBehavior_Expecter{mock: &_m.Mock}
}

// Log provides a mock function for the type LoggerBehavior
func (_mock *LoggerBehavior) Log(message gen.MessageLog) {
	_mock.Called(message)
	return
}

// LoggerBehavior_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type LoggerBehavior_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//   - message
func (_e *LoggerBehavior_Expecter) Log(message interface{}) *LoggerBehavior_Log_Call {
	return &LoggerBehavior_Log_Call{Call: _e.mock.On("Log", message)}
}

func (_c *LoggerBehavior_Log_Call) Run(run func(message gen.MessageLog)) *LoggerBehavior_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.MessageLog))
	})
	return _c
}

func (_c *LoggerBehavior_Log_Call) Return() *LoggerBehavior_Log_Call {
	_c.Call.Return()
	return _c
}

func (_c *LoggerBehavior_Log_Call) RunAndReturn(run func(message gen.MessageLog)) *LoggerBehavior_Log_Call {
	_c.Run(run)
	return _c
}

// Terminate provides a mock function for the type LoggerBehavior
func (_mock *LoggerBehavior) Terminate() {
	_mock.Called()
	return
}

// LoggerBehavior_Terminate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Terminate'
type LoggerBehavior_Terminate_Call struct {
	*mock.Call
}

// Terminate is a helper method to define mock.On call
func (_e *LoggerBehavior_Expecter) Terminate() *LoggerBehavior_Terminate_Call {
	return &LoggerBehavior_Terminate_Call{Call: _e.mock.On("Terminate")}
}

func (_c *LoggerBehavior_Terminate_Call) Run(run func()) *LoggerBehavior_Terminate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LoggerBehavior_Terminate_Call) Return() *LoggerBehavior_Terminate_Call {
	_c.Call.Return()
	return _c
}

func (_c *LoggerBehavior_Terminate_Call) RunAndReturn(run func()) *LoggerBehavior_Terminate_Call {
	_c.Run(run)
	return _c
}
