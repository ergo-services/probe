// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package stub

import (
	"ergo.services/ergo/gen"
	mock "github.com/stretchr/testify/mock"
)

// NewLog creates a new instance of Log. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLog(t interface {
	mock.TestingT
	Cleanup(func())
}) *Log {
	mock := &Log{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Log is an autogenerated mock type for the Log type
type Log struct {
	mock.Mock
}

type Log_Expecter struct {
	mock *mock.Mock
}

func (_m *Log) EXPECT() *Log_Expecter {
	return &Log_Expecter{mock: &_m.Mock}
}

// AddFields provides a mock function for the type Log
func (_mock *Log) AddFields(fields ...gen.LogField) {
	if len(fields) > 0 {
		_mock.Called(fields)
	} else {
		_mock.Called()
	}

	return
}

// Log_AddFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFields'
type Log_AddFields_Call struct {
	*mock.Call
}

// AddFields is a helper method to define mock.On call
//   - fields
func (_e *Log_Expecter) AddFields(fields ...interface{}) *Log_AddFields_Call {
	return &Log_AddFields_Call{Call: _e.mock.On("AddFields",
		append([]interface{}{}, fields...)...)}
}

func (_c *Log_AddFields_Call) Run(run func(fields ...gen.LogField)) *Log_AddFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[0].([]gen.LogField)
		run(variadicArgs...)
	})
	return _c
}

func (_c *Log_AddFields_Call) Return() *Log_AddFields_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_AddFields_Call) RunAndReturn(run func(fields ...gen.LogField)) *Log_AddFields_Call {
	_c.Run(run)
	return _c
}

// Debug provides a mock function for the type Log
func (_mock *Log) Debug(format string, args ...any) {
	if len(args) > 0 {
		_mock.Called(format, args)
	} else {
		_mock.Called(format)
	}

	return
}

// Log_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type Log_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - format
//   - args
func (_e *Log_Expecter) Debug(format interface{}, args ...interface{}) *Log_Debug_Call {
	return &Log_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{format}, args...)...)}
}

func (_c *Log_Debug_Call) Run(run func(format string, args ...any)) *Log_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]any)
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Log_Debug_Call) Return() *Log_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Debug_Call) RunAndReturn(run func(format string, args ...any)) *Log_Debug_Call {
	_c.Run(run)
	return _c
}

// DeleteFields provides a mock function for the type Log
func (_mock *Log) DeleteFields(fields ...string) {
	if len(fields) > 0 {
		_mock.Called(fields)
	} else {
		_mock.Called()
	}

	return
}

// Log_DeleteFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFields'
type Log_DeleteFields_Call struct {
	*mock.Call
}

// DeleteFields is a helper method to define mock.On call
//   - fields
func (_e *Log_Expecter) DeleteFields(fields ...interface{}) *Log_DeleteFields_Call {
	return &Log_DeleteFields_Call{Call: _e.mock.On("DeleteFields",
		append([]interface{}{}, fields...)...)}
}

func (_c *Log_DeleteFields_Call) Run(run func(fields ...string)) *Log_DeleteFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[0].([]string)
		run(variadicArgs...)
	})
	return _c
}

func (_c *Log_DeleteFields_Call) Return() *Log_DeleteFields_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_DeleteFields_Call) RunAndReturn(run func(fields ...string)) *Log_DeleteFields_Call {
	_c.Run(run)
	return _c
}

// Error provides a mock function for the type Log
func (_mock *Log) Error(format string, args ...any) {
	if len(args) > 0 {
		_mock.Called(format, args)
	} else {
		_mock.Called(format)
	}

	return
}

// Log_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type Log_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - format
//   - args
func (_e *Log_Expecter) Error(format interface{}, args ...interface{}) *Log_Error_Call {
	return &Log_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{format}, args...)...)}
}

func (_c *Log_Error_Call) Run(run func(format string, args ...any)) *Log_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]any)
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Log_Error_Call) Return() *Log_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Error_Call) RunAndReturn(run func(format string, args ...any)) *Log_Error_Call {
	_c.Run(run)
	return _c
}

// Fields provides a mock function for the type Log
func (_mock *Log) Fields() []gen.LogField {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Fields")
	}

	var r0 []gen.LogField
	if returnFunc, ok := ret.Get(0).(func() []gen.LogField); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gen.LogField)
		}
	}
	return r0
}

// Log_Fields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fields'
type Log_Fields_Call struct {
	*mock.Call
}

// Fields is a helper method to define mock.On call
func (_e *Log_Expecter) Fields() *Log_Fields_Call {
	return &Log_Fields_Call{Call: _e.mock.On("Fields")}
}

func (_c *Log_Fields_Call) Run(run func()) *Log_Fields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Log_Fields_Call) Return(logFields []gen.LogField) *Log_Fields_Call {
	_c.Call.Return(logFields)
	return _c
}

func (_c *Log_Fields_Call) RunAndReturn(run func() []gen.LogField) *Log_Fields_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function for the type Log
func (_mock *Log) Info(format string, args ...any) {
	if len(args) > 0 {
		_mock.Called(format, args)
	} else {
		_mock.Called(format)
	}

	return
}

// Log_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type Log_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - format
//   - args
func (_e *Log_Expecter) Info(format interface{}, args ...interface{}) *Log_Info_Call {
	return &Log_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{format}, args...)...)}
}

func (_c *Log_Info_Call) Run(run func(format string, args ...any)) *Log_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]any)
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Log_Info_Call) Return() *Log_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Info_Call) RunAndReturn(run func(format string, args ...any)) *Log_Info_Call {
	_c.Run(run)
	return _c
}

// Level provides a mock function for the type Log
func (_mock *Log) Level() gen.LogLevel {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Level")
	}

	var r0 gen.LogLevel
	if returnFunc, ok := ret.Get(0).(func() gen.LogLevel); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.LogLevel)
	}
	return r0
}

// Log_Level_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Level'
type Log_Level_Call struct {
	*mock.Call
}

// Level is a helper method to define mock.On call
func (_e *Log_Expecter) Level() *Log_Level_Call {
	return &Log_Level_Call{Call: _e.mock.On("Level")}
}

func (_c *Log_Level_Call) Run(run func()) *Log_Level_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Log_Level_Call) Return(logLevel gen.LogLevel) *Log_Level_Call {
	_c.Call.Return(logLevel)
	return _c
}

func (_c *Log_Level_Call) RunAndReturn(run func() gen.LogLevel) *Log_Level_Call {
	_c.Call.Return(run)
	return _c
}

// Logger provides a mock function for the type Log
func (_mock *Log) Logger() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Logger")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Log_Logger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logger'
type Log_Logger_Call struct {
	*mock.Call
}

// Logger is a helper method to define mock.On call
func (_e *Log_Expecter) Logger() *Log_Logger_Call {
	return &Log_Logger_Call{Call: _e.mock.On("Logger")}
}

func (_c *Log_Logger_Call) Run(run func()) *Log_Logger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Log_Logger_Call) Return(s string) *Log_Logger_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Log_Logger_Call) RunAndReturn(run func() string) *Log_Logger_Call {
	_c.Call.Return(run)
	return _c
}

// Panic provides a mock function for the type Log
func (_mock *Log) Panic(format string, args ...any) {
	if len(args) > 0 {
		_mock.Called(format, args)
	} else {
		_mock.Called(format)
	}

	return
}

// Log_Panic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Panic'
type Log_Panic_Call struct {
	*mock.Call
}

// Panic is a helper method to define mock.On call
//   - format
//   - args
func (_e *Log_Expecter) Panic(format interface{}, args ...interface{}) *Log_Panic_Call {
	return &Log_Panic_Call{Call: _e.mock.On("Panic",
		append([]interface{}{format}, args...)...)}
}

func (_c *Log_Panic_Call) Run(run func(format string, args ...any)) *Log_Panic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]any)
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Log_Panic_Call) Return() *Log_Panic_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Panic_Call) RunAndReturn(run func(format string, args ...any)) *Log_Panic_Call {
	_c.Run(run)
	return _c
}

// PopFields provides a mock function for the type Log
func (_mock *Log) PopFields() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for PopFields")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// Log_PopFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PopFields'
type Log_PopFields_Call struct {
	*mock.Call
}

// PopFields is a helper method to define mock.On call
func (_e *Log_Expecter) PopFields() *Log_PopFields_Call {
	return &Log_PopFields_Call{Call: _e.mock.On("PopFields")}
}

func (_c *Log_PopFields_Call) Run(run func()) *Log_PopFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Log_PopFields_Call) Return(n int) *Log_PopFields_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *Log_PopFields_Call) RunAndReturn(run func() int) *Log_PopFields_Call {
	_c.Call.Return(run)
	return _c
}

// PushFields provides a mock function for the type Log
func (_mock *Log) PushFields() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for PushFields")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// Log_PushFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushFields'
type Log_PushFields_Call struct {
	*mock.Call
}

// PushFields is a helper method to define mock.On call
func (_e *Log_Expecter) PushFields() *Log_PushFields_Call {
	return &Log_PushFields_Call{Call: _e.mock.On("PushFields")}
}

func (_c *Log_PushFields_Call) Run(run func()) *Log_PushFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Log_PushFields_Call) Return(n int) *Log_PushFields_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *Log_PushFields_Call) RunAndReturn(run func() int) *Log_PushFields_Call {
	_c.Call.Return(run)
	return _c
}

// SetLevel provides a mock function for the type Log
func (_mock *Log) SetLevel(level gen.LogLevel) error {
	ret := _mock.Called(level)

	if len(ret) == 0 {
		panic("no return value specified for SetLevel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.LogLevel) error); ok {
		r0 = returnFunc(level)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Log_SetLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLevel'
type Log_SetLevel_Call struct {
	*mock.Call
}

// SetLevel is a helper method to define mock.On call
//   - level
func (_e *Log_Expecter) SetLevel(level interface{}) *Log_SetLevel_Call {
	return &Log_SetLevel_Call{Call: _e.mock.On("SetLevel", level)}
}

func (_c *Log_SetLevel_Call) Run(run func(level gen.LogLevel)) *Log_SetLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.LogLevel))
	})
	return _c
}

func (_c *Log_SetLevel_Call) Return(err error) *Log_SetLevel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Log_SetLevel_Call) RunAndReturn(run func(level gen.LogLevel) error) *Log_SetLevel_Call {
	_c.Call.Return(run)
	return _c
}

// SetLogger provides a mock function for the type Log
func (_mock *Log) SetLogger(name string) {
	_mock.Called(name)
	return
}

// Log_SetLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLogger'
type Log_SetLogger_Call struct {
	*mock.Call
}

// SetLogger is a helper method to define mock.On call
//   - name
func (_e *Log_Expecter) SetLogger(name interface{}) *Log_SetLogger_Call {
	return &Log_SetLogger_Call{Call: _e.mock.On("SetLogger", name)}
}

func (_c *Log_SetLogger_Call) Run(run func(name string)) *Log_SetLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Log_SetLogger_Call) Return() *Log_SetLogger_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_SetLogger_Call) RunAndReturn(run func(name string)) *Log_SetLogger_Call {
	_c.Run(run)
	return _c
}

// Trace provides a mock function for the type Log
func (_mock *Log) Trace(format string, args ...any) {
	if len(args) > 0 {
		_mock.Called(format, args)
	} else {
		_mock.Called(format)
	}

	return
}

// Log_Trace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Trace'
type Log_Trace_Call struct {
	*mock.Call
}

// Trace is a helper method to define mock.On call
//   - format
//   - args
func (_e *Log_Expecter) Trace(format interface{}, args ...interface{}) *Log_Trace_Call {
	return &Log_Trace_Call{Call: _e.mock.On("Trace",
		append([]interface{}{format}, args...)...)}
}

func (_c *Log_Trace_Call) Run(run func(format string, args ...any)) *Log_Trace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]any)
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Log_Trace_Call) Return() *Log_Trace_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Trace_Call) RunAndReturn(run func(format string, args ...any)) *Log_Trace_Call {
	_c.Run(run)
	return _c
}

// Warning provides a mock function for the type Log
func (_mock *Log) Warning(format string, args ...any) {
	if len(args) > 0 {
		_mock.Called(format, args)
	} else {
		_mock.Called(format)
	}

	return
}

// Log_Warning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warning'
type Log_Warning_Call struct {
	*mock.Call
}

// Warning is a helper method to define mock.On call
//   - format
//   - args
func (_e *Log_Expecter) Warning(format interface{}, args ...interface{}) *Log_Warning_Call {
	return &Log_Warning_Call{Call: _e.mock.On("Warning",
		append([]interface{}{format}, args...)...)}
}

func (_c *Log_Warning_Call) Run(run func(format string, args ...any)) *Log_Warning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]any)
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Log_Warning_Call) Return() *Log_Warning_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Warning_Call) RunAndReturn(run func(format string, args ...any)) *Log_Warning_Call {
	_c.Run(run)
	return _c
}
