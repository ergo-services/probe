// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package stub

import (
	"net"

	"ergo.services/ergo/gen"
	mock "github.com/stretchr/testify/mock"
)

// NewNetworkHandshake creates a new instance of NetworkHandshake. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNetworkHandshake(t interface {
	mock.TestingT
	Cleanup(func())
}) *NetworkHandshake {
	mock := &NetworkHandshake{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// NetworkHandshake is an autogenerated mock type for the NetworkHandshake type
type NetworkHandshake struct {
	mock.Mock
}

type NetworkHandshake_Expecter struct {
	mock *mock.Mock
}

func (_m *NetworkHandshake) EXPECT() *NetworkHandshake_Expecter {
	return &NetworkHandshake_Expecter{mock: &_m.Mock}
}

// Accept provides a mock function for the type NetworkHandshake
func (_mock *NetworkHandshake) Accept(nodeHandshake gen.NodeHandshake, conn net.Conn, handshakeOptions gen.HandshakeOptions) (gen.HandshakeResult, error) {
	ret := _mock.Called(nodeHandshake, conn, handshakeOptions)

	if len(ret) == 0 {
		panic("no return value specified for Accept")
	}

	var r0 gen.HandshakeResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.NodeHandshake, net.Conn, gen.HandshakeOptions) (gen.HandshakeResult, error)); ok {
		return returnFunc(nodeHandshake, conn, handshakeOptions)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.NodeHandshake, net.Conn, gen.HandshakeOptions) gen.HandshakeResult); ok {
		r0 = returnFunc(nodeHandshake, conn, handshakeOptions)
	} else {
		r0 = ret.Get(0).(gen.HandshakeResult)
	}
	if returnFunc, ok := ret.Get(1).(func(gen.NodeHandshake, net.Conn, gen.HandshakeOptions) error); ok {
		r1 = returnFunc(nodeHandshake, conn, handshakeOptions)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// NetworkHandshake_Accept_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Accept'
type NetworkHandshake_Accept_Call struct {
	*mock.Call
}

// Accept is a helper method to define mock.On call
//   - nodeHandshake
//   - conn
//   - handshakeOptions
func (_e *NetworkHandshake_Expecter) Accept(nodeHandshake interface{}, conn interface{}, handshakeOptions interface{}) *NetworkHandshake_Accept_Call {
	return &NetworkHandshake_Accept_Call{Call: _e.mock.On("Accept", nodeHandshake, conn, handshakeOptions)}
}

func (_c *NetworkHandshake_Accept_Call) Run(run func(nodeHandshake gen.NodeHandshake, conn net.Conn, handshakeOptions gen.HandshakeOptions)) *NetworkHandshake_Accept_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.NodeHandshake), args[1].(net.Conn), args[2].(gen.HandshakeOptions))
	})
	return _c
}

func (_c *NetworkHandshake_Accept_Call) Return(handshakeResult gen.HandshakeResult, err error) *NetworkHandshake_Accept_Call {
	_c.Call.Return(handshakeResult, err)
	return _c
}

func (_c *NetworkHandshake_Accept_Call) RunAndReturn(run func(nodeHandshake gen.NodeHandshake, conn net.Conn, handshakeOptions gen.HandshakeOptions) (gen.HandshakeResult, error)) *NetworkHandshake_Accept_Call {
	_c.Call.Return(run)
	return _c
}

// Join provides a mock function for the type NetworkHandshake
func (_mock *NetworkHandshake) Join(nodeHandshake gen.NodeHandshake, conn net.Conn, s string, handshakeOptions gen.HandshakeOptions) ([]byte, error) {
	ret := _mock.Called(nodeHandshake, conn, s, handshakeOptions)

	if len(ret) == 0 {
		panic("no return value specified for Join")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.NodeHandshake, net.Conn, string, gen.HandshakeOptions) ([]byte, error)); ok {
		return returnFunc(nodeHandshake, conn, s, handshakeOptions)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.NodeHandshake, net.Conn, string, gen.HandshakeOptions) []byte); ok {
		r0 = returnFunc(nodeHandshake, conn, s, handshakeOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(gen.NodeHandshake, net.Conn, string, gen.HandshakeOptions) error); ok {
		r1 = returnFunc(nodeHandshake, conn, s, handshakeOptions)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// NetworkHandshake_Join_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Join'
type NetworkHandshake_Join_Call struct {
	*mock.Call
}

// Join is a helper method to define mock.On call
//   - nodeHandshake
//   - conn
//   - s
//   - handshakeOptions
func (_e *NetworkHandshake_Expecter) Join(nodeHandshake interface{}, conn interface{}, s interface{}, handshakeOptions interface{}) *NetworkHandshake_Join_Call {
	return &NetworkHandshake_Join_Call{Call: _e.mock.On("Join", nodeHandshake, conn, s, handshakeOptions)}
}

func (_c *NetworkHandshake_Join_Call) Run(run func(nodeHandshake gen.NodeHandshake, conn net.Conn, s string, handshakeOptions gen.HandshakeOptions)) *NetworkHandshake_Join_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.NodeHandshake), args[1].(net.Conn), args[2].(string), args[3].(gen.HandshakeOptions))
	})
	return _c
}

func (_c *NetworkHandshake_Join_Call) Return(bytes []byte, err error) *NetworkHandshake_Join_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *NetworkHandshake_Join_Call) RunAndReturn(run func(nodeHandshake gen.NodeHandshake, conn net.Conn, s string, handshakeOptions gen.HandshakeOptions) ([]byte, error)) *NetworkHandshake_Join_Call {
	_c.Call.Return(run)
	return _c
}

// NetworkFlags provides a mock function for the type NetworkHandshake
func (_mock *NetworkHandshake) NetworkFlags() gen.NetworkFlags {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for NetworkFlags")
	}

	var r0 gen.NetworkFlags
	if returnFunc, ok := ret.Get(0).(func() gen.NetworkFlags); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.NetworkFlags)
	}
	return r0
}

// NetworkHandshake_NetworkFlags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NetworkFlags'
type NetworkHandshake_NetworkFlags_Call struct {
	*mock.Call
}

// NetworkFlags is a helper method to define mock.On call
func (_e *NetworkHandshake_Expecter) NetworkFlags() *NetworkHandshake_NetworkFlags_Call {
	return &NetworkHandshake_NetworkFlags_Call{Call: _e.mock.On("NetworkFlags")}
}

func (_c *NetworkHandshake_NetworkFlags_Call) Run(run func()) *NetworkHandshake_NetworkFlags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NetworkHandshake_NetworkFlags_Call) Return(networkFlags gen.NetworkFlags) *NetworkHandshake_NetworkFlags_Call {
	_c.Call.Return(networkFlags)
	return _c
}

func (_c *NetworkHandshake_NetworkFlags_Call) RunAndReturn(run func() gen.NetworkFlags) *NetworkHandshake_NetworkFlags_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type NetworkHandshake
func (_mock *NetworkHandshake) Start(nodeHandshake gen.NodeHandshake, conn net.Conn, handshakeOptions gen.HandshakeOptions) (gen.HandshakeResult, error) {
	ret := _mock.Called(nodeHandshake, conn, handshakeOptions)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 gen.HandshakeResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.NodeHandshake, net.Conn, gen.HandshakeOptions) (gen.HandshakeResult, error)); ok {
		return returnFunc(nodeHandshake, conn, handshakeOptions)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.NodeHandshake, net.Conn, gen.HandshakeOptions) gen.HandshakeResult); ok {
		r0 = returnFunc(nodeHandshake, conn, handshakeOptions)
	} else {
		r0 = ret.Get(0).(gen.HandshakeResult)
	}
	if returnFunc, ok := ret.Get(1).(func(gen.NodeHandshake, net.Conn, gen.HandshakeOptions) error); ok {
		r1 = returnFunc(nodeHandshake, conn, handshakeOptions)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// NetworkHandshake_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type NetworkHandshake_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - nodeHandshake
//   - conn
//   - handshakeOptions
func (_e *NetworkHandshake_Expecter) Start(nodeHandshake interface{}, conn interface{}, handshakeOptions interface{}) *NetworkHandshake_Start_Call {
	return &NetworkHandshake_Start_Call{Call: _e.mock.On("Start", nodeHandshake, conn, handshakeOptions)}
}

func (_c *NetworkHandshake_Start_Call) Run(run func(nodeHandshake gen.NodeHandshake, conn net.Conn, handshakeOptions gen.HandshakeOptions)) *NetworkHandshake_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.NodeHandshake), args[1].(net.Conn), args[2].(gen.HandshakeOptions))
	})
	return _c
}

func (_c *NetworkHandshake_Start_Call) Return(handshakeResult gen.HandshakeResult, err error) *NetworkHandshake_Start_Call {
	_c.Call.Return(handshakeResult, err)
	return _c
}

func (_c *NetworkHandshake_Start_Call) RunAndReturn(run func(nodeHandshake gen.NodeHandshake, conn net.Conn, handshakeOptions gen.HandshakeOptions) (gen.HandshakeResult, error)) *NetworkHandshake_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function for the type NetworkHandshake
func (_mock *NetworkHandshake) Version() gen.Version {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 gen.Version
	if returnFunc, ok := ret.Get(0).(func() gen.Version); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.Version)
	}
	return r0
}

// NetworkHandshake_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type NetworkHandshake_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *NetworkHandshake_Expecter) Version() *NetworkHandshake_Version_Call {
	return &NetworkHandshake_Version_Call{Call: _e.mock.On("Version")}
}

func (_c *NetworkHandshake_Version_Call) Run(run func()) *NetworkHandshake_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NetworkHandshake_Version_Call) Return(version gen.Version) *NetworkHandshake_Version_Call {
	_c.Call.Return(version)
	return _c
}

func (_c *NetworkHandshake_Version_Call) RunAndReturn(run func() gen.Version) *NetworkHandshake_Version_Call {
	_c.Call.Return(run)
	return _c
}
