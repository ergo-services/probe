// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package stub

import (
	"net"

	"ergo.services/ergo/gen"
	mock "github.com/stretchr/testify/mock"
)

// NewConnection creates a new instance of Connection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnection(t interface {
	mock.TestingT
	Cleanup(func())
}) *Connection {
	mock := &Connection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Connection is an autogenerated mock type for the Connection type
type Connection struct {
	mock.Mock
}

type Connection_Expecter struct {
	mock *mock.Mock
}

func (_m *Connection) EXPECT() *Connection_Expecter {
	return &Connection_Expecter{mock: &_m.Mock}
}

// CallAlias provides a mock function for the type Connection
func (_mock *Connection) CallAlias(from gen.PID, to gen.Alias, options gen.MessageOptions, message any) error {
	ret := _mock.Called(from, to, options, message)

	if len(ret) == 0 {
		panic("no return value specified for CallAlias")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Alias, gen.MessageOptions, any) error); ok {
		r0 = returnFunc(from, to, options, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_CallAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallAlias'
type Connection_CallAlias_Call struct {
	*mock.Call
}

// CallAlias is a helper method to define mock.On call
//   - from
//   - to
//   - options
//   - message
func (_e *Connection_Expecter) CallAlias(from interface{}, to interface{}, options interface{}, message interface{}) *Connection_CallAlias_Call {
	return &Connection_CallAlias_Call{Call: _e.mock.On("CallAlias", from, to, options, message)}
}

func (_c *Connection_CallAlias_Call) Run(run func(from gen.PID, to gen.Alias, options gen.MessageOptions, message any)) *Connection_CallAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.Alias), args[2].(gen.MessageOptions), args[3].(any))
	})
	return _c
}

func (_c *Connection_CallAlias_Call) Return(err error) *Connection_CallAlias_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_CallAlias_Call) RunAndReturn(run func(from gen.PID, to gen.Alias, options gen.MessageOptions, message any) error) *Connection_CallAlias_Call {
	_c.Call.Return(run)
	return _c
}

// CallPID provides a mock function for the type Connection
func (_mock *Connection) CallPID(from gen.PID, to gen.PID, options gen.MessageOptions, message any) error {
	ret := _mock.Called(from, to, options, message)

	if len(ret) == 0 {
		panic("no return value specified for CallPID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.PID, gen.MessageOptions, any) error); ok {
		r0 = returnFunc(from, to, options, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_CallPID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallPID'
type Connection_CallPID_Call struct {
	*mock.Call
}

// CallPID is a helper method to define mock.On call
//   - from
//   - to
//   - options
//   - message
func (_e *Connection_Expecter) CallPID(from interface{}, to interface{}, options interface{}, message interface{}) *Connection_CallPID_Call {
	return &Connection_CallPID_Call{Call: _e.mock.On("CallPID", from, to, options, message)}
}

func (_c *Connection_CallPID_Call) Run(run func(from gen.PID, to gen.PID, options gen.MessageOptions, message any)) *Connection_CallPID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.PID), args[2].(gen.MessageOptions), args[3].(any))
	})
	return _c
}

func (_c *Connection_CallPID_Call) Return(err error) *Connection_CallPID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_CallPID_Call) RunAndReturn(run func(from gen.PID, to gen.PID, options gen.MessageOptions, message any) error) *Connection_CallPID_Call {
	_c.Call.Return(run)
	return _c
}

// CallProcessID provides a mock function for the type Connection
func (_mock *Connection) CallProcessID(from gen.PID, to gen.ProcessID, options gen.MessageOptions, message any) error {
	ret := _mock.Called(from, to, options, message)

	if len(ret) == 0 {
		panic("no return value specified for CallProcessID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.ProcessID, gen.MessageOptions, any) error); ok {
		r0 = returnFunc(from, to, options, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_CallProcessID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallProcessID'
type Connection_CallProcessID_Call struct {
	*mock.Call
}

// CallProcessID is a helper method to define mock.On call
//   - from
//   - to
//   - options
//   - message
func (_e *Connection_Expecter) CallProcessID(from interface{}, to interface{}, options interface{}, message interface{}) *Connection_CallProcessID_Call {
	return &Connection_CallProcessID_Call{Call: _e.mock.On("CallProcessID", from, to, options, message)}
}

func (_c *Connection_CallProcessID_Call) Run(run func(from gen.PID, to gen.ProcessID, options gen.MessageOptions, message any)) *Connection_CallProcessID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.ProcessID), args[2].(gen.MessageOptions), args[3].(any))
	})
	return _c
}

func (_c *Connection_CallProcessID_Call) Return(err error) *Connection_CallProcessID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_CallProcessID_Call) RunAndReturn(run func(from gen.PID, to gen.ProcessID, options gen.MessageOptions, message any) error) *Connection_CallProcessID_Call {
	_c.Call.Return(run)
	return _c
}

// DemonitorAlias provides a mock function for the type Connection
func (_mock *Connection) DemonitorAlias(pid gen.PID, target gen.Alias) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for DemonitorAlias")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Alias) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_DemonitorAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DemonitorAlias'
type Connection_DemonitorAlias_Call struct {
	*mock.Call
}

// DemonitorAlias is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Connection_Expecter) DemonitorAlias(pid interface{}, target interface{}) *Connection_DemonitorAlias_Call {
	return &Connection_DemonitorAlias_Call{Call: _e.mock.On("DemonitorAlias", pid, target)}
}

func (_c *Connection_DemonitorAlias_Call) Run(run func(pid gen.PID, target gen.Alias)) *Connection_DemonitorAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.Alias))
	})
	return _c
}

func (_c *Connection_DemonitorAlias_Call) Return(err error) *Connection_DemonitorAlias_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_DemonitorAlias_Call) RunAndReturn(run func(pid gen.PID, target gen.Alias) error) *Connection_DemonitorAlias_Call {
	_c.Call.Return(run)
	return _c
}

// DemonitorEvent provides a mock function for the type Connection
func (_mock *Connection) DemonitorEvent(pid gen.PID, targer gen.Event) error {
	ret := _mock.Called(pid, targer)

	if len(ret) == 0 {
		panic("no return value specified for DemonitorEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Event) error); ok {
		r0 = returnFunc(pid, targer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_DemonitorEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DemonitorEvent'
type Connection_DemonitorEvent_Call struct {
	*mock.Call
}

// DemonitorEvent is a helper method to define mock.On call
//   - pid
//   - targer
func (_e *Connection_Expecter) DemonitorEvent(pid interface{}, targer interface{}) *Connection_DemonitorEvent_Call {
	return &Connection_DemonitorEvent_Call{Call: _e.mock.On("DemonitorEvent", pid, targer)}
}

func (_c *Connection_DemonitorEvent_Call) Run(run func(pid gen.PID, targer gen.Event)) *Connection_DemonitorEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.Event))
	})
	return _c
}

func (_c *Connection_DemonitorEvent_Call) Return(err error) *Connection_DemonitorEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_DemonitorEvent_Call) RunAndReturn(run func(pid gen.PID, targer gen.Event) error) *Connection_DemonitorEvent_Call {
	_c.Call.Return(run)
	return _c
}

// DemonitorPID provides a mock function for the type Connection
func (_mock *Connection) DemonitorPID(pid gen.PID, target gen.PID) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for DemonitorPID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.PID) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_DemonitorPID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DemonitorPID'
type Connection_DemonitorPID_Call struct {
	*mock.Call
}

// DemonitorPID is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Connection_Expecter) DemonitorPID(pid interface{}, target interface{}) *Connection_DemonitorPID_Call {
	return &Connection_DemonitorPID_Call{Call: _e.mock.On("DemonitorPID", pid, target)}
}

func (_c *Connection_DemonitorPID_Call) Run(run func(pid gen.PID, target gen.PID)) *Connection_DemonitorPID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.PID))
	})
	return _c
}

func (_c *Connection_DemonitorPID_Call) Return(err error) *Connection_DemonitorPID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_DemonitorPID_Call) RunAndReturn(run func(pid gen.PID, target gen.PID) error) *Connection_DemonitorPID_Call {
	_c.Call.Return(run)
	return _c
}

// DemonitorProcessID provides a mock function for the type Connection
func (_mock *Connection) DemonitorProcessID(pid gen.PID, target gen.ProcessID) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for DemonitorProcessID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.ProcessID) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_DemonitorProcessID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DemonitorProcessID'
type Connection_DemonitorProcessID_Call struct {
	*mock.Call
}

// DemonitorProcessID is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Connection_Expecter) DemonitorProcessID(pid interface{}, target interface{}) *Connection_DemonitorProcessID_Call {
	return &Connection_DemonitorProcessID_Call{Call: _e.mock.On("DemonitorProcessID", pid, target)}
}

func (_c *Connection_DemonitorProcessID_Call) Run(run func(pid gen.PID, target gen.ProcessID)) *Connection_DemonitorProcessID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.ProcessID))
	})
	return _c
}

func (_c *Connection_DemonitorProcessID_Call) Return(err error) *Connection_DemonitorProcessID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_DemonitorProcessID_Call) RunAndReturn(run func(pid gen.PID, target gen.ProcessID) error) *Connection_DemonitorProcessID_Call {
	_c.Call.Return(run)
	return _c
}

// Join provides a mock function for the type Connection
func (_mock *Connection) Join(c net.Conn, id string, dial gen.NetworkDial, tail []byte) error {
	ret := _mock.Called(c, id, dial, tail)

	if len(ret) == 0 {
		panic("no return value specified for Join")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(net.Conn, string, gen.NetworkDial, []byte) error); ok {
		r0 = returnFunc(c, id, dial, tail)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_Join_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Join'
type Connection_Join_Call struct {
	*mock.Call
}

// Join is a helper method to define mock.On call
//   - c
//   - id
//   - dial
//   - tail
func (_e *Connection_Expecter) Join(c interface{}, id interface{}, dial interface{}, tail interface{}) *Connection_Join_Call {
	return &Connection_Join_Call{Call: _e.mock.On("Join", c, id, dial, tail)}
}

func (_c *Connection_Join_Call) Run(run func(c net.Conn, id string, dial gen.NetworkDial, tail []byte)) *Connection_Join_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(net.Conn), args[1].(string), args[2].(gen.NetworkDial), args[3].([]byte))
	})
	return _c
}

func (_c *Connection_Join_Call) Return(err error) *Connection_Join_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_Join_Call) RunAndReturn(run func(c net.Conn, id string, dial gen.NetworkDial, tail []byte) error) *Connection_Join_Call {
	_c.Call.Return(run)
	return _c
}

// LinkAlias provides a mock function for the type Connection
func (_mock *Connection) LinkAlias(pid gen.PID, target gen.Alias) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for LinkAlias")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Alias) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_LinkAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkAlias'
type Connection_LinkAlias_Call struct {
	*mock.Call
}

// LinkAlias is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Connection_Expecter) LinkAlias(pid interface{}, target interface{}) *Connection_LinkAlias_Call {
	return &Connection_LinkAlias_Call{Call: _e.mock.On("LinkAlias", pid, target)}
}

func (_c *Connection_LinkAlias_Call) Run(run func(pid gen.PID, target gen.Alias)) *Connection_LinkAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.Alias))
	})
	return _c
}

func (_c *Connection_LinkAlias_Call) Return(err error) *Connection_LinkAlias_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_LinkAlias_Call) RunAndReturn(run func(pid gen.PID, target gen.Alias) error) *Connection_LinkAlias_Call {
	_c.Call.Return(run)
	return _c
}

// LinkEvent provides a mock function for the type Connection
func (_mock *Connection) LinkEvent(pid gen.PID, target gen.Event) ([]gen.MessageEvent, error) {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for LinkEvent")
	}

	var r0 []gen.MessageEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Event) ([]gen.MessageEvent, error)); ok {
		return returnFunc(pid, target)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Event) []gen.MessageEvent); ok {
		r0 = returnFunc(pid, target)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gen.MessageEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(gen.PID, gen.Event) error); ok {
		r1 = returnFunc(pid, target)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Connection_LinkEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkEvent'
type Connection_LinkEvent_Call struct {
	*mock.Call
}

// LinkEvent is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Connection_Expecter) LinkEvent(pid interface{}, target interface{}) *Connection_LinkEvent_Call {
	return &Connection_LinkEvent_Call{Call: _e.mock.On("LinkEvent", pid, target)}
}

func (_c *Connection_LinkEvent_Call) Run(run func(pid gen.PID, target gen.Event)) *Connection_LinkEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.Event))
	})
	return _c
}

func (_c *Connection_LinkEvent_Call) Return(messageEvents []gen.MessageEvent, err error) *Connection_LinkEvent_Call {
	_c.Call.Return(messageEvents, err)
	return _c
}

func (_c *Connection_LinkEvent_Call) RunAndReturn(run func(pid gen.PID, target gen.Event) ([]gen.MessageEvent, error)) *Connection_LinkEvent_Call {
	_c.Call.Return(run)
	return _c
}

// LinkPID provides a mock function for the type Connection
func (_mock *Connection) LinkPID(pid gen.PID, target gen.PID) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for LinkPID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.PID) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_LinkPID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkPID'
type Connection_LinkPID_Call struct {
	*mock.Call
}

// LinkPID is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Connection_Expecter) LinkPID(pid interface{}, target interface{}) *Connection_LinkPID_Call {
	return &Connection_LinkPID_Call{Call: _e.mock.On("LinkPID", pid, target)}
}

func (_c *Connection_LinkPID_Call) Run(run func(pid gen.PID, target gen.PID)) *Connection_LinkPID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.PID))
	})
	return _c
}

func (_c *Connection_LinkPID_Call) Return(err error) *Connection_LinkPID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_LinkPID_Call) RunAndReturn(run func(pid gen.PID, target gen.PID) error) *Connection_LinkPID_Call {
	_c.Call.Return(run)
	return _c
}

// LinkProcessID provides a mock function for the type Connection
func (_mock *Connection) LinkProcessID(pid gen.PID, target gen.ProcessID) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for LinkProcessID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.ProcessID) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_LinkProcessID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkProcessID'
type Connection_LinkProcessID_Call struct {
	*mock.Call
}

// LinkProcessID is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Connection_Expecter) LinkProcessID(pid interface{}, target interface{}) *Connection_LinkProcessID_Call {
	return &Connection_LinkProcessID_Call{Call: _e.mock.On("LinkProcessID", pid, target)}
}

func (_c *Connection_LinkProcessID_Call) Run(run func(pid gen.PID, target gen.ProcessID)) *Connection_LinkProcessID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.ProcessID))
	})
	return _c
}

func (_c *Connection_LinkProcessID_Call) Return(err error) *Connection_LinkProcessID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_LinkProcessID_Call) RunAndReturn(run func(pid gen.PID, target gen.ProcessID) error) *Connection_LinkProcessID_Call {
	_c.Call.Return(run)
	return _c
}

// MonitorAlias provides a mock function for the type Connection
func (_mock *Connection) MonitorAlias(pid gen.PID, target gen.Alias) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for MonitorAlias")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Alias) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_MonitorAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MonitorAlias'
type Connection_MonitorAlias_Call struct {
	*mock.Call
}

// MonitorAlias is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Connection_Expecter) MonitorAlias(pid interface{}, target interface{}) *Connection_MonitorAlias_Call {
	return &Connection_MonitorAlias_Call{Call: _e.mock.On("MonitorAlias", pid, target)}
}

func (_c *Connection_MonitorAlias_Call) Run(run func(pid gen.PID, target gen.Alias)) *Connection_MonitorAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.Alias))
	})
	return _c
}

func (_c *Connection_MonitorAlias_Call) Return(err error) *Connection_MonitorAlias_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_MonitorAlias_Call) RunAndReturn(run func(pid gen.PID, target gen.Alias) error) *Connection_MonitorAlias_Call {
	_c.Call.Return(run)
	return _c
}

// MonitorEvent provides a mock function for the type Connection
func (_mock *Connection) MonitorEvent(pid gen.PID, target gen.Event) ([]gen.MessageEvent, error) {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for MonitorEvent")
	}

	var r0 []gen.MessageEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Event) ([]gen.MessageEvent, error)); ok {
		return returnFunc(pid, target)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Event) []gen.MessageEvent); ok {
		r0 = returnFunc(pid, target)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gen.MessageEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(gen.PID, gen.Event) error); ok {
		r1 = returnFunc(pid, target)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Connection_MonitorEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MonitorEvent'
type Connection_MonitorEvent_Call struct {
	*mock.Call
}

// MonitorEvent is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Connection_Expecter) MonitorEvent(pid interface{}, target interface{}) *Connection_MonitorEvent_Call {
	return &Connection_MonitorEvent_Call{Call: _e.mock.On("MonitorEvent", pid, target)}
}

func (_c *Connection_MonitorEvent_Call) Run(run func(pid gen.PID, target gen.Event)) *Connection_MonitorEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.Event))
	})
	return _c
}

func (_c *Connection_MonitorEvent_Call) Return(messageEvents []gen.MessageEvent, err error) *Connection_MonitorEvent_Call {
	_c.Call.Return(messageEvents, err)
	return _c
}

func (_c *Connection_MonitorEvent_Call) RunAndReturn(run func(pid gen.PID, target gen.Event) ([]gen.MessageEvent, error)) *Connection_MonitorEvent_Call {
	_c.Call.Return(run)
	return _c
}

// MonitorPID provides a mock function for the type Connection
func (_mock *Connection) MonitorPID(pid gen.PID, target gen.PID) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for MonitorPID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.PID) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_MonitorPID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MonitorPID'
type Connection_MonitorPID_Call struct {
	*mock.Call
}

// MonitorPID is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Connection_Expecter) MonitorPID(pid interface{}, target interface{}) *Connection_MonitorPID_Call {
	return &Connection_MonitorPID_Call{Call: _e.mock.On("MonitorPID", pid, target)}
}

func (_c *Connection_MonitorPID_Call) Run(run func(pid gen.PID, target gen.PID)) *Connection_MonitorPID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.PID))
	})
	return _c
}

func (_c *Connection_MonitorPID_Call) Return(err error) *Connection_MonitorPID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_MonitorPID_Call) RunAndReturn(run func(pid gen.PID, target gen.PID) error) *Connection_MonitorPID_Call {
	_c.Call.Return(run)
	return _c
}

// MonitorProcessID provides a mock function for the type Connection
func (_mock *Connection) MonitorProcessID(pid gen.PID, target gen.ProcessID) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for MonitorProcessID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.ProcessID) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_MonitorProcessID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MonitorProcessID'
type Connection_MonitorProcessID_Call struct {
	*mock.Call
}

// MonitorProcessID is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Connection_Expecter) MonitorProcessID(pid interface{}, target interface{}) *Connection_MonitorProcessID_Call {
	return &Connection_MonitorProcessID_Call{Call: _e.mock.On("MonitorProcessID", pid, target)}
}

func (_c *Connection_MonitorProcessID_Call) Run(run func(pid gen.PID, target gen.ProcessID)) *Connection_MonitorProcessID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.ProcessID))
	})
	return _c
}

func (_c *Connection_MonitorProcessID_Call) Return(err error) *Connection_MonitorProcessID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_MonitorProcessID_Call) RunAndReturn(run func(pid gen.PID, target gen.ProcessID) error) *Connection_MonitorProcessID_Call {
	_c.Call.Return(run)
	return _c
}

// Node provides a mock function for the type Connection
func (_mock *Connection) Node() gen.RemoteNode {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Node")
	}

	var r0 gen.RemoteNode
	if returnFunc, ok := ret.Get(0).(func() gen.RemoteNode); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gen.RemoteNode)
		}
	}
	return r0
}

// Connection_Node_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Node'
type Connection_Node_Call struct {
	*mock.Call
}

// Node is a helper method to define mock.On call
func (_e *Connection_Expecter) Node() *Connection_Node_Call {
	return &Connection_Node_Call{Call: _e.mock.On("Node")}
}

func (_c *Connection_Node_Call) Run(run func()) *Connection_Node_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Connection_Node_Call) Return(remoteNode gen.RemoteNode) *Connection_Node_Call {
	_c.Call.Return(remoteNode)
	return _c
}

func (_c *Connection_Node_Call) RunAndReturn(run func() gen.RemoteNode) *Connection_Node_Call {
	_c.Call.Return(run)
	return _c
}

// RemoteSpawn provides a mock function for the type Connection
func (_mock *Connection) RemoteSpawn(name gen.Atom, options gen.ProcessOptionsExtra) (gen.PID, error) {
	ret := _mock.Called(name, options)

	if len(ret) == 0 {
		panic("no return value specified for RemoteSpawn")
	}

	var r0 gen.PID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.ProcessOptionsExtra) (gen.PID, error)); ok {
		return returnFunc(name, options)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.ProcessOptionsExtra) gen.PID); ok {
		r0 = returnFunc(name, options)
	} else {
		r0 = ret.Get(0).(gen.PID)
	}
	if returnFunc, ok := ret.Get(1).(func(gen.Atom, gen.ProcessOptionsExtra) error); ok {
		r1 = returnFunc(name, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Connection_RemoteSpawn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoteSpawn'
type Connection_RemoteSpawn_Call struct {
	*mock.Call
}

// RemoteSpawn is a helper method to define mock.On call
//   - name
//   - options
func (_e *Connection_Expecter) RemoteSpawn(name interface{}, options interface{}) *Connection_RemoteSpawn_Call {
	return &Connection_RemoteSpawn_Call{Call: _e.mock.On("RemoteSpawn", name, options)}
}

func (_c *Connection_RemoteSpawn_Call) Run(run func(name gen.Atom, options gen.ProcessOptionsExtra)) *Connection_RemoteSpawn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Atom), args[1].(gen.ProcessOptionsExtra))
	})
	return _c
}

func (_c *Connection_RemoteSpawn_Call) Return(pID gen.PID, err error) *Connection_RemoteSpawn_Call {
	_c.Call.Return(pID, err)
	return _c
}

func (_c *Connection_RemoteSpawn_Call) RunAndReturn(run func(name gen.Atom, options gen.ProcessOptionsExtra) (gen.PID, error)) *Connection_RemoteSpawn_Call {
	_c.Call.Return(run)
	return _c
}

// SendAlias provides a mock function for the type Connection
func (_mock *Connection) SendAlias(from gen.PID, to gen.Alias, options gen.MessageOptions, message any) error {
	ret := _mock.Called(from, to, options, message)

	if len(ret) == 0 {
		panic("no return value specified for SendAlias")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Alias, gen.MessageOptions, any) error); ok {
		r0 = returnFunc(from, to, options, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_SendAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAlias'
type Connection_SendAlias_Call struct {
	*mock.Call
}

// SendAlias is a helper method to define mock.On call
//   - from
//   - to
//   - options
//   - message
func (_e *Connection_Expecter) SendAlias(from interface{}, to interface{}, options interface{}, message interface{}) *Connection_SendAlias_Call {
	return &Connection_SendAlias_Call{Call: _e.mock.On("SendAlias", from, to, options, message)}
}

func (_c *Connection_SendAlias_Call) Run(run func(from gen.PID, to gen.Alias, options gen.MessageOptions, message any)) *Connection_SendAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.Alias), args[2].(gen.MessageOptions), args[3].(any))
	})
	return _c
}

func (_c *Connection_SendAlias_Call) Return(err error) *Connection_SendAlias_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_SendAlias_Call) RunAndReturn(run func(from gen.PID, to gen.Alias, options gen.MessageOptions, message any) error) *Connection_SendAlias_Call {
	_c.Call.Return(run)
	return _c
}

// SendEvent provides a mock function for the type Connection
func (_mock *Connection) SendEvent(from gen.PID, options gen.MessageOptions, message gen.MessageEvent) error {
	ret := _mock.Called(from, options, message)

	if len(ret) == 0 {
		panic("no return value specified for SendEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.MessageOptions, gen.MessageEvent) error); ok {
		r0 = returnFunc(from, options, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_SendEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEvent'
type Connection_SendEvent_Call struct {
	*mock.Call
}

// SendEvent is a helper method to define mock.On call
//   - from
//   - options
//   - message
func (_e *Connection_Expecter) SendEvent(from interface{}, options interface{}, message interface{}) *Connection_SendEvent_Call {
	return &Connection_SendEvent_Call{Call: _e.mock.On("SendEvent", from, options, message)}
}

func (_c *Connection_SendEvent_Call) Run(run func(from gen.PID, options gen.MessageOptions, message gen.MessageEvent)) *Connection_SendEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.MessageOptions), args[2].(gen.MessageEvent))
	})
	return _c
}

func (_c *Connection_SendEvent_Call) Return(err error) *Connection_SendEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_SendEvent_Call) RunAndReturn(run func(from gen.PID, options gen.MessageOptions, message gen.MessageEvent) error) *Connection_SendEvent_Call {
	_c.Call.Return(run)
	return _c
}

// SendExit provides a mock function for the type Connection
func (_mock *Connection) SendExit(from gen.PID, to gen.PID, reason error) error {
	ret := _mock.Called(from, to, reason)

	if len(ret) == 0 {
		panic("no return value specified for SendExit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.PID, error) error); ok {
		r0 = returnFunc(from, to, reason)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_SendExit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendExit'
type Connection_SendExit_Call struct {
	*mock.Call
}

// SendExit is a helper method to define mock.On call
//   - from
//   - to
//   - reason
func (_e *Connection_Expecter) SendExit(from interface{}, to interface{}, reason interface{}) *Connection_SendExit_Call {
	return &Connection_SendExit_Call{Call: _e.mock.On("SendExit", from, to, reason)}
}

func (_c *Connection_SendExit_Call) Run(run func(from gen.PID, to gen.PID, reason error)) *Connection_SendExit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.PID), args[2].(error))
	})
	return _c
}

func (_c *Connection_SendExit_Call) Return(err error) *Connection_SendExit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_SendExit_Call) RunAndReturn(run func(from gen.PID, to gen.PID, reason error) error) *Connection_SendExit_Call {
	_c.Call.Return(run)
	return _c
}

// SendPID provides a mock function for the type Connection
func (_mock *Connection) SendPID(from gen.PID, to gen.PID, options gen.MessageOptions, message any) error {
	ret := _mock.Called(from, to, options, message)

	if len(ret) == 0 {
		panic("no return value specified for SendPID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.PID, gen.MessageOptions, any) error); ok {
		r0 = returnFunc(from, to, options, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_SendPID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendPID'
type Connection_SendPID_Call struct {
	*mock.Call
}

// SendPID is a helper method to define mock.On call
//   - from
//   - to
//   - options
//   - message
func (_e *Connection_Expecter) SendPID(from interface{}, to interface{}, options interface{}, message interface{}) *Connection_SendPID_Call {
	return &Connection_SendPID_Call{Call: _e.mock.On("SendPID", from, to, options, message)}
}

func (_c *Connection_SendPID_Call) Run(run func(from gen.PID, to gen.PID, options gen.MessageOptions, message any)) *Connection_SendPID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.PID), args[2].(gen.MessageOptions), args[3].(any))
	})
	return _c
}

func (_c *Connection_SendPID_Call) Return(err error) *Connection_SendPID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_SendPID_Call) RunAndReturn(run func(from gen.PID, to gen.PID, options gen.MessageOptions, message any) error) *Connection_SendPID_Call {
	_c.Call.Return(run)
	return _c
}

// SendProcessID provides a mock function for the type Connection
func (_mock *Connection) SendProcessID(from gen.PID, to gen.ProcessID, options gen.MessageOptions, message any) error {
	ret := _mock.Called(from, to, options, message)

	if len(ret) == 0 {
		panic("no return value specified for SendProcessID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.ProcessID, gen.MessageOptions, any) error); ok {
		r0 = returnFunc(from, to, options, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_SendProcessID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendProcessID'
type Connection_SendProcessID_Call struct {
	*mock.Call
}

// SendProcessID is a helper method to define mock.On call
//   - from
//   - to
//   - options
//   - message
func (_e *Connection_Expecter) SendProcessID(from interface{}, to interface{}, options interface{}, message interface{}) *Connection_SendProcessID_Call {
	return &Connection_SendProcessID_Call{Call: _e.mock.On("SendProcessID", from, to, options, message)}
}

func (_c *Connection_SendProcessID_Call) Run(run func(from gen.PID, to gen.ProcessID, options gen.MessageOptions, message any)) *Connection_SendProcessID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.ProcessID), args[2].(gen.MessageOptions), args[3].(any))
	})
	return _c
}

func (_c *Connection_SendProcessID_Call) Return(err error) *Connection_SendProcessID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_SendProcessID_Call) RunAndReturn(run func(from gen.PID, to gen.ProcessID, options gen.MessageOptions, message any) error) *Connection_SendProcessID_Call {
	_c.Call.Return(run)
	return _c
}

// SendResponse provides a mock function for the type Connection
func (_mock *Connection) SendResponse(from gen.PID, to gen.PID, options gen.MessageOptions, response any) error {
	ret := _mock.Called(from, to, options, response)

	if len(ret) == 0 {
		panic("no return value specified for SendResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.PID, gen.MessageOptions, any) error); ok {
		r0 = returnFunc(from, to, options, response)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_SendResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendResponse'
type Connection_SendResponse_Call struct {
	*mock.Call
}

// SendResponse is a helper method to define mock.On call
//   - from
//   - to
//   - options
//   - response
func (_e *Connection_Expecter) SendResponse(from interface{}, to interface{}, options interface{}, response interface{}) *Connection_SendResponse_Call {
	return &Connection_SendResponse_Call{Call: _e.mock.On("SendResponse", from, to, options, response)}
}

func (_c *Connection_SendResponse_Call) Run(run func(from gen.PID, to gen.PID, options gen.MessageOptions, response any)) *Connection_SendResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.PID), args[2].(gen.MessageOptions), args[3].(any))
	})
	return _c
}

func (_c *Connection_SendResponse_Call) Return(err error) *Connection_SendResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_SendResponse_Call) RunAndReturn(run func(from gen.PID, to gen.PID, options gen.MessageOptions, response any) error) *Connection_SendResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SendResponseError provides a mock function for the type Connection
func (_mock *Connection) SendResponseError(from gen.PID, to gen.PID, options gen.MessageOptions, err error) error {
	ret := _mock.Called(from, to, options, err)

	if len(ret) == 0 {
		panic("no return value specified for SendResponseError")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.PID, gen.MessageOptions, error) error); ok {
		r0 = returnFunc(from, to, options, err)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_SendResponseError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendResponseError'
type Connection_SendResponseError_Call struct {
	*mock.Call
}

// SendResponseError is a helper method to define mock.On call
//   - from
//   - to
//   - options
//   - err
func (_e *Connection_Expecter) SendResponseError(from interface{}, to interface{}, options interface{}, err interface{}) *Connection_SendResponseError_Call {
	return &Connection_SendResponseError_Call{Call: _e.mock.On("SendResponseError", from, to, options, err)}
}

func (_c *Connection_SendResponseError_Call) Run(run func(from gen.PID, to gen.PID, options gen.MessageOptions, err error)) *Connection_SendResponseError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.PID), args[2].(gen.MessageOptions), args[3].(error))
	})
	return _c
}

func (_c *Connection_SendResponseError_Call) Return(err1 error) *Connection_SendResponseError_Call {
	_c.Call.Return(err1)
	return _c
}

func (_c *Connection_SendResponseError_Call) RunAndReturn(run func(from gen.PID, to gen.PID, options gen.MessageOptions, err error) error) *Connection_SendResponseError_Call {
	_c.Call.Return(run)
	return _c
}

// SendTerminateAlias provides a mock function for the type Connection
func (_mock *Connection) SendTerminateAlias(target gen.Alias, reason error) error {
	ret := _mock.Called(target, reason)

	if len(ret) == 0 {
		panic("no return value specified for SendTerminateAlias")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Alias, error) error); ok {
		r0 = returnFunc(target, reason)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_SendTerminateAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTerminateAlias'
type Connection_SendTerminateAlias_Call struct {
	*mock.Call
}

// SendTerminateAlias is a helper method to define mock.On call
//   - target
//   - reason
func (_e *Connection_Expecter) SendTerminateAlias(target interface{}, reason interface{}) *Connection_SendTerminateAlias_Call {
	return &Connection_SendTerminateAlias_Call{Call: _e.mock.On("SendTerminateAlias", target, reason)}
}

func (_c *Connection_SendTerminateAlias_Call) Run(run func(target gen.Alias, reason error)) *Connection_SendTerminateAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Alias), args[1].(error))
	})
	return _c
}

func (_c *Connection_SendTerminateAlias_Call) Return(err error) *Connection_SendTerminateAlias_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_SendTerminateAlias_Call) RunAndReturn(run func(target gen.Alias, reason error) error) *Connection_SendTerminateAlias_Call {
	_c.Call.Return(run)
	return _c
}

// SendTerminateEvent provides a mock function for the type Connection
func (_mock *Connection) SendTerminateEvent(target gen.Event, reason error) error {
	ret := _mock.Called(target, reason)

	if len(ret) == 0 {
		panic("no return value specified for SendTerminateEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Event, error) error); ok {
		r0 = returnFunc(target, reason)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_SendTerminateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTerminateEvent'
type Connection_SendTerminateEvent_Call struct {
	*mock.Call
}

// SendTerminateEvent is a helper method to define mock.On call
//   - target
//   - reason
func (_e *Connection_Expecter) SendTerminateEvent(target interface{}, reason interface{}) *Connection_SendTerminateEvent_Call {
	return &Connection_SendTerminateEvent_Call{Call: _e.mock.On("SendTerminateEvent", target, reason)}
}

func (_c *Connection_SendTerminateEvent_Call) Run(run func(target gen.Event, reason error)) *Connection_SendTerminateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Event), args[1].(error))
	})
	return _c
}

func (_c *Connection_SendTerminateEvent_Call) Return(err error) *Connection_SendTerminateEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_SendTerminateEvent_Call) RunAndReturn(run func(target gen.Event, reason error) error) *Connection_SendTerminateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// SendTerminatePID provides a mock function for the type Connection
func (_mock *Connection) SendTerminatePID(target gen.PID, reason error) error {
	ret := _mock.Called(target, reason)

	if len(ret) == 0 {
		panic("no return value specified for SendTerminatePID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, error) error); ok {
		r0 = returnFunc(target, reason)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_SendTerminatePID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTerminatePID'
type Connection_SendTerminatePID_Call struct {
	*mock.Call
}

// SendTerminatePID is a helper method to define mock.On call
//   - target
//   - reason
func (_e *Connection_Expecter) SendTerminatePID(target interface{}, reason interface{}) *Connection_SendTerminatePID_Call {
	return &Connection_SendTerminatePID_Call{Call: _e.mock.On("SendTerminatePID", target, reason)}
}

func (_c *Connection_SendTerminatePID_Call) Run(run func(target gen.PID, reason error)) *Connection_SendTerminatePID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(error))
	})
	return _c
}

func (_c *Connection_SendTerminatePID_Call) Return(err error) *Connection_SendTerminatePID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_SendTerminatePID_Call) RunAndReturn(run func(target gen.PID, reason error) error) *Connection_SendTerminatePID_Call {
	_c.Call.Return(run)
	return _c
}

// SendTerminateProcessID provides a mock function for the type Connection
func (_mock *Connection) SendTerminateProcessID(target gen.ProcessID, reason error) error {
	ret := _mock.Called(target, reason)

	if len(ret) == 0 {
		panic("no return value specified for SendTerminateProcessID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.ProcessID, error) error); ok {
		r0 = returnFunc(target, reason)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_SendTerminateProcessID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTerminateProcessID'
type Connection_SendTerminateProcessID_Call struct {
	*mock.Call
}

// SendTerminateProcessID is a helper method to define mock.On call
//   - target
//   - reason
func (_e *Connection_Expecter) SendTerminateProcessID(target interface{}, reason interface{}) *Connection_SendTerminateProcessID_Call {
	return &Connection_SendTerminateProcessID_Call{Call: _e.mock.On("SendTerminateProcessID", target, reason)}
}

func (_c *Connection_SendTerminateProcessID_Call) Run(run func(target gen.ProcessID, reason error)) *Connection_SendTerminateProcessID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.ProcessID), args[1].(error))
	})
	return _c
}

func (_c *Connection_SendTerminateProcessID_Call) Return(err error) *Connection_SendTerminateProcessID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_SendTerminateProcessID_Call) RunAndReturn(run func(target gen.ProcessID, reason error) error) *Connection_SendTerminateProcessID_Call {
	_c.Call.Return(run)
	return _c
}

// Terminate provides a mock function for the type Connection
func (_mock *Connection) Terminate(reason error) {
	_mock.Called(reason)
	return
}

// Connection_Terminate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Terminate'
type Connection_Terminate_Call struct {
	*mock.Call
}

// Terminate is a helper method to define mock.On call
//   - reason
func (_e *Connection_Expecter) Terminate(reason interface{}) *Connection_Terminate_Call {
	return &Connection_Terminate_Call{Call: _e.mock.On("Terminate", reason)}
}

func (_c *Connection_Terminate_Call) Run(run func(reason error)) *Connection_Terminate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *Connection_Terminate_Call) Return() *Connection_Terminate_Call {
	_c.Call.Return()
	return _c
}

func (_c *Connection_Terminate_Call) RunAndReturn(run func(reason error)) *Connection_Terminate_Call {
	_c.Run(run)
	return _c
}

// UnlinkAlias provides a mock function for the type Connection
func (_mock *Connection) UnlinkAlias(pid gen.PID, target gen.Alias) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for UnlinkAlias")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Alias) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_UnlinkAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnlinkAlias'
type Connection_UnlinkAlias_Call struct {
	*mock.Call
}

// UnlinkAlias is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Connection_Expecter) UnlinkAlias(pid interface{}, target interface{}) *Connection_UnlinkAlias_Call {
	return &Connection_UnlinkAlias_Call{Call: _e.mock.On("UnlinkAlias", pid, target)}
}

func (_c *Connection_UnlinkAlias_Call) Run(run func(pid gen.PID, target gen.Alias)) *Connection_UnlinkAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.Alias))
	})
	return _c
}

func (_c *Connection_UnlinkAlias_Call) Return(err error) *Connection_UnlinkAlias_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_UnlinkAlias_Call) RunAndReturn(run func(pid gen.PID, target gen.Alias) error) *Connection_UnlinkAlias_Call {
	_c.Call.Return(run)
	return _c
}

// UnlinkEvent provides a mock function for the type Connection
func (_mock *Connection) UnlinkEvent(pid gen.PID, targer gen.Event) error {
	ret := _mock.Called(pid, targer)

	if len(ret) == 0 {
		panic("no return value specified for UnlinkEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Event) error); ok {
		r0 = returnFunc(pid, targer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_UnlinkEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnlinkEvent'
type Connection_UnlinkEvent_Call struct {
	*mock.Call
}

// UnlinkEvent is a helper method to define mock.On call
//   - pid
//   - targer
func (_e *Connection_Expecter) UnlinkEvent(pid interface{}, targer interface{}) *Connection_UnlinkEvent_Call {
	return &Connection_UnlinkEvent_Call{Call: _e.mock.On("UnlinkEvent", pid, targer)}
}

func (_c *Connection_UnlinkEvent_Call) Run(run func(pid gen.PID, targer gen.Event)) *Connection_UnlinkEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.Event))
	})
	return _c
}

func (_c *Connection_UnlinkEvent_Call) Return(err error) *Connection_UnlinkEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_UnlinkEvent_Call) RunAndReturn(run func(pid gen.PID, targer gen.Event) error) *Connection_UnlinkEvent_Call {
	_c.Call.Return(run)
	return _c
}

// UnlinkPID provides a mock function for the type Connection
func (_mock *Connection) UnlinkPID(pid gen.PID, target gen.PID) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for UnlinkPID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.PID) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_UnlinkPID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnlinkPID'
type Connection_UnlinkPID_Call struct {
	*mock.Call
}

// UnlinkPID is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Connection_Expecter) UnlinkPID(pid interface{}, target interface{}) *Connection_UnlinkPID_Call {
	return &Connection_UnlinkPID_Call{Call: _e.mock.On("UnlinkPID", pid, target)}
}

func (_c *Connection_UnlinkPID_Call) Run(run func(pid gen.PID, target gen.PID)) *Connection_UnlinkPID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.PID))
	})
	return _c
}

func (_c *Connection_UnlinkPID_Call) Return(err error) *Connection_UnlinkPID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_UnlinkPID_Call) RunAndReturn(run func(pid gen.PID, target gen.PID) error) *Connection_UnlinkPID_Call {
	_c.Call.Return(run)
	return _c
}

// UnlinkProcessID provides a mock function for the type Connection
func (_mock *Connection) UnlinkProcessID(pid gen.PID, target gen.ProcessID) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for UnlinkProcessID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.ProcessID) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Connection_UnlinkProcessID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnlinkProcessID'
type Connection_UnlinkProcessID_Call struct {
	*mock.Call
}

// UnlinkProcessID is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Connection_Expecter) UnlinkProcessID(pid interface{}, target interface{}) *Connection_UnlinkProcessID_Call {
	return &Connection_UnlinkProcessID_Call{Call: _e.mock.On("UnlinkProcessID", pid, target)}
}

func (_c *Connection_UnlinkProcessID_Call) Run(run func(pid gen.PID, target gen.ProcessID)) *Connection_UnlinkProcessID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.ProcessID))
	})
	return _c
}

func (_c *Connection_UnlinkProcessID_Call) Return(err error) *Connection_UnlinkProcessID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Connection_UnlinkProcessID_Call) RunAndReturn(run func(pid gen.PID, target gen.ProcessID) error) *Connection_UnlinkProcessID_Call {
	_c.Call.Return(run)
	return _c
}
