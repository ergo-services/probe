// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package stub

import (
	"ergo.services/ergo/gen"
	mock "github.com/stretchr/testify/mock"
)

// NewProcessBehavior creates a new instance of ProcessBehavior. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcessBehavior(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProcessBehavior {
	mock := &ProcessBehavior{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ProcessBehavior is an autogenerated mock type for the ProcessBehavior type
type ProcessBehavior struct {
	mock.Mock
}

type ProcessBehavior_Expecter struct {
	mock *mock.Mock
}

func (_m *ProcessBehavior) EXPECT() *ProcessBehavior_Expecter {
	return &ProcessBehavior_Expecter{mock: &_m.Mock}
}

// ProcessInit provides a mock function for the type ProcessBehavior
func (_mock *ProcessBehavior) ProcessInit(process gen.Process, args ...any) error {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(process, args)
	} else {
		tmpRet = _mock.Called(process)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ProcessInit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Process, ...any) error); ok {
		r0 = returnFunc(process, args...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ProcessBehavior_ProcessInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessInit'
type ProcessBehavior_ProcessInit_Call struct {
	*mock.Call
}

// ProcessInit is a helper method to define mock.On call
//   - process
//   - args
func (_e *ProcessBehavior_Expecter) ProcessInit(process interface{}, args ...interface{}) *ProcessBehavior_ProcessInit_Call {
	return &ProcessBehavior_ProcessInit_Call{Call: _e.mock.On("ProcessInit",
		append([]interface{}{process}, args...)...)}
}

func (_c *ProcessBehavior_ProcessInit_Call) Run(run func(process gen.Process, args ...any)) *ProcessBehavior_ProcessInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]any)
		run(args[0].(gen.Process), variadicArgs...)
	})
	return _c
}

func (_c *ProcessBehavior_ProcessInit_Call) Return(err error) *ProcessBehavior_ProcessInit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ProcessBehavior_ProcessInit_Call) RunAndReturn(run func(process gen.Process, args ...any) error) *ProcessBehavior_ProcessInit_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessRun provides a mock function for the type ProcessBehavior
func (_mock *ProcessBehavior) ProcessRun() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProcessRun")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ProcessBehavior_ProcessRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessRun'
type ProcessBehavior_ProcessRun_Call struct {
	*mock.Call
}

// ProcessRun is a helper method to define mock.On call
func (_e *ProcessBehavior_Expecter) ProcessRun() *ProcessBehavior_ProcessRun_Call {
	return &ProcessBehavior_ProcessRun_Call{Call: _e.mock.On("ProcessRun")}
}

func (_c *ProcessBehavior_ProcessRun_Call) Run(run func()) *ProcessBehavior_ProcessRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ProcessBehavior_ProcessRun_Call) Return(err error) *ProcessBehavior_ProcessRun_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ProcessBehavior_ProcessRun_Call) RunAndReturn(run func() error) *ProcessBehavior_ProcessRun_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessTerminate provides a mock function for the type ProcessBehavior
func (_mock *ProcessBehavior) ProcessTerminate(reason error) {
	_mock.Called(reason)
	return
}

// ProcessBehavior_ProcessTerminate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessTerminate'
type ProcessBehavior_ProcessTerminate_Call struct {
	*mock.Call
}

// ProcessTerminate is a helper method to define mock.On call
//   - reason
func (_e *ProcessBehavior_Expecter) ProcessTerminate(reason interface{}) *ProcessBehavior_ProcessTerminate_Call {
	return &ProcessBehavior_ProcessTerminate_Call{Call: _e.mock.On("ProcessTerminate", reason)}
}

func (_c *ProcessBehavior_ProcessTerminate_Call) Run(run func(reason error)) *ProcessBehavior_ProcessTerminate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *ProcessBehavior_ProcessTerminate_Call) Return() *ProcessBehavior_ProcessTerminate_Call {
	_c.Call.Return()
	return _c
}

func (_c *ProcessBehavior_ProcessTerminate_Call) RunAndReturn(run func(reason error)) *ProcessBehavior_ProcessTerminate_Call {
	_c.Run(run)
	return _c
}
