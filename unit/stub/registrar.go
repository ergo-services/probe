// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package stub

import (
	"ergo.services/ergo/gen"
	mock "github.com/stretchr/testify/mock"
)

// NewRegistrar creates a new instance of Registrar. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRegistrar(t interface {
	mock.TestingT
	Cleanup(func())
}) *Registrar {
	mock := &Registrar{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Registrar is an autogenerated mock type for the Registrar type
type Registrar struct {
	mock.Mock
}

type Registrar_Expecter struct {
	mock *mock.Mock
}

func (_m *Registrar) EXPECT() *Registrar_Expecter {
	return &Registrar_Expecter{mock: &_m.Mock}
}

// Config provides a mock function for the type Registrar
func (_mock *Registrar) Config(items ...string) (map[string]any, error) {
	var tmpRet mock.Arguments
	if len(items) > 0 {
		tmpRet = _mock.Called(items)
	} else {
		tmpRet = _mock.Called()
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Config")
	}

	var r0 map[string]any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(...string) (map[string]any, error)); ok {
		return returnFunc(items...)
	}
	if returnFunc, ok := ret.Get(0).(func(...string) map[string]any); ok {
		r0 = returnFunc(items...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(...string) error); ok {
		r1 = returnFunc(items...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Registrar_Config_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Config'
type Registrar_Config_Call struct {
	*mock.Call
}

// Config is a helper method to define mock.On call
//   - items
func (_e *Registrar_Expecter) Config(items ...interface{}) *Registrar_Config_Call {
	return &Registrar_Config_Call{Call: _e.mock.On("Config",
		append([]interface{}{}, items...)...)}
}

func (_c *Registrar_Config_Call) Run(run func(items ...string)) *Registrar_Config_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[0].([]string)
		run(variadicArgs...)
	})
	return _c
}

func (_c *Registrar_Config_Call) Return(stringToV map[string]any, err error) *Registrar_Config_Call {
	_c.Call.Return(stringToV, err)
	return _c
}

func (_c *Registrar_Config_Call) RunAndReturn(run func(items ...string) (map[string]any, error)) *Registrar_Config_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigItem provides a mock function for the type Registrar
func (_mock *Registrar) ConfigItem(item string) (any, error) {
	ret := _mock.Called(item)

	if len(ret) == 0 {
		panic("no return value specified for ConfigItem")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (any, error)); ok {
		return returnFunc(item)
	}
	if returnFunc, ok := ret.Get(0).(func(string) any); ok {
		r0 = returnFunc(item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(item)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Registrar_ConfigItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigItem'
type Registrar_ConfigItem_Call struct {
	*mock.Call
}

// ConfigItem is a helper method to define mock.On call
//   - item
func (_e *Registrar_Expecter) ConfigItem(item interface{}) *Registrar_ConfigItem_Call {
	return &Registrar_ConfigItem_Call{Call: _e.mock.On("ConfigItem", item)}
}

func (_c *Registrar_ConfigItem_Call) Run(run func(item string)) *Registrar_ConfigItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Registrar_ConfigItem_Call) Return(v any, err error) *Registrar_ConfigItem_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *Registrar_ConfigItem_Call) RunAndReturn(run func(item string) (any, error)) *Registrar_ConfigItem_Call {
	_c.Call.Return(run)
	return _c
}

// Event provides a mock function for the type Registrar
func (_mock *Registrar) Event() (gen.Event, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Event")
	}

	var r0 gen.Event
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (gen.Event, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() gen.Event); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.Event)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Registrar_Event_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Event'
type Registrar_Event_Call struct {
	*mock.Call
}

// Event is a helper method to define mock.On call
func (_e *Registrar_Expecter) Event() *Registrar_Event_Call {
	return &Registrar_Event_Call{Call: _e.mock.On("Event")}
}

func (_c *Registrar_Event_Call) Run(run func()) *Registrar_Event_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Registrar_Event_Call) Return(event gen.Event, err error) *Registrar_Event_Call {
	_c.Call.Return(event, err)
	return _c
}

func (_c *Registrar_Event_Call) RunAndReturn(run func() (gen.Event, error)) *Registrar_Event_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function for the type Registrar
func (_mock *Registrar) Info() gen.RegistrarInfo {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 gen.RegistrarInfo
	if returnFunc, ok := ret.Get(0).(func() gen.RegistrarInfo); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.RegistrarInfo)
	}
	return r0
}

// Registrar_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type Registrar_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
func (_e *Registrar_Expecter) Info() *Registrar_Info_Call {
	return &Registrar_Info_Call{Call: _e.mock.On("Info")}
}

func (_c *Registrar_Info_Call) Run(run func()) *Registrar_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Registrar_Info_Call) Return(registrarInfo gen.RegistrarInfo) *Registrar_Info_Call {
	_c.Call.Return(registrarInfo)
	return _c
}

func (_c *Registrar_Info_Call) RunAndReturn(run func() gen.RegistrarInfo) *Registrar_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Nodes provides a mock function for the type Registrar
func (_mock *Registrar) Nodes() ([]gen.Atom, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Nodes")
	}

	var r0 []gen.Atom
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]gen.Atom, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []gen.Atom); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gen.Atom)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Registrar_Nodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Nodes'
type Registrar_Nodes_Call struct {
	*mock.Call
}

// Nodes is a helper method to define mock.On call
func (_e *Registrar_Expecter) Nodes() *Registrar_Nodes_Call {
	return &Registrar_Nodes_Call{Call: _e.mock.On("Nodes")}
}

func (_c *Registrar_Nodes_Call) Run(run func()) *Registrar_Nodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Registrar_Nodes_Call) Return(atoms []gen.Atom, err error) *Registrar_Nodes_Call {
	_c.Call.Return(atoms, err)
	return _c
}

func (_c *Registrar_Nodes_Call) RunAndReturn(run func() ([]gen.Atom, error)) *Registrar_Nodes_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type Registrar
func (_mock *Registrar) Register(node gen.NodeRegistrar, routes gen.RegisterRoutes) (gen.StaticRoutes, error) {
	ret := _mock.Called(node, routes)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 gen.StaticRoutes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.NodeRegistrar, gen.RegisterRoutes) (gen.StaticRoutes, error)); ok {
		return returnFunc(node, routes)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.NodeRegistrar, gen.RegisterRoutes) gen.StaticRoutes); ok {
		r0 = returnFunc(node, routes)
	} else {
		r0 = ret.Get(0).(gen.StaticRoutes)
	}
	if returnFunc, ok := ret.Get(1).(func(gen.NodeRegistrar, gen.RegisterRoutes) error); ok {
		r1 = returnFunc(node, routes)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Registrar_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type Registrar_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - node
//   - routes
func (_e *Registrar_Expecter) Register(node interface{}, routes interface{}) *Registrar_Register_Call {
	return &Registrar_Register_Call{Call: _e.mock.On("Register", node, routes)}
}

func (_c *Registrar_Register_Call) Run(run func(node gen.NodeRegistrar, routes gen.RegisterRoutes)) *Registrar_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.NodeRegistrar), args[1].(gen.RegisterRoutes))
	})
	return _c
}

func (_c *Registrar_Register_Call) Return(staticRoutes gen.StaticRoutes, err error) *Registrar_Register_Call {
	_c.Call.Return(staticRoutes, err)
	return _c
}

func (_c *Registrar_Register_Call) RunAndReturn(run func(node gen.NodeRegistrar, routes gen.RegisterRoutes) (gen.StaticRoutes, error)) *Registrar_Register_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterApplicationRoute provides a mock function for the type Registrar
func (_mock *Registrar) RegisterApplicationRoute(route gen.ApplicationRoute) error {
	ret := _mock.Called(route)

	if len(ret) == 0 {
		panic("no return value specified for RegisterApplicationRoute")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.ApplicationRoute) error); ok {
		r0 = returnFunc(route)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Registrar_RegisterApplicationRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterApplicationRoute'
type Registrar_RegisterApplicationRoute_Call struct {
	*mock.Call
}

// RegisterApplicationRoute is a helper method to define mock.On call
//   - route
func (_e *Registrar_Expecter) RegisterApplicationRoute(route interface{}) *Registrar_RegisterApplicationRoute_Call {
	return &Registrar_RegisterApplicationRoute_Call{Call: _e.mock.On("RegisterApplicationRoute", route)}
}

func (_c *Registrar_RegisterApplicationRoute_Call) Run(run func(route gen.ApplicationRoute)) *Registrar_RegisterApplicationRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.ApplicationRoute))
	})
	return _c
}

func (_c *Registrar_RegisterApplicationRoute_Call) Return(err error) *Registrar_RegisterApplicationRoute_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Registrar_RegisterApplicationRoute_Call) RunAndReturn(run func(route gen.ApplicationRoute) error) *Registrar_RegisterApplicationRoute_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterProxy provides a mock function for the type Registrar
func (_mock *Registrar) RegisterProxy(to gen.Atom) error {
	ret := _mock.Called(to)

	if len(ret) == 0 {
		panic("no return value specified for RegisterProxy")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom) error); ok {
		r0 = returnFunc(to)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Registrar_RegisterProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterProxy'
type Registrar_RegisterProxy_Call struct {
	*mock.Call
}

// RegisterProxy is a helper method to define mock.On call
//   - to
func (_e *Registrar_Expecter) RegisterProxy(to interface{}) *Registrar_RegisterProxy_Call {
	return &Registrar_RegisterProxy_Call{Call: _e.mock.On("RegisterProxy", to)}
}

func (_c *Registrar_RegisterProxy_Call) Run(run func(to gen.Atom)) *Registrar_RegisterProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Atom))
	})
	return _c
}

func (_c *Registrar_RegisterProxy_Call) Return(err error) *Registrar_RegisterProxy_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Registrar_RegisterProxy_Call) RunAndReturn(run func(to gen.Atom) error) *Registrar_RegisterProxy_Call {
	_c.Call.Return(run)
	return _c
}

// Resolver provides a mock function for the type Registrar
func (_mock *Registrar) Resolver() gen.Resolver {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Resolver")
	}

	var r0 gen.Resolver
	if returnFunc, ok := ret.Get(0).(func() gen.Resolver); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gen.Resolver)
		}
	}
	return r0
}

// Registrar_Resolver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resolver'
type Registrar_Resolver_Call struct {
	*mock.Call
}

// Resolver is a helper method to define mock.On call
func (_e *Registrar_Expecter) Resolver() *Registrar_Resolver_Call {
	return &Registrar_Resolver_Call{Call: _e.mock.On("Resolver")}
}

func (_c *Registrar_Resolver_Call) Run(run func()) *Registrar_Resolver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Registrar_Resolver_Call) Return(resolver gen.Resolver) *Registrar_Resolver_Call {
	_c.Call.Return(resolver)
	return _c
}

func (_c *Registrar_Resolver_Call) RunAndReturn(run func() gen.Resolver) *Registrar_Resolver_Call {
	_c.Call.Return(run)
	return _c
}

// Terminate provides a mock function for the type Registrar
func (_mock *Registrar) Terminate() {
	_mock.Called()
	return
}

// Registrar_Terminate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Terminate'
type Registrar_Terminate_Call struct {
	*mock.Call
}

// Terminate is a helper method to define mock.On call
func (_e *Registrar_Expecter) Terminate() *Registrar_Terminate_Call {
	return &Registrar_Terminate_Call{Call: _e.mock.On("Terminate")}
}

func (_c *Registrar_Terminate_Call) Run(run func()) *Registrar_Terminate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Registrar_Terminate_Call) Return() *Registrar_Terminate_Call {
	_c.Call.Return()
	return _c
}

func (_c *Registrar_Terminate_Call) RunAndReturn(run func()) *Registrar_Terminate_Call {
	_c.Run(run)
	return _c
}

// UnregisterApplicationRoute provides a mock function for the type Registrar
func (_mock *Registrar) UnregisterApplicationRoute(name gen.Atom) error {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterApplicationRoute")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom) error); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Registrar_UnregisterApplicationRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterApplicationRoute'
type Registrar_UnregisterApplicationRoute_Call struct {
	*mock.Call
}

// UnregisterApplicationRoute is a helper method to define mock.On call
//   - name
func (_e *Registrar_Expecter) UnregisterApplicationRoute(name interface{}) *Registrar_UnregisterApplicationRoute_Call {
	return &Registrar_UnregisterApplicationRoute_Call{Call: _e.mock.On("UnregisterApplicationRoute", name)}
}

func (_c *Registrar_UnregisterApplicationRoute_Call) Run(run func(name gen.Atom)) *Registrar_UnregisterApplicationRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Atom))
	})
	return _c
}

func (_c *Registrar_UnregisterApplicationRoute_Call) Return(err error) *Registrar_UnregisterApplicationRoute_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Registrar_UnregisterApplicationRoute_Call) RunAndReturn(run func(name gen.Atom) error) *Registrar_UnregisterApplicationRoute_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterProxy provides a mock function for the type Registrar
func (_mock *Registrar) UnregisterProxy(to gen.Atom) error {
	ret := _mock.Called(to)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterProxy")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom) error); ok {
		r0 = returnFunc(to)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Registrar_UnregisterProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterProxy'
type Registrar_UnregisterProxy_Call struct {
	*mock.Call
}

// UnregisterProxy is a helper method to define mock.On call
//   - to
func (_e *Registrar_Expecter) UnregisterProxy(to interface{}) *Registrar_UnregisterProxy_Call {
	return &Registrar_UnregisterProxy_Call{Call: _e.mock.On("UnregisterProxy", to)}
}

func (_c *Registrar_UnregisterProxy_Call) Run(run func(to gen.Atom)) *Registrar_UnregisterProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Atom))
	})
	return _c
}

func (_c *Registrar_UnregisterProxy_Call) Return(err error) *Registrar_UnregisterProxy_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Registrar_UnregisterProxy_Call) RunAndReturn(run func(to gen.Atom) error) *Registrar_UnregisterProxy_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function for the type Registrar
func (_mock *Registrar) Version() gen.Version {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 gen.Version
	if returnFunc, ok := ret.Get(0).(func() gen.Version); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.Version)
	}
	return r0
}

// Registrar_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type Registrar_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *Registrar_Expecter) Version() *Registrar_Version_Call {
	return &Registrar_Version_Call{Call: _e.mock.On("Version")}
}

func (_c *Registrar_Version_Call) Run(run func()) *Registrar_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Registrar_Version_Call) Return(version gen.Version) *Registrar_Version_Call {
	_c.Call.Return(version)
	return _c
}

func (_c *Registrar_Version_Call) RunAndReturn(run func() gen.Version) *Registrar_Version_Call {
	_c.Call.Return(run)
	return _c
}
