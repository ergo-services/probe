// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package stub

import (
	"time"

	"ergo.services/ergo/gen"
	mock "github.com/stretchr/testify/mock"
)

// NewProcess creates a new instance of Process. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcess(t interface {
	mock.TestingT
	Cleanup(func())
}) *Process {
	mock := &Process{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Process is an autogenerated mock type for the Process type
type Process struct {
	mock.Mock
}

type Process_Expecter struct {
	mock *mock.Mock
}

func (_m *Process) EXPECT() *Process_Expecter {
	return &Process_Expecter{mock: &_m.Mock}
}

// Aliases provides a mock function for the type Process
func (_mock *Process) Aliases() []gen.Alias {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Aliases")
	}

	var r0 []gen.Alias
	if returnFunc, ok := ret.Get(0).(func() []gen.Alias); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gen.Alias)
		}
	}
	return r0
}

// Process_Aliases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Aliases'
type Process_Aliases_Call struct {
	*mock.Call
}

// Aliases is a helper method to define mock.On call
func (_e *Process_Expecter) Aliases() *Process_Aliases_Call {
	return &Process_Aliases_Call{Call: _e.mock.On("Aliases")}
}

func (_c *Process_Aliases_Call) Run(run func()) *Process_Aliases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_Aliases_Call) Return(aliass []gen.Alias) *Process_Aliases_Call {
	_c.Call.Return(aliass)
	return _c
}

func (_c *Process_Aliases_Call) RunAndReturn(run func() []gen.Alias) *Process_Aliases_Call {
	_c.Call.Return(run)
	return _c
}

// Behavior provides a mock function for the type Process
func (_mock *Process) Behavior() gen.ProcessBehavior {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Behavior")
	}

	var r0 gen.ProcessBehavior
	if returnFunc, ok := ret.Get(0).(func() gen.ProcessBehavior); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gen.ProcessBehavior)
		}
	}
	return r0
}

// Process_Behavior_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Behavior'
type Process_Behavior_Call struct {
	*mock.Call
}

// Behavior is a helper method to define mock.On call
func (_e *Process_Expecter) Behavior() *Process_Behavior_Call {
	return &Process_Behavior_Call{Call: _e.mock.On("Behavior")}
}

func (_c *Process_Behavior_Call) Run(run func()) *Process_Behavior_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_Behavior_Call) Return(processBehavior gen.ProcessBehavior) *Process_Behavior_Call {
	_c.Call.Return(processBehavior)
	return _c
}

func (_c *Process_Behavior_Call) RunAndReturn(run func() gen.ProcessBehavior) *Process_Behavior_Call {
	_c.Call.Return(run)
	return _c
}

// Call provides a mock function for the type Process
func (_mock *Process) Call(to any, message any) (any, error) {
	ret := _mock.Called(to, message)

	if len(ret) == 0 {
		panic("no return value specified for Call")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(any, any) (any, error)); ok {
		return returnFunc(to, message)
	}
	if returnFunc, ok := ret.Get(0).(func(any, any) any); ok {
		r0 = returnFunc(to, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(any, any) error); ok {
		r1 = returnFunc(to, message)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Process_Call_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Call'
type Process_Call_Call struct {
	*mock.Call
}

// Call is a helper method to define mock.On call
//   - to
//   - message
func (_e *Process_Expecter) Call(to interface{}, message interface{}) *Process_Call_Call {
	return &Process_Call_Call{Call: _e.mock.On("Call", to, message)}
}

func (_c *Process_Call_Call) Run(run func(to any, message any)) *Process_Call_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any), args[1].(any))
	})
	return _c
}

func (_c *Process_Call_Call) Return(v any, err error) *Process_Call_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *Process_Call_Call) RunAndReturn(run func(to any, message any) (any, error)) *Process_Call_Call {
	_c.Call.Return(run)
	return _c
}

// CallAlias provides a mock function for the type Process
func (_mock *Process) CallAlias(to gen.Alias, message any, timeout int) (any, error) {
	ret := _mock.Called(to, message, timeout)

	if len(ret) == 0 {
		panic("no return value specified for CallAlias")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.Alias, any, int) (any, error)); ok {
		return returnFunc(to, message, timeout)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.Alias, any, int) any); ok {
		r0 = returnFunc(to, message, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(gen.Alias, any, int) error); ok {
		r1 = returnFunc(to, message, timeout)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Process_CallAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallAlias'
type Process_CallAlias_Call struct {
	*mock.Call
}

// CallAlias is a helper method to define mock.On call
//   - to
//   - message
//   - timeout
func (_e *Process_Expecter) CallAlias(to interface{}, message interface{}, timeout interface{}) *Process_CallAlias_Call {
	return &Process_CallAlias_Call{Call: _e.mock.On("CallAlias", to, message, timeout)}
}

func (_c *Process_CallAlias_Call) Run(run func(to gen.Alias, message any, timeout int)) *Process_CallAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Alias), args[1].(any), args[2].(int))
	})
	return _c
}

func (_c *Process_CallAlias_Call) Return(v any, err error) *Process_CallAlias_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *Process_CallAlias_Call) RunAndReturn(run func(to gen.Alias, message any, timeout int) (any, error)) *Process_CallAlias_Call {
	_c.Call.Return(run)
	return _c
}

// CallImportant provides a mock function for the type Process
func (_mock *Process) CallImportant(to any, message any) (any, error) {
	ret := _mock.Called(to, message)

	if len(ret) == 0 {
		panic("no return value specified for CallImportant")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(any, any) (any, error)); ok {
		return returnFunc(to, message)
	}
	if returnFunc, ok := ret.Get(0).(func(any, any) any); ok {
		r0 = returnFunc(to, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(any, any) error); ok {
		r1 = returnFunc(to, message)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Process_CallImportant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallImportant'
type Process_CallImportant_Call struct {
	*mock.Call
}

// CallImportant is a helper method to define mock.On call
//   - to
//   - message
func (_e *Process_Expecter) CallImportant(to interface{}, message interface{}) *Process_CallImportant_Call {
	return &Process_CallImportant_Call{Call: _e.mock.On("CallImportant", to, message)}
}

func (_c *Process_CallImportant_Call) Run(run func(to any, message any)) *Process_CallImportant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any), args[1].(any))
	})
	return _c
}

func (_c *Process_CallImportant_Call) Return(v any, err error) *Process_CallImportant_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *Process_CallImportant_Call) RunAndReturn(run func(to any, message any) (any, error)) *Process_CallImportant_Call {
	_c.Call.Return(run)
	return _c
}

// CallPID provides a mock function for the type Process
func (_mock *Process) CallPID(to gen.PID, message any, timeout int) (any, error) {
	ret := _mock.Called(to, message, timeout)

	if len(ret) == 0 {
		panic("no return value specified for CallPID")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, any, int) (any, error)); ok {
		return returnFunc(to, message, timeout)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.PID, any, int) any); ok {
		r0 = returnFunc(to, message, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(gen.PID, any, int) error); ok {
		r1 = returnFunc(to, message, timeout)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Process_CallPID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallPID'
type Process_CallPID_Call struct {
	*mock.Call
}

// CallPID is a helper method to define mock.On call
//   - to
//   - message
//   - timeout
func (_e *Process_Expecter) CallPID(to interface{}, message interface{}, timeout interface{}) *Process_CallPID_Call {
	return &Process_CallPID_Call{Call: _e.mock.On("CallPID", to, message, timeout)}
}

func (_c *Process_CallPID_Call) Run(run func(to gen.PID, message any, timeout int)) *Process_CallPID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(any), args[2].(int))
	})
	return _c
}

func (_c *Process_CallPID_Call) Return(v any, err error) *Process_CallPID_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *Process_CallPID_Call) RunAndReturn(run func(to gen.PID, message any, timeout int) (any, error)) *Process_CallPID_Call {
	_c.Call.Return(run)
	return _c
}

// CallProcessID provides a mock function for the type Process
func (_mock *Process) CallProcessID(to gen.ProcessID, message any, timeout int) (any, error) {
	ret := _mock.Called(to, message, timeout)

	if len(ret) == 0 {
		panic("no return value specified for CallProcessID")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.ProcessID, any, int) (any, error)); ok {
		return returnFunc(to, message, timeout)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.ProcessID, any, int) any); ok {
		r0 = returnFunc(to, message, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(gen.ProcessID, any, int) error); ok {
		r1 = returnFunc(to, message, timeout)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Process_CallProcessID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallProcessID'
type Process_CallProcessID_Call struct {
	*mock.Call
}

// CallProcessID is a helper method to define mock.On call
//   - to
//   - message
//   - timeout
func (_e *Process_Expecter) CallProcessID(to interface{}, message interface{}, timeout interface{}) *Process_CallProcessID_Call {
	return &Process_CallProcessID_Call{Call: _e.mock.On("CallProcessID", to, message, timeout)}
}

func (_c *Process_CallProcessID_Call) Run(run func(to gen.ProcessID, message any, timeout int)) *Process_CallProcessID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.ProcessID), args[1].(any), args[2].(int))
	})
	return _c
}

func (_c *Process_CallProcessID_Call) Return(v any, err error) *Process_CallProcessID_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *Process_CallProcessID_Call) RunAndReturn(run func(to gen.ProcessID, message any, timeout int) (any, error)) *Process_CallProcessID_Call {
	_c.Call.Return(run)
	return _c
}

// CallWithPriority provides a mock function for the type Process
func (_mock *Process) CallWithPriority(to any, message any, priority gen.MessagePriority) (any, error) {
	ret := _mock.Called(to, message, priority)

	if len(ret) == 0 {
		panic("no return value specified for CallWithPriority")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(any, any, gen.MessagePriority) (any, error)); ok {
		return returnFunc(to, message, priority)
	}
	if returnFunc, ok := ret.Get(0).(func(any, any, gen.MessagePriority) any); ok {
		r0 = returnFunc(to, message, priority)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(any, any, gen.MessagePriority) error); ok {
		r1 = returnFunc(to, message, priority)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Process_CallWithPriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallWithPriority'
type Process_CallWithPriority_Call struct {
	*mock.Call
}

// CallWithPriority is a helper method to define mock.On call
//   - to
//   - message
//   - priority
func (_e *Process_Expecter) CallWithPriority(to interface{}, message interface{}, priority interface{}) *Process_CallWithPriority_Call {
	return &Process_CallWithPriority_Call{Call: _e.mock.On("CallWithPriority", to, message, priority)}
}

func (_c *Process_CallWithPriority_Call) Run(run func(to any, message any, priority gen.MessagePriority)) *Process_CallWithPriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any), args[1].(any), args[2].(gen.MessagePriority))
	})
	return _c
}

func (_c *Process_CallWithPriority_Call) Return(v any, err error) *Process_CallWithPriority_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *Process_CallWithPriority_Call) RunAndReturn(run func(to any, message any, priority gen.MessagePriority) (any, error)) *Process_CallWithPriority_Call {
	_c.Call.Return(run)
	return _c
}

// CallWithTimeout provides a mock function for the type Process
func (_mock *Process) CallWithTimeout(to any, message any, timeout int) (any, error) {
	ret := _mock.Called(to, message, timeout)

	if len(ret) == 0 {
		panic("no return value specified for CallWithTimeout")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(any, any, int) (any, error)); ok {
		return returnFunc(to, message, timeout)
	}
	if returnFunc, ok := ret.Get(0).(func(any, any, int) any); ok {
		r0 = returnFunc(to, message, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(any, any, int) error); ok {
		r1 = returnFunc(to, message, timeout)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Process_CallWithTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallWithTimeout'
type Process_CallWithTimeout_Call struct {
	*mock.Call
}

// CallWithTimeout is a helper method to define mock.On call
//   - to
//   - message
//   - timeout
func (_e *Process_Expecter) CallWithTimeout(to interface{}, message interface{}, timeout interface{}) *Process_CallWithTimeout_Call {
	return &Process_CallWithTimeout_Call{Call: _e.mock.On("CallWithTimeout", to, message, timeout)}
}

func (_c *Process_CallWithTimeout_Call) Run(run func(to any, message any, timeout int)) *Process_CallWithTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any), args[1].(any), args[2].(int))
	})
	return _c
}

func (_c *Process_CallWithTimeout_Call) Return(v any, err error) *Process_CallWithTimeout_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *Process_CallWithTimeout_Call) RunAndReturn(run func(to any, message any, timeout int) (any, error)) *Process_CallWithTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// Compression provides a mock function for the type Process
func (_mock *Process) Compression() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Compression")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// Process_Compression_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compression'
type Process_Compression_Call struct {
	*mock.Call
}

// Compression is a helper method to define mock.On call
func (_e *Process_Expecter) Compression() *Process_Compression_Call {
	return &Process_Compression_Call{Call: _e.mock.On("Compression")}
}

func (_c *Process_Compression_Call) Run(run func()) *Process_Compression_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_Compression_Call) Return(b bool) *Process_Compression_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *Process_Compression_Call) RunAndReturn(run func() bool) *Process_Compression_Call {
	_c.Call.Return(run)
	return _c
}

// CompressionLevel provides a mock function for the type Process
func (_mock *Process) CompressionLevel() gen.CompressionLevel {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CompressionLevel")
	}

	var r0 gen.CompressionLevel
	if returnFunc, ok := ret.Get(0).(func() gen.CompressionLevel); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.CompressionLevel)
	}
	return r0
}

// Process_CompressionLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompressionLevel'
type Process_CompressionLevel_Call struct {
	*mock.Call
}

// CompressionLevel is a helper method to define mock.On call
func (_e *Process_Expecter) CompressionLevel() *Process_CompressionLevel_Call {
	return &Process_CompressionLevel_Call{Call: _e.mock.On("CompressionLevel")}
}

func (_c *Process_CompressionLevel_Call) Run(run func()) *Process_CompressionLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_CompressionLevel_Call) Return(compressionLevel gen.CompressionLevel) *Process_CompressionLevel_Call {
	_c.Call.Return(compressionLevel)
	return _c
}

func (_c *Process_CompressionLevel_Call) RunAndReturn(run func() gen.CompressionLevel) *Process_CompressionLevel_Call {
	_c.Call.Return(run)
	return _c
}

// CompressionThreshold provides a mock function for the type Process
func (_mock *Process) CompressionThreshold() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CompressionThreshold")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// Process_CompressionThreshold_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompressionThreshold'
type Process_CompressionThreshold_Call struct {
	*mock.Call
}

// CompressionThreshold is a helper method to define mock.On call
func (_e *Process_Expecter) CompressionThreshold() *Process_CompressionThreshold_Call {
	return &Process_CompressionThreshold_Call{Call: _e.mock.On("CompressionThreshold")}
}

func (_c *Process_CompressionThreshold_Call) Run(run func()) *Process_CompressionThreshold_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_CompressionThreshold_Call) Return(n int) *Process_CompressionThreshold_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *Process_CompressionThreshold_Call) RunAndReturn(run func() int) *Process_CompressionThreshold_Call {
	_c.Call.Return(run)
	return _c
}

// CompressionType provides a mock function for the type Process
func (_mock *Process) CompressionType() gen.CompressionType {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CompressionType")
	}

	var r0 gen.CompressionType
	if returnFunc, ok := ret.Get(0).(func() gen.CompressionType); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.CompressionType)
	}
	return r0
}

// Process_CompressionType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompressionType'
type Process_CompressionType_Call struct {
	*mock.Call
}

// CompressionType is a helper method to define mock.On call
func (_e *Process_Expecter) CompressionType() *Process_CompressionType_Call {
	return &Process_CompressionType_Call{Call: _e.mock.On("CompressionType")}
}

func (_c *Process_CompressionType_Call) Run(run func()) *Process_CompressionType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_CompressionType_Call) Return(compressionType gen.CompressionType) *Process_CompressionType_Call {
	_c.Call.Return(compressionType)
	return _c
}

func (_c *Process_CompressionType_Call) RunAndReturn(run func() gen.CompressionType) *Process_CompressionType_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAlias provides a mock function for the type Process
func (_mock *Process) CreateAlias() (gen.Alias, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateAlias")
	}

	var r0 gen.Alias
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (gen.Alias, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() gen.Alias); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.Alias)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Process_CreateAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAlias'
type Process_CreateAlias_Call struct {
	*mock.Call
}

// CreateAlias is a helper method to define mock.On call
func (_e *Process_Expecter) CreateAlias() *Process_CreateAlias_Call {
	return &Process_CreateAlias_Call{Call: _e.mock.On("CreateAlias")}
}

func (_c *Process_CreateAlias_Call) Run(run func()) *Process_CreateAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_CreateAlias_Call) Return(alias gen.Alias, err error) *Process_CreateAlias_Call {
	_c.Call.Return(alias, err)
	return _c
}

func (_c *Process_CreateAlias_Call) RunAndReturn(run func() (gen.Alias, error)) *Process_CreateAlias_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAlias provides a mock function for the type Process
func (_mock *Process) DeleteAlias(alias gen.Alias) error {
	ret := _mock.Called(alias)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlias")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Alias) error); ok {
		r0 = returnFunc(alias)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_DeleteAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAlias'
type Process_DeleteAlias_Call struct {
	*mock.Call
}

// DeleteAlias is a helper method to define mock.On call
//   - alias
func (_e *Process_Expecter) DeleteAlias(alias interface{}) *Process_DeleteAlias_Call {
	return &Process_DeleteAlias_Call{Call: _e.mock.On("DeleteAlias", alias)}
}

func (_c *Process_DeleteAlias_Call) Run(run func(alias gen.Alias)) *Process_DeleteAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Alias))
	})
	return _c
}

func (_c *Process_DeleteAlias_Call) Return(err error) *Process_DeleteAlias_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_DeleteAlias_Call) RunAndReturn(run func(alias gen.Alias) error) *Process_DeleteAlias_Call {
	_c.Call.Return(run)
	return _c
}

// Demonitor provides a mock function for the type Process
func (_mock *Process) Demonitor(target any) error {
	ret := _mock.Called(target)

	if len(ret) == 0 {
		panic("no return value specified for Demonitor")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_Demonitor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Demonitor'
type Process_Demonitor_Call struct {
	*mock.Call
}

// Demonitor is a helper method to define mock.On call
//   - target
func (_e *Process_Expecter) Demonitor(target interface{}) *Process_Demonitor_Call {
	return &Process_Demonitor_Call{Call: _e.mock.On("Demonitor", target)}
}

func (_c *Process_Demonitor_Call) Run(run func(target any)) *Process_Demonitor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any))
	})
	return _c
}

func (_c *Process_Demonitor_Call) Return(err error) *Process_Demonitor_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_Demonitor_Call) RunAndReturn(run func(target any) error) *Process_Demonitor_Call {
	_c.Call.Return(run)
	return _c
}

// DemonitorAlias provides a mock function for the type Process
func (_mock *Process) DemonitorAlias(alias gen.Alias) error {
	ret := _mock.Called(alias)

	if len(ret) == 0 {
		panic("no return value specified for DemonitorAlias")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Alias) error); ok {
		r0 = returnFunc(alias)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_DemonitorAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DemonitorAlias'
type Process_DemonitorAlias_Call struct {
	*mock.Call
}

// DemonitorAlias is a helper method to define mock.On call
//   - alias
func (_e *Process_Expecter) DemonitorAlias(alias interface{}) *Process_DemonitorAlias_Call {
	return &Process_DemonitorAlias_Call{Call: _e.mock.On("DemonitorAlias", alias)}
}

func (_c *Process_DemonitorAlias_Call) Run(run func(alias gen.Alias)) *Process_DemonitorAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Alias))
	})
	return _c
}

func (_c *Process_DemonitorAlias_Call) Return(err error) *Process_DemonitorAlias_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_DemonitorAlias_Call) RunAndReturn(run func(alias gen.Alias) error) *Process_DemonitorAlias_Call {
	_c.Call.Return(run)
	return _c
}

// DemonitorEvent provides a mock function for the type Process
func (_mock *Process) DemonitorEvent(event gen.Event) error {
	ret := _mock.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for DemonitorEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Event) error); ok {
		r0 = returnFunc(event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_DemonitorEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DemonitorEvent'
type Process_DemonitorEvent_Call struct {
	*mock.Call
}

// DemonitorEvent is a helper method to define mock.On call
//   - event
func (_e *Process_Expecter) DemonitorEvent(event interface{}) *Process_DemonitorEvent_Call {
	return &Process_DemonitorEvent_Call{Call: _e.mock.On("DemonitorEvent", event)}
}

func (_c *Process_DemonitorEvent_Call) Run(run func(event gen.Event)) *Process_DemonitorEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Event))
	})
	return _c
}

func (_c *Process_DemonitorEvent_Call) Return(err error) *Process_DemonitorEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_DemonitorEvent_Call) RunAndReturn(run func(event gen.Event) error) *Process_DemonitorEvent_Call {
	_c.Call.Return(run)
	return _c
}

// DemonitorNode provides a mock function for the type Process
func (_mock *Process) DemonitorNode(node gen.Atom) error {
	ret := _mock.Called(node)

	if len(ret) == 0 {
		panic("no return value specified for DemonitorNode")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom) error); ok {
		r0 = returnFunc(node)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_DemonitorNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DemonitorNode'
type Process_DemonitorNode_Call struct {
	*mock.Call
}

// DemonitorNode is a helper method to define mock.On call
//   - node
func (_e *Process_Expecter) DemonitorNode(node interface{}) *Process_DemonitorNode_Call {
	return &Process_DemonitorNode_Call{Call: _e.mock.On("DemonitorNode", node)}
}

func (_c *Process_DemonitorNode_Call) Run(run func(node gen.Atom)) *Process_DemonitorNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Atom))
	})
	return _c
}

func (_c *Process_DemonitorNode_Call) Return(err error) *Process_DemonitorNode_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_DemonitorNode_Call) RunAndReturn(run func(node gen.Atom) error) *Process_DemonitorNode_Call {
	_c.Call.Return(run)
	return _c
}

// DemonitorPID provides a mock function for the type Process
func (_mock *Process) DemonitorPID(pid gen.PID) error {
	ret := _mock.Called(pid)

	if len(ret) == 0 {
		panic("no return value specified for DemonitorPID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID) error); ok {
		r0 = returnFunc(pid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_DemonitorPID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DemonitorPID'
type Process_DemonitorPID_Call struct {
	*mock.Call
}

// DemonitorPID is a helper method to define mock.On call
//   - pid
func (_e *Process_Expecter) DemonitorPID(pid interface{}) *Process_DemonitorPID_Call {
	return &Process_DemonitorPID_Call{Call: _e.mock.On("DemonitorPID", pid)}
}

func (_c *Process_DemonitorPID_Call) Run(run func(pid gen.PID)) *Process_DemonitorPID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID))
	})
	return _c
}

func (_c *Process_DemonitorPID_Call) Return(err error) *Process_DemonitorPID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_DemonitorPID_Call) RunAndReturn(run func(pid gen.PID) error) *Process_DemonitorPID_Call {
	_c.Call.Return(run)
	return _c
}

// DemonitorProcessID provides a mock function for the type Process
func (_mock *Process) DemonitorProcessID(process gen.ProcessID) error {
	ret := _mock.Called(process)

	if len(ret) == 0 {
		panic("no return value specified for DemonitorProcessID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.ProcessID) error); ok {
		r0 = returnFunc(process)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_DemonitorProcessID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DemonitorProcessID'
type Process_DemonitorProcessID_Call struct {
	*mock.Call
}

// DemonitorProcessID is a helper method to define mock.On call
//   - process
func (_e *Process_Expecter) DemonitorProcessID(process interface{}) *Process_DemonitorProcessID_Call {
	return &Process_DemonitorProcessID_Call{Call: _e.mock.On("DemonitorProcessID", process)}
}

func (_c *Process_DemonitorProcessID_Call) Run(run func(process gen.ProcessID)) *Process_DemonitorProcessID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.ProcessID))
	})
	return _c
}

func (_c *Process_DemonitorProcessID_Call) Return(err error) *Process_DemonitorProcessID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_DemonitorProcessID_Call) RunAndReturn(run func(process gen.ProcessID) error) *Process_DemonitorProcessID_Call {
	_c.Call.Return(run)
	return _c
}

// Env provides a mock function for the type Process
func (_mock *Process) Env(name gen.Env) (any, bool) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Env")
	}

	var r0 any
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(gen.Env) (any, bool)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.Env) any); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(gen.Env) bool); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// Process_Env_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Env'
type Process_Env_Call struct {
	*mock.Call
}

// Env is a helper method to define mock.On call
//   - name
func (_e *Process_Expecter) Env(name interface{}) *Process_Env_Call {
	return &Process_Env_Call{Call: _e.mock.On("Env", name)}
}

func (_c *Process_Env_Call) Run(run func(name gen.Env)) *Process_Env_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Env))
	})
	return _c
}

func (_c *Process_Env_Call) Return(v any, b bool) *Process_Env_Call {
	_c.Call.Return(v, b)
	return _c
}

func (_c *Process_Env_Call) RunAndReturn(run func(name gen.Env) (any, bool)) *Process_Env_Call {
	_c.Call.Return(run)
	return _c
}

// EnvList provides a mock function for the type Process
func (_mock *Process) EnvList() map[gen.Env]any {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnvList")
	}

	var r0 map[gen.Env]any
	if returnFunc, ok := ret.Get(0).(func() map[gen.Env]any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[gen.Env]any)
		}
	}
	return r0
}

// Process_EnvList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnvList'
type Process_EnvList_Call struct {
	*mock.Call
}

// EnvList is a helper method to define mock.On call
func (_e *Process_Expecter) EnvList() *Process_EnvList_Call {
	return &Process_EnvList_Call{Call: _e.mock.On("EnvList")}
}

func (_c *Process_EnvList_Call) Run(run func()) *Process_EnvList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_EnvList_Call) Return(envToV map[gen.Env]any) *Process_EnvList_Call {
	_c.Call.Return(envToV)
	return _c
}

func (_c *Process_EnvList_Call) RunAndReturn(run func() map[gen.Env]any) *Process_EnvList_Call {
	_c.Call.Return(run)
	return _c
}

// Events provides a mock function for the type Process
func (_mock *Process) Events() []gen.Atom {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Events")
	}

	var r0 []gen.Atom
	if returnFunc, ok := ret.Get(0).(func() []gen.Atom); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gen.Atom)
		}
	}
	return r0
}

// Process_Events_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Events'
type Process_Events_Call struct {
	*mock.Call
}

// Events is a helper method to define mock.On call
func (_e *Process_Expecter) Events() *Process_Events_Call {
	return &Process_Events_Call{Call: _e.mock.On("Events")}
}

func (_c *Process_Events_Call) Run(run func()) *Process_Events_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_Events_Call) Return(atoms []gen.Atom) *Process_Events_Call {
	_c.Call.Return(atoms)
	return _c
}

func (_c *Process_Events_Call) RunAndReturn(run func() []gen.Atom) *Process_Events_Call {
	_c.Call.Return(run)
	return _c
}

// Forward provides a mock function for the type Process
func (_mock *Process) Forward(to gen.PID, message *gen.MailboxMessage, priority gen.MessagePriority) error {
	ret := _mock.Called(to, message, priority)

	if len(ret) == 0 {
		panic("no return value specified for Forward")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, *gen.MailboxMessage, gen.MessagePriority) error); ok {
		r0 = returnFunc(to, message, priority)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_Forward_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Forward'
type Process_Forward_Call struct {
	*mock.Call
}

// Forward is a helper method to define mock.On call
//   - to
//   - message
//   - priority
func (_e *Process_Expecter) Forward(to interface{}, message interface{}, priority interface{}) *Process_Forward_Call {
	return &Process_Forward_Call{Call: _e.mock.On("Forward", to, message, priority)}
}

func (_c *Process_Forward_Call) Run(run func(to gen.PID, message *gen.MailboxMessage, priority gen.MessagePriority)) *Process_Forward_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(*gen.MailboxMessage), args[2].(gen.MessagePriority))
	})
	return _c
}

func (_c *Process_Forward_Call) Return(err error) *Process_Forward_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_Forward_Call) RunAndReturn(run func(to gen.PID, message *gen.MailboxMessage, priority gen.MessagePriority) error) *Process_Forward_Call {
	_c.Call.Return(run)
	return _c
}

// ImportantDelivery provides a mock function for the type Process
func (_mock *Process) ImportantDelivery() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ImportantDelivery")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// Process_ImportantDelivery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImportantDelivery'
type Process_ImportantDelivery_Call struct {
	*mock.Call
}

// ImportantDelivery is a helper method to define mock.On call
func (_e *Process_Expecter) ImportantDelivery() *Process_ImportantDelivery_Call {
	return &Process_ImportantDelivery_Call{Call: _e.mock.On("ImportantDelivery")}
}

func (_c *Process_ImportantDelivery_Call) Run(run func()) *Process_ImportantDelivery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_ImportantDelivery_Call) Return(b bool) *Process_ImportantDelivery_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *Process_ImportantDelivery_Call) RunAndReturn(run func() bool) *Process_ImportantDelivery_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function for the type Process
func (_mock *Process) Info() (gen.ProcessInfo, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 gen.ProcessInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (gen.ProcessInfo, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() gen.ProcessInfo); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.ProcessInfo)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Process_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type Process_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
func (_e *Process_Expecter) Info() *Process_Info_Call {
	return &Process_Info_Call{Call: _e.mock.On("Info")}
}

func (_c *Process_Info_Call) Run(run func()) *Process_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_Info_Call) Return(processInfo gen.ProcessInfo, err error) *Process_Info_Call {
	_c.Call.Return(processInfo, err)
	return _c
}

func (_c *Process_Info_Call) RunAndReturn(run func() (gen.ProcessInfo, error)) *Process_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Inspect provides a mock function for the type Process
func (_mock *Process) Inspect(target gen.PID, item ...string) (map[string]string, error) {
	var tmpRet mock.Arguments
	if len(item) > 0 {
		tmpRet = _mock.Called(target, item)
	} else {
		tmpRet = _mock.Called(target)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Inspect")
	}

	var r0 map[string]string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, ...string) (map[string]string, error)); ok {
		return returnFunc(target, item...)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.PID, ...string) map[string]string); ok {
		r0 = returnFunc(target, item...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(gen.PID, ...string) error); ok {
		r1 = returnFunc(target, item...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Process_Inspect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Inspect'
type Process_Inspect_Call struct {
	*mock.Call
}

// Inspect is a helper method to define mock.On call
//   - target
//   - item
func (_e *Process_Expecter) Inspect(target interface{}, item ...interface{}) *Process_Inspect_Call {
	return &Process_Inspect_Call{Call: _e.mock.On("Inspect",
		append([]interface{}{target}, item...)...)}
}

func (_c *Process_Inspect_Call) Run(run func(target gen.PID, item ...string)) *Process_Inspect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]string)
		run(args[0].(gen.PID), variadicArgs...)
	})
	return _c
}

func (_c *Process_Inspect_Call) Return(stringToString map[string]string, err error) *Process_Inspect_Call {
	_c.Call.Return(stringToString, err)
	return _c
}

func (_c *Process_Inspect_Call) RunAndReturn(run func(target gen.PID, item ...string) (map[string]string, error)) *Process_Inspect_Call {
	_c.Call.Return(run)
	return _c
}

// InspectMeta provides a mock function for the type Process
func (_mock *Process) InspectMeta(meta gen.Alias, item ...string) (map[string]string, error) {
	var tmpRet mock.Arguments
	if len(item) > 0 {
		tmpRet = _mock.Called(meta, item)
	} else {
		tmpRet = _mock.Called(meta)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for InspectMeta")
	}

	var r0 map[string]string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.Alias, ...string) (map[string]string, error)); ok {
		return returnFunc(meta, item...)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.Alias, ...string) map[string]string); ok {
		r0 = returnFunc(meta, item...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(gen.Alias, ...string) error); ok {
		r1 = returnFunc(meta, item...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Process_InspectMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InspectMeta'
type Process_InspectMeta_Call struct {
	*mock.Call
}

// InspectMeta is a helper method to define mock.On call
//   - meta
//   - item
func (_e *Process_Expecter) InspectMeta(meta interface{}, item ...interface{}) *Process_InspectMeta_Call {
	return &Process_InspectMeta_Call{Call: _e.mock.On("InspectMeta",
		append([]interface{}{meta}, item...)...)}
}

func (_c *Process_InspectMeta_Call) Run(run func(meta gen.Alias, item ...string)) *Process_InspectMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]string)
		run(args[0].(gen.Alias), variadicArgs...)
	})
	return _c
}

func (_c *Process_InspectMeta_Call) Return(stringToString map[string]string, err error) *Process_InspectMeta_Call {
	_c.Call.Return(stringToString, err)
	return _c
}

func (_c *Process_InspectMeta_Call) RunAndReturn(run func(meta gen.Alias, item ...string) (map[string]string, error)) *Process_InspectMeta_Call {
	_c.Call.Return(run)
	return _c
}

// KeepNetworkOrder provides a mock function for the type Process
func (_mock *Process) KeepNetworkOrder() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for KeepNetworkOrder")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// Process_KeepNetworkOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KeepNetworkOrder'
type Process_KeepNetworkOrder_Call struct {
	*mock.Call
}

// KeepNetworkOrder is a helper method to define mock.On call
func (_e *Process_Expecter) KeepNetworkOrder() *Process_KeepNetworkOrder_Call {
	return &Process_KeepNetworkOrder_Call{Call: _e.mock.On("KeepNetworkOrder")}
}

func (_c *Process_KeepNetworkOrder_Call) Run(run func()) *Process_KeepNetworkOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_KeepNetworkOrder_Call) Return(b bool) *Process_KeepNetworkOrder_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *Process_KeepNetworkOrder_Call) RunAndReturn(run func() bool) *Process_KeepNetworkOrder_Call {
	_c.Call.Return(run)
	return _c
}

// Leader provides a mock function for the type Process
func (_mock *Process) Leader() gen.PID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Leader")
	}

	var r0 gen.PID
	if returnFunc, ok := ret.Get(0).(func() gen.PID); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.PID)
	}
	return r0
}

// Process_Leader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Leader'
type Process_Leader_Call struct {
	*mock.Call
}

// Leader is a helper method to define mock.On call
func (_e *Process_Expecter) Leader() *Process_Leader_Call {
	return &Process_Leader_Call{Call: _e.mock.On("Leader")}
}

func (_c *Process_Leader_Call) Run(run func()) *Process_Leader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_Leader_Call) Return(pID gen.PID) *Process_Leader_Call {
	_c.Call.Return(pID)
	return _c
}

func (_c *Process_Leader_Call) RunAndReturn(run func() gen.PID) *Process_Leader_Call {
	_c.Call.Return(run)
	return _c
}

// Link provides a mock function for the type Process
func (_mock *Process) Link(target any) error {
	ret := _mock.Called(target)

	if len(ret) == 0 {
		panic("no return value specified for Link")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_Link_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Link'
type Process_Link_Call struct {
	*mock.Call
}

// Link is a helper method to define mock.On call
//   - target
func (_e *Process_Expecter) Link(target interface{}) *Process_Link_Call {
	return &Process_Link_Call{Call: _e.mock.On("Link", target)}
}

func (_c *Process_Link_Call) Run(run func(target any)) *Process_Link_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any))
	})
	return _c
}

func (_c *Process_Link_Call) Return(err error) *Process_Link_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_Link_Call) RunAndReturn(run func(target any) error) *Process_Link_Call {
	_c.Call.Return(run)
	return _c
}

// LinkAlias provides a mock function for the type Process
func (_mock *Process) LinkAlias(target gen.Alias) error {
	ret := _mock.Called(target)

	if len(ret) == 0 {
		panic("no return value specified for LinkAlias")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Alias) error); ok {
		r0 = returnFunc(target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_LinkAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkAlias'
type Process_LinkAlias_Call struct {
	*mock.Call
}

// LinkAlias is a helper method to define mock.On call
//   - target
func (_e *Process_Expecter) LinkAlias(target interface{}) *Process_LinkAlias_Call {
	return &Process_LinkAlias_Call{Call: _e.mock.On("LinkAlias", target)}
}

func (_c *Process_LinkAlias_Call) Run(run func(target gen.Alias)) *Process_LinkAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Alias))
	})
	return _c
}

func (_c *Process_LinkAlias_Call) Return(err error) *Process_LinkAlias_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_LinkAlias_Call) RunAndReturn(run func(target gen.Alias) error) *Process_LinkAlias_Call {
	_c.Call.Return(run)
	return _c
}

// LinkEvent provides a mock function for the type Process
func (_mock *Process) LinkEvent(target gen.Event) ([]gen.MessageEvent, error) {
	ret := _mock.Called(target)

	if len(ret) == 0 {
		panic("no return value specified for LinkEvent")
	}

	var r0 []gen.MessageEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.Event) ([]gen.MessageEvent, error)); ok {
		return returnFunc(target)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.Event) []gen.MessageEvent); ok {
		r0 = returnFunc(target)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gen.MessageEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(gen.Event) error); ok {
		r1 = returnFunc(target)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Process_LinkEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkEvent'
type Process_LinkEvent_Call struct {
	*mock.Call
}

// LinkEvent is a helper method to define mock.On call
//   - target
func (_e *Process_Expecter) LinkEvent(target interface{}) *Process_LinkEvent_Call {
	return &Process_LinkEvent_Call{Call: _e.mock.On("LinkEvent", target)}
}

func (_c *Process_LinkEvent_Call) Run(run func(target gen.Event)) *Process_LinkEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Event))
	})
	return _c
}

func (_c *Process_LinkEvent_Call) Return(messageEvents []gen.MessageEvent, err error) *Process_LinkEvent_Call {
	_c.Call.Return(messageEvents, err)
	return _c
}

func (_c *Process_LinkEvent_Call) RunAndReturn(run func(target gen.Event) ([]gen.MessageEvent, error)) *Process_LinkEvent_Call {
	_c.Call.Return(run)
	return _c
}

// LinkNode provides a mock function for the type Process
func (_mock *Process) LinkNode(target gen.Atom) error {
	ret := _mock.Called(target)

	if len(ret) == 0 {
		panic("no return value specified for LinkNode")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom) error); ok {
		r0 = returnFunc(target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_LinkNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkNode'
type Process_LinkNode_Call struct {
	*mock.Call
}

// LinkNode is a helper method to define mock.On call
//   - target
func (_e *Process_Expecter) LinkNode(target interface{}) *Process_LinkNode_Call {
	return &Process_LinkNode_Call{Call: _e.mock.On("LinkNode", target)}
}

func (_c *Process_LinkNode_Call) Run(run func(target gen.Atom)) *Process_LinkNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Atom))
	})
	return _c
}

func (_c *Process_LinkNode_Call) Return(err error) *Process_LinkNode_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_LinkNode_Call) RunAndReturn(run func(target gen.Atom) error) *Process_LinkNode_Call {
	_c.Call.Return(run)
	return _c
}

// LinkPID provides a mock function for the type Process
func (_mock *Process) LinkPID(target gen.PID) error {
	ret := _mock.Called(target)

	if len(ret) == 0 {
		panic("no return value specified for LinkPID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID) error); ok {
		r0 = returnFunc(target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_LinkPID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkPID'
type Process_LinkPID_Call struct {
	*mock.Call
}

// LinkPID is a helper method to define mock.On call
//   - target
func (_e *Process_Expecter) LinkPID(target interface{}) *Process_LinkPID_Call {
	return &Process_LinkPID_Call{Call: _e.mock.On("LinkPID", target)}
}

func (_c *Process_LinkPID_Call) Run(run func(target gen.PID)) *Process_LinkPID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID))
	})
	return _c
}

func (_c *Process_LinkPID_Call) Return(err error) *Process_LinkPID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_LinkPID_Call) RunAndReturn(run func(target gen.PID) error) *Process_LinkPID_Call {
	_c.Call.Return(run)
	return _c
}

// LinkProcessID provides a mock function for the type Process
func (_mock *Process) LinkProcessID(target gen.ProcessID) error {
	ret := _mock.Called(target)

	if len(ret) == 0 {
		panic("no return value specified for LinkProcessID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.ProcessID) error); ok {
		r0 = returnFunc(target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_LinkProcessID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkProcessID'
type Process_LinkProcessID_Call struct {
	*mock.Call
}

// LinkProcessID is a helper method to define mock.On call
//   - target
func (_e *Process_Expecter) LinkProcessID(target interface{}) *Process_LinkProcessID_Call {
	return &Process_LinkProcessID_Call{Call: _e.mock.On("LinkProcessID", target)}
}

func (_c *Process_LinkProcessID_Call) Run(run func(target gen.ProcessID)) *Process_LinkProcessID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.ProcessID))
	})
	return _c
}

func (_c *Process_LinkProcessID_Call) Return(err error) *Process_LinkProcessID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_LinkProcessID_Call) RunAndReturn(run func(target gen.ProcessID) error) *Process_LinkProcessID_Call {
	_c.Call.Return(run)
	return _c
}

// Log provides a mock function for the type Process
func (_mock *Process) Log() gen.Log {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 gen.Log
	if returnFunc, ok := ret.Get(0).(func() gen.Log); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gen.Log)
		}
	}
	return r0
}

// Process_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type Process_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
func (_e *Process_Expecter) Log() *Process_Log_Call {
	return &Process_Log_Call{Call: _e.mock.On("Log")}
}

func (_c *Process_Log_Call) Run(run func()) *Process_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_Log_Call) Return(log gen.Log) *Process_Log_Call {
	_c.Call.Return(log)
	return _c
}

func (_c *Process_Log_Call) RunAndReturn(run func() gen.Log) *Process_Log_Call {
	_c.Call.Return(run)
	return _c
}

// Mailbox provides a mock function for the type Process
func (_mock *Process) Mailbox() gen.ProcessMailbox {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Mailbox")
	}

	var r0 gen.ProcessMailbox
	if returnFunc, ok := ret.Get(0).(func() gen.ProcessMailbox); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.ProcessMailbox)
	}
	return r0
}

// Process_Mailbox_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mailbox'
type Process_Mailbox_Call struct {
	*mock.Call
}

// Mailbox is a helper method to define mock.On call
func (_e *Process_Expecter) Mailbox() *Process_Mailbox_Call {
	return &Process_Mailbox_Call{Call: _e.mock.On("Mailbox")}
}

func (_c *Process_Mailbox_Call) Run(run func()) *Process_Mailbox_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_Mailbox_Call) Return(processMailbox gen.ProcessMailbox) *Process_Mailbox_Call {
	_c.Call.Return(processMailbox)
	return _c
}

func (_c *Process_Mailbox_Call) RunAndReturn(run func() gen.ProcessMailbox) *Process_Mailbox_Call {
	_c.Call.Return(run)
	return _c
}

// MetaInfo provides a mock function for the type Process
func (_mock *Process) MetaInfo(meta gen.Alias) (gen.MetaInfo, error) {
	ret := _mock.Called(meta)

	if len(ret) == 0 {
		panic("no return value specified for MetaInfo")
	}

	var r0 gen.MetaInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.Alias) (gen.MetaInfo, error)); ok {
		return returnFunc(meta)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.Alias) gen.MetaInfo); ok {
		r0 = returnFunc(meta)
	} else {
		r0 = ret.Get(0).(gen.MetaInfo)
	}
	if returnFunc, ok := ret.Get(1).(func(gen.Alias) error); ok {
		r1 = returnFunc(meta)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Process_MetaInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MetaInfo'
type Process_MetaInfo_Call struct {
	*mock.Call
}

// MetaInfo is a helper method to define mock.On call
//   - meta
func (_e *Process_Expecter) MetaInfo(meta interface{}) *Process_MetaInfo_Call {
	return &Process_MetaInfo_Call{Call: _e.mock.On("MetaInfo", meta)}
}

func (_c *Process_MetaInfo_Call) Run(run func(meta gen.Alias)) *Process_MetaInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Alias))
	})
	return _c
}

func (_c *Process_MetaInfo_Call) Return(metaInfo gen.MetaInfo, err error) *Process_MetaInfo_Call {
	_c.Call.Return(metaInfo, err)
	return _c
}

func (_c *Process_MetaInfo_Call) RunAndReturn(run func(meta gen.Alias) (gen.MetaInfo, error)) *Process_MetaInfo_Call {
	_c.Call.Return(run)
	return _c
}

// Monitor provides a mock function for the type Process
func (_mock *Process) Monitor(target any) error {
	ret := _mock.Called(target)

	if len(ret) == 0 {
		panic("no return value specified for Monitor")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_Monitor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Monitor'
type Process_Monitor_Call struct {
	*mock.Call
}

// Monitor is a helper method to define mock.On call
//   - target
func (_e *Process_Expecter) Monitor(target interface{}) *Process_Monitor_Call {
	return &Process_Monitor_Call{Call: _e.mock.On("Monitor", target)}
}

func (_c *Process_Monitor_Call) Run(run func(target any)) *Process_Monitor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any))
	})
	return _c
}

func (_c *Process_Monitor_Call) Return(err error) *Process_Monitor_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_Monitor_Call) RunAndReturn(run func(target any) error) *Process_Monitor_Call {
	_c.Call.Return(run)
	return _c
}

// MonitorAlias provides a mock function for the type Process
func (_mock *Process) MonitorAlias(alias gen.Alias) error {
	ret := _mock.Called(alias)

	if len(ret) == 0 {
		panic("no return value specified for MonitorAlias")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Alias) error); ok {
		r0 = returnFunc(alias)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_MonitorAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MonitorAlias'
type Process_MonitorAlias_Call struct {
	*mock.Call
}

// MonitorAlias is a helper method to define mock.On call
//   - alias
func (_e *Process_Expecter) MonitorAlias(alias interface{}) *Process_MonitorAlias_Call {
	return &Process_MonitorAlias_Call{Call: _e.mock.On("MonitorAlias", alias)}
}

func (_c *Process_MonitorAlias_Call) Run(run func(alias gen.Alias)) *Process_MonitorAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Alias))
	})
	return _c
}

func (_c *Process_MonitorAlias_Call) Return(err error) *Process_MonitorAlias_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_MonitorAlias_Call) RunAndReturn(run func(alias gen.Alias) error) *Process_MonitorAlias_Call {
	_c.Call.Return(run)
	return _c
}

// MonitorEvent provides a mock function for the type Process
func (_mock *Process) MonitorEvent(event gen.Event) ([]gen.MessageEvent, error) {
	ret := _mock.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for MonitorEvent")
	}

	var r0 []gen.MessageEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.Event) ([]gen.MessageEvent, error)); ok {
		return returnFunc(event)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.Event) []gen.MessageEvent); ok {
		r0 = returnFunc(event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gen.MessageEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(gen.Event) error); ok {
		r1 = returnFunc(event)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Process_MonitorEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MonitorEvent'
type Process_MonitorEvent_Call struct {
	*mock.Call
}

// MonitorEvent is a helper method to define mock.On call
//   - event
func (_e *Process_Expecter) MonitorEvent(event interface{}) *Process_MonitorEvent_Call {
	return &Process_MonitorEvent_Call{Call: _e.mock.On("MonitorEvent", event)}
}

func (_c *Process_MonitorEvent_Call) Run(run func(event gen.Event)) *Process_MonitorEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Event))
	})
	return _c
}

func (_c *Process_MonitorEvent_Call) Return(messageEvents []gen.MessageEvent, err error) *Process_MonitorEvent_Call {
	_c.Call.Return(messageEvents, err)
	return _c
}

func (_c *Process_MonitorEvent_Call) RunAndReturn(run func(event gen.Event) ([]gen.MessageEvent, error)) *Process_MonitorEvent_Call {
	_c.Call.Return(run)
	return _c
}

// MonitorNode provides a mock function for the type Process
func (_mock *Process) MonitorNode(node gen.Atom) error {
	ret := _mock.Called(node)

	if len(ret) == 0 {
		panic("no return value specified for MonitorNode")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom) error); ok {
		r0 = returnFunc(node)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_MonitorNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MonitorNode'
type Process_MonitorNode_Call struct {
	*mock.Call
}

// MonitorNode is a helper method to define mock.On call
//   - node
func (_e *Process_Expecter) MonitorNode(node interface{}) *Process_MonitorNode_Call {
	return &Process_MonitorNode_Call{Call: _e.mock.On("MonitorNode", node)}
}

func (_c *Process_MonitorNode_Call) Run(run func(node gen.Atom)) *Process_MonitorNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Atom))
	})
	return _c
}

func (_c *Process_MonitorNode_Call) Return(err error) *Process_MonitorNode_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_MonitorNode_Call) RunAndReturn(run func(node gen.Atom) error) *Process_MonitorNode_Call {
	_c.Call.Return(run)
	return _c
}

// MonitorPID provides a mock function for the type Process
func (_mock *Process) MonitorPID(pid gen.PID) error {
	ret := _mock.Called(pid)

	if len(ret) == 0 {
		panic("no return value specified for MonitorPID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID) error); ok {
		r0 = returnFunc(pid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_MonitorPID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MonitorPID'
type Process_MonitorPID_Call struct {
	*mock.Call
}

// MonitorPID is a helper method to define mock.On call
//   - pid
func (_e *Process_Expecter) MonitorPID(pid interface{}) *Process_MonitorPID_Call {
	return &Process_MonitorPID_Call{Call: _e.mock.On("MonitorPID", pid)}
}

func (_c *Process_MonitorPID_Call) Run(run func(pid gen.PID)) *Process_MonitorPID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID))
	})
	return _c
}

func (_c *Process_MonitorPID_Call) Return(err error) *Process_MonitorPID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_MonitorPID_Call) RunAndReturn(run func(pid gen.PID) error) *Process_MonitorPID_Call {
	_c.Call.Return(run)
	return _c
}

// MonitorProcessID provides a mock function for the type Process
func (_mock *Process) MonitorProcessID(process gen.ProcessID) error {
	ret := _mock.Called(process)

	if len(ret) == 0 {
		panic("no return value specified for MonitorProcessID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.ProcessID) error); ok {
		r0 = returnFunc(process)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_MonitorProcessID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MonitorProcessID'
type Process_MonitorProcessID_Call struct {
	*mock.Call
}

// MonitorProcessID is a helper method to define mock.On call
//   - process
func (_e *Process_Expecter) MonitorProcessID(process interface{}) *Process_MonitorProcessID_Call {
	return &Process_MonitorProcessID_Call{Call: _e.mock.On("MonitorProcessID", process)}
}

func (_c *Process_MonitorProcessID_Call) Run(run func(process gen.ProcessID)) *Process_MonitorProcessID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.ProcessID))
	})
	return _c
}

func (_c *Process_MonitorProcessID_Call) Return(err error) *Process_MonitorProcessID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_MonitorProcessID_Call) RunAndReturn(run func(process gen.ProcessID) error) *Process_MonitorProcessID_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type Process
func (_mock *Process) Name() gen.Atom {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 gen.Atom
	if returnFunc, ok := ret.Get(0).(func() gen.Atom); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.Atom)
	}
	return r0
}

// Process_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Process_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Process_Expecter) Name() *Process_Name_Call {
	return &Process_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Process_Name_Call) Run(run func()) *Process_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_Name_Call) Return(atom gen.Atom) *Process_Name_Call {
	_c.Call.Return(atom)
	return _c
}

func (_c *Process_Name_Call) RunAndReturn(run func() gen.Atom) *Process_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Node provides a mock function for the type Process
func (_mock *Process) Node() gen.Node {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Node")
	}

	var r0 gen.Node
	if returnFunc, ok := ret.Get(0).(func() gen.Node); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gen.Node)
		}
	}
	return r0
}

// Process_Node_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Node'
type Process_Node_Call struct {
	*mock.Call
}

// Node is a helper method to define mock.On call
func (_e *Process_Expecter) Node() *Process_Node_Call {
	return &Process_Node_Call{Call: _e.mock.On("Node")}
}

func (_c *Process_Node_Call) Run(run func()) *Process_Node_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_Node_Call) Return(node gen.Node) *Process_Node_Call {
	_c.Call.Return(node)
	return _c
}

func (_c *Process_Node_Call) RunAndReturn(run func() gen.Node) *Process_Node_Call {
	_c.Call.Return(run)
	return _c
}

// PID provides a mock function for the type Process
func (_mock *Process) PID() gen.PID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for PID")
	}

	var r0 gen.PID
	if returnFunc, ok := ret.Get(0).(func() gen.PID); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.PID)
	}
	return r0
}

// Process_PID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PID'
type Process_PID_Call struct {
	*mock.Call
}

// PID is a helper method to define mock.On call
func (_e *Process_Expecter) PID() *Process_PID_Call {
	return &Process_PID_Call{Call: _e.mock.On("PID")}
}

func (_c *Process_PID_Call) Run(run func()) *Process_PID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_PID_Call) Return(pID gen.PID) *Process_PID_Call {
	_c.Call.Return(pID)
	return _c
}

func (_c *Process_PID_Call) RunAndReturn(run func() gen.PID) *Process_PID_Call {
	_c.Call.Return(run)
	return _c
}

// Parent provides a mock function for the type Process
func (_mock *Process) Parent() gen.PID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Parent")
	}

	var r0 gen.PID
	if returnFunc, ok := ret.Get(0).(func() gen.PID); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.PID)
	}
	return r0
}

// Process_Parent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parent'
type Process_Parent_Call struct {
	*mock.Call
}

// Parent is a helper method to define mock.On call
func (_e *Process_Expecter) Parent() *Process_Parent_Call {
	return &Process_Parent_Call{Call: _e.mock.On("Parent")}
}

func (_c *Process_Parent_Call) Run(run func()) *Process_Parent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_Parent_Call) Return(pID gen.PID) *Process_Parent_Call {
	_c.Call.Return(pID)
	return _c
}

func (_c *Process_Parent_Call) RunAndReturn(run func() gen.PID) *Process_Parent_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterEvent provides a mock function for the type Process
func (_mock *Process) RegisterEvent(name gen.Atom, options gen.EventOptions) (gen.Ref, error) {
	ret := _mock.Called(name, options)

	if len(ret) == 0 {
		panic("no return value specified for RegisterEvent")
	}

	var r0 gen.Ref
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.EventOptions) (gen.Ref, error)); ok {
		return returnFunc(name, options)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.EventOptions) gen.Ref); ok {
		r0 = returnFunc(name, options)
	} else {
		r0 = ret.Get(0).(gen.Ref)
	}
	if returnFunc, ok := ret.Get(1).(func(gen.Atom, gen.EventOptions) error); ok {
		r1 = returnFunc(name, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Process_RegisterEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterEvent'
type Process_RegisterEvent_Call struct {
	*mock.Call
}

// RegisterEvent is a helper method to define mock.On call
//   - name
//   - options
func (_e *Process_Expecter) RegisterEvent(name interface{}, options interface{}) *Process_RegisterEvent_Call {
	return &Process_RegisterEvent_Call{Call: _e.mock.On("RegisterEvent", name, options)}
}

func (_c *Process_RegisterEvent_Call) Run(run func(name gen.Atom, options gen.EventOptions)) *Process_RegisterEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Atom), args[1].(gen.EventOptions))
	})
	return _c
}

func (_c *Process_RegisterEvent_Call) Return(ref gen.Ref, err error) *Process_RegisterEvent_Call {
	_c.Call.Return(ref, err)
	return _c
}

func (_c *Process_RegisterEvent_Call) RunAndReturn(run func(name gen.Atom, options gen.EventOptions) (gen.Ref, error)) *Process_RegisterEvent_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterName provides a mock function for the type Process
func (_mock *Process) RegisterName(name gen.Atom) error {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for RegisterName")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom) error); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_RegisterName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterName'
type Process_RegisterName_Call struct {
	*mock.Call
}

// RegisterName is a helper method to define mock.On call
//   - name
func (_e *Process_Expecter) RegisterName(name interface{}) *Process_RegisterName_Call {
	return &Process_RegisterName_Call{Call: _e.mock.On("RegisterName", name)}
}

func (_c *Process_RegisterName_Call) Run(run func(name gen.Atom)) *Process_RegisterName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Atom))
	})
	return _c
}

func (_c *Process_RegisterName_Call) Return(err error) *Process_RegisterName_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_RegisterName_Call) RunAndReturn(run func(name gen.Atom) error) *Process_RegisterName_Call {
	_c.Call.Return(run)
	return _c
}

// RemoteSpawn provides a mock function for the type Process
func (_mock *Process) RemoteSpawn(node gen.Atom, name gen.Atom, options gen.ProcessOptions, args ...any) (gen.PID, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(node, name, options, args)
	} else {
		tmpRet = _mock.Called(node, name, options)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RemoteSpawn")
	}

	var r0 gen.PID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.Atom, gen.ProcessOptions, ...any) (gen.PID, error)); ok {
		return returnFunc(node, name, options, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.Atom, gen.ProcessOptions, ...any) gen.PID); ok {
		r0 = returnFunc(node, name, options, args...)
	} else {
		r0 = ret.Get(0).(gen.PID)
	}
	if returnFunc, ok := ret.Get(1).(func(gen.Atom, gen.Atom, gen.ProcessOptions, ...any) error); ok {
		r1 = returnFunc(node, name, options, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Process_RemoteSpawn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoteSpawn'
type Process_RemoteSpawn_Call struct {
	*mock.Call
}

// RemoteSpawn is a helper method to define mock.On call
//   - node
//   - name
//   - options
//   - args
func (_e *Process_Expecter) RemoteSpawn(node interface{}, name interface{}, options interface{}, args ...interface{}) *Process_RemoteSpawn_Call {
	return &Process_RemoteSpawn_Call{Call: _e.mock.On("RemoteSpawn",
		append([]interface{}{node, name, options}, args...)...)}
}

func (_c *Process_RemoteSpawn_Call) Run(run func(node gen.Atom, name gen.Atom, options gen.ProcessOptions, args ...any)) *Process_RemoteSpawn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]any)
		run(args[0].(gen.Atom), args[1].(gen.Atom), args[2].(gen.ProcessOptions), variadicArgs...)
	})
	return _c
}

func (_c *Process_RemoteSpawn_Call) Return(pID gen.PID, err error) *Process_RemoteSpawn_Call {
	_c.Call.Return(pID, err)
	return _c
}

func (_c *Process_RemoteSpawn_Call) RunAndReturn(run func(node gen.Atom, name gen.Atom, options gen.ProcessOptions, args ...any) (gen.PID, error)) *Process_RemoteSpawn_Call {
	_c.Call.Return(run)
	return _c
}

// RemoteSpawnRegister provides a mock function for the type Process
func (_mock *Process) RemoteSpawnRegister(node gen.Atom, name gen.Atom, register gen.Atom, options gen.ProcessOptions, args ...any) (gen.PID, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(node, name, register, options, args)
	} else {
		tmpRet = _mock.Called(node, name, register, options)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RemoteSpawnRegister")
	}

	var r0 gen.PID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.Atom, gen.Atom, gen.ProcessOptions, ...any) (gen.PID, error)); ok {
		return returnFunc(node, name, register, options, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.Atom, gen.Atom, gen.ProcessOptions, ...any) gen.PID); ok {
		r0 = returnFunc(node, name, register, options, args...)
	} else {
		r0 = ret.Get(0).(gen.PID)
	}
	if returnFunc, ok := ret.Get(1).(func(gen.Atom, gen.Atom, gen.Atom, gen.ProcessOptions, ...any) error); ok {
		r1 = returnFunc(node, name, register, options, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Process_RemoteSpawnRegister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoteSpawnRegister'
type Process_RemoteSpawnRegister_Call struct {
	*mock.Call
}

// RemoteSpawnRegister is a helper method to define mock.On call
//   - node
//   - name
//   - register
//   - options
//   - args
func (_e *Process_Expecter) RemoteSpawnRegister(node interface{}, name interface{}, register interface{}, options interface{}, args ...interface{}) *Process_RemoteSpawnRegister_Call {
	return &Process_RemoteSpawnRegister_Call{Call: _e.mock.On("RemoteSpawnRegister",
		append([]interface{}{node, name, register, options}, args...)...)}
}

func (_c *Process_RemoteSpawnRegister_Call) Run(run func(node gen.Atom, name gen.Atom, register gen.Atom, options gen.ProcessOptions, args ...any)) *Process_RemoteSpawnRegister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[4].([]any)
		run(args[0].(gen.Atom), args[1].(gen.Atom), args[2].(gen.Atom), args[3].(gen.ProcessOptions), variadicArgs...)
	})
	return _c
}

func (_c *Process_RemoteSpawnRegister_Call) Return(pID gen.PID, err error) *Process_RemoteSpawnRegister_Call {
	_c.Call.Return(pID, err)
	return _c
}

func (_c *Process_RemoteSpawnRegister_Call) RunAndReturn(run func(node gen.Atom, name gen.Atom, register gen.Atom, options gen.ProcessOptions, args ...any) (gen.PID, error)) *Process_RemoteSpawnRegister_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function for the type Process
func (_mock *Process) Send(to any, message any) error {
	ret := _mock.Called(to, message)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any, any) error); ok {
		r0 = returnFunc(to, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type Process_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - to
//   - message
func (_e *Process_Expecter) Send(to interface{}, message interface{}) *Process_Send_Call {
	return &Process_Send_Call{Call: _e.mock.On("Send", to, message)}
}

func (_c *Process_Send_Call) Run(run func(to any, message any)) *Process_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any), args[1].(any))
	})
	return _c
}

func (_c *Process_Send_Call) Return(err error) *Process_Send_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_Send_Call) RunAndReturn(run func(to any, message any) error) *Process_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SendAfter provides a mock function for the type Process
func (_mock *Process) SendAfter(to any, message any, after time.Duration) (gen.CancelFunc, error) {
	ret := _mock.Called(to, message, after)

	if len(ret) == 0 {
		panic("no return value specified for SendAfter")
	}

	var r0 gen.CancelFunc
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(any, any, time.Duration) (gen.CancelFunc, error)); ok {
		return returnFunc(to, message, after)
	}
	if returnFunc, ok := ret.Get(0).(func(any, any, time.Duration) gen.CancelFunc); ok {
		r0 = returnFunc(to, message, after)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gen.CancelFunc)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(any, any, time.Duration) error); ok {
		r1 = returnFunc(to, message, after)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Process_SendAfter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAfter'
type Process_SendAfter_Call struct {
	*mock.Call
}

// SendAfter is a helper method to define mock.On call
//   - to
//   - message
//   - after
func (_e *Process_Expecter) SendAfter(to interface{}, message interface{}, after interface{}) *Process_SendAfter_Call {
	return &Process_SendAfter_Call{Call: _e.mock.On("SendAfter", to, message, after)}
}

func (_c *Process_SendAfter_Call) Run(run func(to any, message any, after time.Duration)) *Process_SendAfter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any), args[1].(any), args[2].(time.Duration))
	})
	return _c
}

func (_c *Process_SendAfter_Call) Return(cancelFunc gen.CancelFunc, err error) *Process_SendAfter_Call {
	_c.Call.Return(cancelFunc, err)
	return _c
}

func (_c *Process_SendAfter_Call) RunAndReturn(run func(to any, message any, after time.Duration) (gen.CancelFunc, error)) *Process_SendAfter_Call {
	_c.Call.Return(run)
	return _c
}

// SendAlias provides a mock function for the type Process
func (_mock *Process) SendAlias(to gen.Alias, message any) error {
	ret := _mock.Called(to, message)

	if len(ret) == 0 {
		panic("no return value specified for SendAlias")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Alias, any) error); ok {
		r0 = returnFunc(to, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_SendAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAlias'
type Process_SendAlias_Call struct {
	*mock.Call
}

// SendAlias is a helper method to define mock.On call
//   - to
//   - message
func (_e *Process_Expecter) SendAlias(to interface{}, message interface{}) *Process_SendAlias_Call {
	return &Process_SendAlias_Call{Call: _e.mock.On("SendAlias", to, message)}
}

func (_c *Process_SendAlias_Call) Run(run func(to gen.Alias, message any)) *Process_SendAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Alias), args[1].(any))
	})
	return _c
}

func (_c *Process_SendAlias_Call) Return(err error) *Process_SendAlias_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_SendAlias_Call) RunAndReturn(run func(to gen.Alias, message any) error) *Process_SendAlias_Call {
	_c.Call.Return(run)
	return _c
}

// SendEvent provides a mock function for the type Process
func (_mock *Process) SendEvent(name gen.Atom, token gen.Ref, message any) error {
	ret := _mock.Called(name, token, message)

	if len(ret) == 0 {
		panic("no return value specified for SendEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.Ref, any) error); ok {
		r0 = returnFunc(name, token, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_SendEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEvent'
type Process_SendEvent_Call struct {
	*mock.Call
}

// SendEvent is a helper method to define mock.On call
//   - name
//   - token
//   - message
func (_e *Process_Expecter) SendEvent(name interface{}, token interface{}, message interface{}) *Process_SendEvent_Call {
	return &Process_SendEvent_Call{Call: _e.mock.On("SendEvent", name, token, message)}
}

func (_c *Process_SendEvent_Call) Run(run func(name gen.Atom, token gen.Ref, message any)) *Process_SendEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Atom), args[1].(gen.Ref), args[2].(any))
	})
	return _c
}

func (_c *Process_SendEvent_Call) Return(err error) *Process_SendEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_SendEvent_Call) RunAndReturn(run func(name gen.Atom, token gen.Ref, message any) error) *Process_SendEvent_Call {
	_c.Call.Return(run)
	return _c
}

// SendExit provides a mock function for the type Process
func (_mock *Process) SendExit(to gen.PID, reason error) error {
	ret := _mock.Called(to, reason)

	if len(ret) == 0 {
		panic("no return value specified for SendExit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, error) error); ok {
		r0 = returnFunc(to, reason)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_SendExit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendExit'
type Process_SendExit_Call struct {
	*mock.Call
}

// SendExit is a helper method to define mock.On call
//   - to
//   - reason
func (_e *Process_Expecter) SendExit(to interface{}, reason interface{}) *Process_SendExit_Call {
	return &Process_SendExit_Call{Call: _e.mock.On("SendExit", to, reason)}
}

func (_c *Process_SendExit_Call) Run(run func(to gen.PID, reason error)) *Process_SendExit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(error))
	})
	return _c
}

func (_c *Process_SendExit_Call) Return(err error) *Process_SendExit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_SendExit_Call) RunAndReturn(run func(to gen.PID, reason error) error) *Process_SendExit_Call {
	_c.Call.Return(run)
	return _c
}

// SendExitMeta provides a mock function for the type Process
func (_mock *Process) SendExitMeta(meta gen.Alias, reason error) error {
	ret := _mock.Called(meta, reason)

	if len(ret) == 0 {
		panic("no return value specified for SendExitMeta")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Alias, error) error); ok {
		r0 = returnFunc(meta, reason)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_SendExitMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendExitMeta'
type Process_SendExitMeta_Call struct {
	*mock.Call
}

// SendExitMeta is a helper method to define mock.On call
//   - meta
//   - reason
func (_e *Process_Expecter) SendExitMeta(meta interface{}, reason interface{}) *Process_SendExitMeta_Call {
	return &Process_SendExitMeta_Call{Call: _e.mock.On("SendExitMeta", meta, reason)}
}

func (_c *Process_SendExitMeta_Call) Run(run func(meta gen.Alias, reason error)) *Process_SendExitMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Alias), args[1].(error))
	})
	return _c
}

func (_c *Process_SendExitMeta_Call) Return(err error) *Process_SendExitMeta_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_SendExitMeta_Call) RunAndReturn(run func(meta gen.Alias, reason error) error) *Process_SendExitMeta_Call {
	_c.Call.Return(run)
	return _c
}

// SendImportant provides a mock function for the type Process
func (_mock *Process) SendImportant(to any, message any) error {
	ret := _mock.Called(to, message)

	if len(ret) == 0 {
		panic("no return value specified for SendImportant")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any, any) error); ok {
		r0 = returnFunc(to, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_SendImportant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendImportant'
type Process_SendImportant_Call struct {
	*mock.Call
}

// SendImportant is a helper method to define mock.On call
//   - to
//   - message
func (_e *Process_Expecter) SendImportant(to interface{}, message interface{}) *Process_SendImportant_Call {
	return &Process_SendImportant_Call{Call: _e.mock.On("SendImportant", to, message)}
}

func (_c *Process_SendImportant_Call) Run(run func(to any, message any)) *Process_SendImportant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any), args[1].(any))
	})
	return _c
}

func (_c *Process_SendImportant_Call) Return(err error) *Process_SendImportant_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_SendImportant_Call) RunAndReturn(run func(to any, message any) error) *Process_SendImportant_Call {
	_c.Call.Return(run)
	return _c
}

// SendPID provides a mock function for the type Process
func (_mock *Process) SendPID(to gen.PID, message any) error {
	ret := _mock.Called(to, message)

	if len(ret) == 0 {
		panic("no return value specified for SendPID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, any) error); ok {
		r0 = returnFunc(to, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_SendPID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendPID'
type Process_SendPID_Call struct {
	*mock.Call
}

// SendPID is a helper method to define mock.On call
//   - to
//   - message
func (_e *Process_Expecter) SendPID(to interface{}, message interface{}) *Process_SendPID_Call {
	return &Process_SendPID_Call{Call: _e.mock.On("SendPID", to, message)}
}

func (_c *Process_SendPID_Call) Run(run func(to gen.PID, message any)) *Process_SendPID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(any))
	})
	return _c
}

func (_c *Process_SendPID_Call) Return(err error) *Process_SendPID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_SendPID_Call) RunAndReturn(run func(to gen.PID, message any) error) *Process_SendPID_Call {
	_c.Call.Return(run)
	return _c
}

// SendPriority provides a mock function for the type Process
func (_mock *Process) SendPriority() gen.MessagePriority {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for SendPriority")
	}

	var r0 gen.MessagePriority
	if returnFunc, ok := ret.Get(0).(func() gen.MessagePriority); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.MessagePriority)
	}
	return r0
}

// Process_SendPriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendPriority'
type Process_SendPriority_Call struct {
	*mock.Call
}

// SendPriority is a helper method to define mock.On call
func (_e *Process_Expecter) SendPriority() *Process_SendPriority_Call {
	return &Process_SendPriority_Call{Call: _e.mock.On("SendPriority")}
}

func (_c *Process_SendPriority_Call) Run(run func()) *Process_SendPriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_SendPriority_Call) Return(messagePriority gen.MessagePriority) *Process_SendPriority_Call {
	_c.Call.Return(messagePriority)
	return _c
}

func (_c *Process_SendPriority_Call) RunAndReturn(run func() gen.MessagePriority) *Process_SendPriority_Call {
	_c.Call.Return(run)
	return _c
}

// SendProcessID provides a mock function for the type Process
func (_mock *Process) SendProcessID(to gen.ProcessID, message any) error {
	ret := _mock.Called(to, message)

	if len(ret) == 0 {
		panic("no return value specified for SendProcessID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.ProcessID, any) error); ok {
		r0 = returnFunc(to, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_SendProcessID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendProcessID'
type Process_SendProcessID_Call struct {
	*mock.Call
}

// SendProcessID is a helper method to define mock.On call
//   - to
//   - message
func (_e *Process_Expecter) SendProcessID(to interface{}, message interface{}) *Process_SendProcessID_Call {
	return &Process_SendProcessID_Call{Call: _e.mock.On("SendProcessID", to, message)}
}

func (_c *Process_SendProcessID_Call) Run(run func(to gen.ProcessID, message any)) *Process_SendProcessID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.ProcessID), args[1].(any))
	})
	return _c
}

func (_c *Process_SendProcessID_Call) Return(err error) *Process_SendProcessID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_SendProcessID_Call) RunAndReturn(run func(to gen.ProcessID, message any) error) *Process_SendProcessID_Call {
	_c.Call.Return(run)
	return _c
}

// SendResponse provides a mock function for the type Process
func (_mock *Process) SendResponse(to gen.PID, ref gen.Ref, message any) error {
	ret := _mock.Called(to, ref, message)

	if len(ret) == 0 {
		panic("no return value specified for SendResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Ref, any) error); ok {
		r0 = returnFunc(to, ref, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_SendResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendResponse'
type Process_SendResponse_Call struct {
	*mock.Call
}

// SendResponse is a helper method to define mock.On call
//   - to
//   - ref
//   - message
func (_e *Process_Expecter) SendResponse(to interface{}, ref interface{}, message interface{}) *Process_SendResponse_Call {
	return &Process_SendResponse_Call{Call: _e.mock.On("SendResponse", to, ref, message)}
}

func (_c *Process_SendResponse_Call) Run(run func(to gen.PID, ref gen.Ref, message any)) *Process_SendResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.Ref), args[2].(any))
	})
	return _c
}

func (_c *Process_SendResponse_Call) Return(err error) *Process_SendResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_SendResponse_Call) RunAndReturn(run func(to gen.PID, ref gen.Ref, message any) error) *Process_SendResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SendResponseError provides a mock function for the type Process
func (_mock *Process) SendResponseError(to gen.PID, ref gen.Ref, err error) error {
	ret := _mock.Called(to, ref, err)

	if len(ret) == 0 {
		panic("no return value specified for SendResponseError")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Ref, error) error); ok {
		r0 = returnFunc(to, ref, err)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_SendResponseError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendResponseError'
type Process_SendResponseError_Call struct {
	*mock.Call
}

// SendResponseError is a helper method to define mock.On call
//   - to
//   - ref
//   - err
func (_e *Process_Expecter) SendResponseError(to interface{}, ref interface{}, err interface{}) *Process_SendResponseError_Call {
	return &Process_SendResponseError_Call{Call: _e.mock.On("SendResponseError", to, ref, err)}
}

func (_c *Process_SendResponseError_Call) Run(run func(to gen.PID, ref gen.Ref, err error)) *Process_SendResponseError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.Ref), args[2].(error))
	})
	return _c
}

func (_c *Process_SendResponseError_Call) Return(err1 error) *Process_SendResponseError_Call {
	_c.Call.Return(err1)
	return _c
}

func (_c *Process_SendResponseError_Call) RunAndReturn(run func(to gen.PID, ref gen.Ref, err error) error) *Process_SendResponseError_Call {
	_c.Call.Return(run)
	return _c
}

// SendWithPriority provides a mock function for the type Process
func (_mock *Process) SendWithPriority(to any, message any, priority gen.MessagePriority) error {
	ret := _mock.Called(to, message, priority)

	if len(ret) == 0 {
		panic("no return value specified for SendWithPriority")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any, any, gen.MessagePriority) error); ok {
		r0 = returnFunc(to, message, priority)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_SendWithPriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendWithPriority'
type Process_SendWithPriority_Call struct {
	*mock.Call
}

// SendWithPriority is a helper method to define mock.On call
//   - to
//   - message
//   - priority
func (_e *Process_Expecter) SendWithPriority(to interface{}, message interface{}, priority interface{}) *Process_SendWithPriority_Call {
	return &Process_SendWithPriority_Call{Call: _e.mock.On("SendWithPriority", to, message, priority)}
}

func (_c *Process_SendWithPriority_Call) Run(run func(to any, message any, priority gen.MessagePriority)) *Process_SendWithPriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any), args[1].(any), args[2].(gen.MessagePriority))
	})
	return _c
}

func (_c *Process_SendWithPriority_Call) Return(err error) *Process_SendWithPriority_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_SendWithPriority_Call) RunAndReturn(run func(to any, message any, priority gen.MessagePriority) error) *Process_SendWithPriority_Call {
	_c.Call.Return(run)
	return _c
}

// SetCompression provides a mock function for the type Process
func (_mock *Process) SetCompression(enabled bool) error {
	ret := _mock.Called(enabled)

	if len(ret) == 0 {
		panic("no return value specified for SetCompression")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(bool) error); ok {
		r0 = returnFunc(enabled)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_SetCompression_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCompression'
type Process_SetCompression_Call struct {
	*mock.Call
}

// SetCompression is a helper method to define mock.On call
//   - enabled
func (_e *Process_Expecter) SetCompression(enabled interface{}) *Process_SetCompression_Call {
	return &Process_SetCompression_Call{Call: _e.mock.On("SetCompression", enabled)}
}

func (_c *Process_SetCompression_Call) Run(run func(enabled bool)) *Process_SetCompression_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *Process_SetCompression_Call) Return(err error) *Process_SetCompression_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_SetCompression_Call) RunAndReturn(run func(enabled bool) error) *Process_SetCompression_Call {
	_c.Call.Return(run)
	return _c
}

// SetCompressionLevel provides a mock function for the type Process
func (_mock *Process) SetCompressionLevel(level gen.CompressionLevel) error {
	ret := _mock.Called(level)

	if len(ret) == 0 {
		panic("no return value specified for SetCompressionLevel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.CompressionLevel) error); ok {
		r0 = returnFunc(level)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_SetCompressionLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCompressionLevel'
type Process_SetCompressionLevel_Call struct {
	*mock.Call
}

// SetCompressionLevel is a helper method to define mock.On call
//   - level
func (_e *Process_Expecter) SetCompressionLevel(level interface{}) *Process_SetCompressionLevel_Call {
	return &Process_SetCompressionLevel_Call{Call: _e.mock.On("SetCompressionLevel", level)}
}

func (_c *Process_SetCompressionLevel_Call) Run(run func(level gen.CompressionLevel)) *Process_SetCompressionLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.CompressionLevel))
	})
	return _c
}

func (_c *Process_SetCompressionLevel_Call) Return(err error) *Process_SetCompressionLevel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_SetCompressionLevel_Call) RunAndReturn(run func(level gen.CompressionLevel) error) *Process_SetCompressionLevel_Call {
	_c.Call.Return(run)
	return _c
}

// SetCompressionThreshold provides a mock function for the type Process
func (_mock *Process) SetCompressionThreshold(threshold int) error {
	ret := _mock.Called(threshold)

	if len(ret) == 0 {
		panic("no return value specified for SetCompressionThreshold")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(threshold)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_SetCompressionThreshold_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCompressionThreshold'
type Process_SetCompressionThreshold_Call struct {
	*mock.Call
}

// SetCompressionThreshold is a helper method to define mock.On call
//   - threshold
func (_e *Process_Expecter) SetCompressionThreshold(threshold interface{}) *Process_SetCompressionThreshold_Call {
	return &Process_SetCompressionThreshold_Call{Call: _e.mock.On("SetCompressionThreshold", threshold)}
}

func (_c *Process_SetCompressionThreshold_Call) Run(run func(threshold int)) *Process_SetCompressionThreshold_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Process_SetCompressionThreshold_Call) Return(err error) *Process_SetCompressionThreshold_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_SetCompressionThreshold_Call) RunAndReturn(run func(threshold int) error) *Process_SetCompressionThreshold_Call {
	_c.Call.Return(run)
	return _c
}

// SetCompressionType provides a mock function for the type Process
func (_mock *Process) SetCompressionType(ctype gen.CompressionType) error {
	ret := _mock.Called(ctype)

	if len(ret) == 0 {
		panic("no return value specified for SetCompressionType")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.CompressionType) error); ok {
		r0 = returnFunc(ctype)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_SetCompressionType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCompressionType'
type Process_SetCompressionType_Call struct {
	*mock.Call
}

// SetCompressionType is a helper method to define mock.On call
//   - ctype
func (_e *Process_Expecter) SetCompressionType(ctype interface{}) *Process_SetCompressionType_Call {
	return &Process_SetCompressionType_Call{Call: _e.mock.On("SetCompressionType", ctype)}
}

func (_c *Process_SetCompressionType_Call) Run(run func(ctype gen.CompressionType)) *Process_SetCompressionType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.CompressionType))
	})
	return _c
}

func (_c *Process_SetCompressionType_Call) Return(err error) *Process_SetCompressionType_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_SetCompressionType_Call) RunAndReturn(run func(ctype gen.CompressionType) error) *Process_SetCompressionType_Call {
	_c.Call.Return(run)
	return _c
}

// SetEnv provides a mock function for the type Process
func (_mock *Process) SetEnv(name gen.Env, value any) {
	_mock.Called(name, value)
	return
}

// Process_SetEnv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEnv'
type Process_SetEnv_Call struct {
	*mock.Call
}

// SetEnv is a helper method to define mock.On call
//   - name
//   - value
func (_e *Process_Expecter) SetEnv(name interface{}, value interface{}) *Process_SetEnv_Call {
	return &Process_SetEnv_Call{Call: _e.mock.On("SetEnv", name, value)}
}

func (_c *Process_SetEnv_Call) Run(run func(name gen.Env, value any)) *Process_SetEnv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Env), args[1].(any))
	})
	return _c
}

func (_c *Process_SetEnv_Call) Return() *Process_SetEnv_Call {
	_c.Call.Return()
	return _c
}

func (_c *Process_SetEnv_Call) RunAndReturn(run func(name gen.Env, value any)) *Process_SetEnv_Call {
	_c.Run(run)
	return _c
}

// SetImportantDelivery provides a mock function for the type Process
func (_mock *Process) SetImportantDelivery(important bool) error {
	ret := _mock.Called(important)

	if len(ret) == 0 {
		panic("no return value specified for SetImportantDelivery")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(bool) error); ok {
		r0 = returnFunc(important)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_SetImportantDelivery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetImportantDelivery'
type Process_SetImportantDelivery_Call struct {
	*mock.Call
}

// SetImportantDelivery is a helper method to define mock.On call
//   - important
func (_e *Process_Expecter) SetImportantDelivery(important interface{}) *Process_SetImportantDelivery_Call {
	return &Process_SetImportantDelivery_Call{Call: _e.mock.On("SetImportantDelivery", important)}
}

func (_c *Process_SetImportantDelivery_Call) Run(run func(important bool)) *Process_SetImportantDelivery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *Process_SetImportantDelivery_Call) Return(err error) *Process_SetImportantDelivery_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_SetImportantDelivery_Call) RunAndReturn(run func(important bool) error) *Process_SetImportantDelivery_Call {
	_c.Call.Return(run)
	return _c
}

// SetKeepNetworkOrder provides a mock function for the type Process
func (_mock *Process) SetKeepNetworkOrder(order bool) error {
	ret := _mock.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for SetKeepNetworkOrder")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(bool) error); ok {
		r0 = returnFunc(order)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_SetKeepNetworkOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetKeepNetworkOrder'
type Process_SetKeepNetworkOrder_Call struct {
	*mock.Call
}

// SetKeepNetworkOrder is a helper method to define mock.On call
//   - order
func (_e *Process_Expecter) SetKeepNetworkOrder(order interface{}) *Process_SetKeepNetworkOrder_Call {
	return &Process_SetKeepNetworkOrder_Call{Call: _e.mock.On("SetKeepNetworkOrder", order)}
}

func (_c *Process_SetKeepNetworkOrder_Call) Run(run func(order bool)) *Process_SetKeepNetworkOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *Process_SetKeepNetworkOrder_Call) Return(err error) *Process_SetKeepNetworkOrder_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_SetKeepNetworkOrder_Call) RunAndReturn(run func(order bool) error) *Process_SetKeepNetworkOrder_Call {
	_c.Call.Return(run)
	return _c
}

// SetSendPriority provides a mock function for the type Process
func (_mock *Process) SetSendPriority(priority gen.MessagePriority) error {
	ret := _mock.Called(priority)

	if len(ret) == 0 {
		panic("no return value specified for SetSendPriority")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.MessagePriority) error); ok {
		r0 = returnFunc(priority)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_SetSendPriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSendPriority'
type Process_SetSendPriority_Call struct {
	*mock.Call
}

// SetSendPriority is a helper method to define mock.On call
//   - priority
func (_e *Process_Expecter) SetSendPriority(priority interface{}) *Process_SetSendPriority_Call {
	return &Process_SetSendPriority_Call{Call: _e.mock.On("SetSendPriority", priority)}
}

func (_c *Process_SetSendPriority_Call) Run(run func(priority gen.MessagePriority)) *Process_SetSendPriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.MessagePriority))
	})
	return _c
}

func (_c *Process_SetSendPriority_Call) Return(err error) *Process_SetSendPriority_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_SetSendPriority_Call) RunAndReturn(run func(priority gen.MessagePriority) error) *Process_SetSendPriority_Call {
	_c.Call.Return(run)
	return _c
}

// Spawn provides a mock function for the type Process
func (_mock *Process) Spawn(factory gen.ProcessFactory, options gen.ProcessOptions, args ...any) (gen.PID, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(factory, options, args)
	} else {
		tmpRet = _mock.Called(factory, options)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Spawn")
	}

	var r0 gen.PID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.ProcessFactory, gen.ProcessOptions, ...any) (gen.PID, error)); ok {
		return returnFunc(factory, options, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.ProcessFactory, gen.ProcessOptions, ...any) gen.PID); ok {
		r0 = returnFunc(factory, options, args...)
	} else {
		r0 = ret.Get(0).(gen.PID)
	}
	if returnFunc, ok := ret.Get(1).(func(gen.ProcessFactory, gen.ProcessOptions, ...any) error); ok {
		r1 = returnFunc(factory, options, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Process_Spawn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Spawn'
type Process_Spawn_Call struct {
	*mock.Call
}

// Spawn is a helper method to define mock.On call
//   - factory
//   - options
//   - args
func (_e *Process_Expecter) Spawn(factory interface{}, options interface{}, args ...interface{}) *Process_Spawn_Call {
	return &Process_Spawn_Call{Call: _e.mock.On("Spawn",
		append([]interface{}{factory, options}, args...)...)}
}

func (_c *Process_Spawn_Call) Run(run func(factory gen.ProcessFactory, options gen.ProcessOptions, args ...any)) *Process_Spawn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]any)
		run(args[0].(gen.ProcessFactory), args[1].(gen.ProcessOptions), variadicArgs...)
	})
	return _c
}

func (_c *Process_Spawn_Call) Return(pID gen.PID, err error) *Process_Spawn_Call {
	_c.Call.Return(pID, err)
	return _c
}

func (_c *Process_Spawn_Call) RunAndReturn(run func(factory gen.ProcessFactory, options gen.ProcessOptions, args ...any) (gen.PID, error)) *Process_Spawn_Call {
	_c.Call.Return(run)
	return _c
}

// SpawnMeta provides a mock function for the type Process
func (_mock *Process) SpawnMeta(behavior gen.MetaBehavior, options gen.MetaOptions) (gen.Alias, error) {
	ret := _mock.Called(behavior, options)

	if len(ret) == 0 {
		panic("no return value specified for SpawnMeta")
	}

	var r0 gen.Alias
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.MetaBehavior, gen.MetaOptions) (gen.Alias, error)); ok {
		return returnFunc(behavior, options)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.MetaBehavior, gen.MetaOptions) gen.Alias); ok {
		r0 = returnFunc(behavior, options)
	} else {
		r0 = ret.Get(0).(gen.Alias)
	}
	if returnFunc, ok := ret.Get(1).(func(gen.MetaBehavior, gen.MetaOptions) error); ok {
		r1 = returnFunc(behavior, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Process_SpawnMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SpawnMeta'
type Process_SpawnMeta_Call struct {
	*mock.Call
}

// SpawnMeta is a helper method to define mock.On call
//   - behavior
//   - options
func (_e *Process_Expecter) SpawnMeta(behavior interface{}, options interface{}) *Process_SpawnMeta_Call {
	return &Process_SpawnMeta_Call{Call: _e.mock.On("SpawnMeta", behavior, options)}
}

func (_c *Process_SpawnMeta_Call) Run(run func(behavior gen.MetaBehavior, options gen.MetaOptions)) *Process_SpawnMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.MetaBehavior), args[1].(gen.MetaOptions))
	})
	return _c
}

func (_c *Process_SpawnMeta_Call) Return(alias gen.Alias, err error) *Process_SpawnMeta_Call {
	_c.Call.Return(alias, err)
	return _c
}

func (_c *Process_SpawnMeta_Call) RunAndReturn(run func(behavior gen.MetaBehavior, options gen.MetaOptions) (gen.Alias, error)) *Process_SpawnMeta_Call {
	_c.Call.Return(run)
	return _c
}

// SpawnRegister provides a mock function for the type Process
func (_mock *Process) SpawnRegister(register gen.Atom, factory gen.ProcessFactory, options gen.ProcessOptions, args ...any) (gen.PID, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(register, factory, options, args)
	} else {
		tmpRet = _mock.Called(register, factory, options)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for SpawnRegister")
	}

	var r0 gen.PID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.ProcessFactory, gen.ProcessOptions, ...any) (gen.PID, error)); ok {
		return returnFunc(register, factory, options, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.ProcessFactory, gen.ProcessOptions, ...any) gen.PID); ok {
		r0 = returnFunc(register, factory, options, args...)
	} else {
		r0 = ret.Get(0).(gen.PID)
	}
	if returnFunc, ok := ret.Get(1).(func(gen.Atom, gen.ProcessFactory, gen.ProcessOptions, ...any) error); ok {
		r1 = returnFunc(register, factory, options, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Process_SpawnRegister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SpawnRegister'
type Process_SpawnRegister_Call struct {
	*mock.Call
}

// SpawnRegister is a helper method to define mock.On call
//   - register
//   - factory
//   - options
//   - args
func (_e *Process_Expecter) SpawnRegister(register interface{}, factory interface{}, options interface{}, args ...interface{}) *Process_SpawnRegister_Call {
	return &Process_SpawnRegister_Call{Call: _e.mock.On("SpawnRegister",
		append([]interface{}{register, factory, options}, args...)...)}
}

func (_c *Process_SpawnRegister_Call) Run(run func(register gen.Atom, factory gen.ProcessFactory, options gen.ProcessOptions, args ...any)) *Process_SpawnRegister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]any)
		run(args[0].(gen.Atom), args[1].(gen.ProcessFactory), args[2].(gen.ProcessOptions), variadicArgs...)
	})
	return _c
}

func (_c *Process_SpawnRegister_Call) Return(pID gen.PID, err error) *Process_SpawnRegister_Call {
	_c.Call.Return(pID, err)
	return _c
}

func (_c *Process_SpawnRegister_Call) RunAndReturn(run func(register gen.Atom, factory gen.ProcessFactory, options gen.ProcessOptions, args ...any) (gen.PID, error)) *Process_SpawnRegister_Call {
	_c.Call.Return(run)
	return _c
}

// State provides a mock function for the type Process
func (_mock *Process) State() gen.ProcessState {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for State")
	}

	var r0 gen.ProcessState
	if returnFunc, ok := ret.Get(0).(func() gen.ProcessState); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.ProcessState)
	}
	return r0
}

// Process_State_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'State'
type Process_State_Call struct {
	*mock.Call
}

// State is a helper method to define mock.On call
func (_e *Process_Expecter) State() *Process_State_Call {
	return &Process_State_Call{Call: _e.mock.On("State")}
}

func (_c *Process_State_Call) Run(run func()) *Process_State_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_State_Call) Return(processState gen.ProcessState) *Process_State_Call {
	_c.Call.Return(processState)
	return _c
}

func (_c *Process_State_Call) RunAndReturn(run func() gen.ProcessState) *Process_State_Call {
	_c.Call.Return(run)
	return _c
}

// Unlink provides a mock function for the type Process
func (_mock *Process) Unlink(target any) error {
	ret := _mock.Called(target)

	if len(ret) == 0 {
		panic("no return value specified for Unlink")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_Unlink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unlink'
type Process_Unlink_Call struct {
	*mock.Call
}

// Unlink is a helper method to define mock.On call
//   - target
func (_e *Process_Expecter) Unlink(target interface{}) *Process_Unlink_Call {
	return &Process_Unlink_Call{Call: _e.mock.On("Unlink", target)}
}

func (_c *Process_Unlink_Call) Run(run func(target any)) *Process_Unlink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any))
	})
	return _c
}

func (_c *Process_Unlink_Call) Return(err error) *Process_Unlink_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_Unlink_Call) RunAndReturn(run func(target any) error) *Process_Unlink_Call {
	_c.Call.Return(run)
	return _c
}

// UnlinkAlias provides a mock function for the type Process
func (_mock *Process) UnlinkAlias(target gen.Alias) error {
	ret := _mock.Called(target)

	if len(ret) == 0 {
		panic("no return value specified for UnlinkAlias")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Alias) error); ok {
		r0 = returnFunc(target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_UnlinkAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnlinkAlias'
type Process_UnlinkAlias_Call struct {
	*mock.Call
}

// UnlinkAlias is a helper method to define mock.On call
//   - target
func (_e *Process_Expecter) UnlinkAlias(target interface{}) *Process_UnlinkAlias_Call {
	return &Process_UnlinkAlias_Call{Call: _e.mock.On("UnlinkAlias", target)}
}

func (_c *Process_UnlinkAlias_Call) Run(run func(target gen.Alias)) *Process_UnlinkAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Alias))
	})
	return _c
}

func (_c *Process_UnlinkAlias_Call) Return(err error) *Process_UnlinkAlias_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_UnlinkAlias_Call) RunAndReturn(run func(target gen.Alias) error) *Process_UnlinkAlias_Call {
	_c.Call.Return(run)
	return _c
}

// UnlinkEvent provides a mock function for the type Process
func (_mock *Process) UnlinkEvent(target gen.Event) error {
	ret := _mock.Called(target)

	if len(ret) == 0 {
		panic("no return value specified for UnlinkEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Event) error); ok {
		r0 = returnFunc(target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_UnlinkEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnlinkEvent'
type Process_UnlinkEvent_Call struct {
	*mock.Call
}

// UnlinkEvent is a helper method to define mock.On call
//   - target
func (_e *Process_Expecter) UnlinkEvent(target interface{}) *Process_UnlinkEvent_Call {
	return &Process_UnlinkEvent_Call{Call: _e.mock.On("UnlinkEvent", target)}
}

func (_c *Process_UnlinkEvent_Call) Run(run func(target gen.Event)) *Process_UnlinkEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Event))
	})
	return _c
}

func (_c *Process_UnlinkEvent_Call) Return(err error) *Process_UnlinkEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_UnlinkEvent_Call) RunAndReturn(run func(target gen.Event) error) *Process_UnlinkEvent_Call {
	_c.Call.Return(run)
	return _c
}

// UnlinkNode provides a mock function for the type Process
func (_mock *Process) UnlinkNode(target gen.Atom) error {
	ret := _mock.Called(target)

	if len(ret) == 0 {
		panic("no return value specified for UnlinkNode")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom) error); ok {
		r0 = returnFunc(target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_UnlinkNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnlinkNode'
type Process_UnlinkNode_Call struct {
	*mock.Call
}

// UnlinkNode is a helper method to define mock.On call
//   - target
func (_e *Process_Expecter) UnlinkNode(target interface{}) *Process_UnlinkNode_Call {
	return &Process_UnlinkNode_Call{Call: _e.mock.On("UnlinkNode", target)}
}

func (_c *Process_UnlinkNode_Call) Run(run func(target gen.Atom)) *Process_UnlinkNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Atom))
	})
	return _c
}

func (_c *Process_UnlinkNode_Call) Return(err error) *Process_UnlinkNode_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_UnlinkNode_Call) RunAndReturn(run func(target gen.Atom) error) *Process_UnlinkNode_Call {
	_c.Call.Return(run)
	return _c
}

// UnlinkPID provides a mock function for the type Process
func (_mock *Process) UnlinkPID(target gen.PID) error {
	ret := _mock.Called(target)

	if len(ret) == 0 {
		panic("no return value specified for UnlinkPID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID) error); ok {
		r0 = returnFunc(target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_UnlinkPID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnlinkPID'
type Process_UnlinkPID_Call struct {
	*mock.Call
}

// UnlinkPID is a helper method to define mock.On call
//   - target
func (_e *Process_Expecter) UnlinkPID(target interface{}) *Process_UnlinkPID_Call {
	return &Process_UnlinkPID_Call{Call: _e.mock.On("UnlinkPID", target)}
}

func (_c *Process_UnlinkPID_Call) Run(run func(target gen.PID)) *Process_UnlinkPID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID))
	})
	return _c
}

func (_c *Process_UnlinkPID_Call) Return(err error) *Process_UnlinkPID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_UnlinkPID_Call) RunAndReturn(run func(target gen.PID) error) *Process_UnlinkPID_Call {
	_c.Call.Return(run)
	return _c
}

// UnlinkProcessID provides a mock function for the type Process
func (_mock *Process) UnlinkProcessID(target gen.ProcessID) error {
	ret := _mock.Called(target)

	if len(ret) == 0 {
		panic("no return value specified for UnlinkProcessID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.ProcessID) error); ok {
		r0 = returnFunc(target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_UnlinkProcessID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnlinkProcessID'
type Process_UnlinkProcessID_Call struct {
	*mock.Call
}

// UnlinkProcessID is a helper method to define mock.On call
//   - target
func (_e *Process_Expecter) UnlinkProcessID(target interface{}) *Process_UnlinkProcessID_Call {
	return &Process_UnlinkProcessID_Call{Call: _e.mock.On("UnlinkProcessID", target)}
}

func (_c *Process_UnlinkProcessID_Call) Run(run func(target gen.ProcessID)) *Process_UnlinkProcessID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.ProcessID))
	})
	return _c
}

func (_c *Process_UnlinkProcessID_Call) Return(err error) *Process_UnlinkProcessID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_UnlinkProcessID_Call) RunAndReturn(run func(target gen.ProcessID) error) *Process_UnlinkProcessID_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterEvent provides a mock function for the type Process
func (_mock *Process) UnregisterEvent(name gen.Atom) error {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom) error); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_UnregisterEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterEvent'
type Process_UnregisterEvent_Call struct {
	*mock.Call
}

// UnregisterEvent is a helper method to define mock.On call
//   - name
func (_e *Process_Expecter) UnregisterEvent(name interface{}) *Process_UnregisterEvent_Call {
	return &Process_UnregisterEvent_Call{Call: _e.mock.On("UnregisterEvent", name)}
}

func (_c *Process_UnregisterEvent_Call) Run(run func(name gen.Atom)) *Process_UnregisterEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Atom))
	})
	return _c
}

func (_c *Process_UnregisterEvent_Call) Return(err error) *Process_UnregisterEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_UnregisterEvent_Call) RunAndReturn(run func(name gen.Atom) error) *Process_UnregisterEvent_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterName provides a mock function for the type Process
func (_mock *Process) UnregisterName() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for UnregisterName")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Process_UnregisterName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterName'
type Process_UnregisterName_Call struct {
	*mock.Call
}

// UnregisterName is a helper method to define mock.On call
func (_e *Process_Expecter) UnregisterName() *Process_UnregisterName_Call {
	return &Process_UnregisterName_Call{Call: _e.mock.On("UnregisterName")}
}

func (_c *Process_UnregisterName_Call) Run(run func()) *Process_UnregisterName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_UnregisterName_Call) Return(err error) *Process_UnregisterName_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Process_UnregisterName_Call) RunAndReturn(run func() error) *Process_UnregisterName_Call {
	_c.Call.Return(run)
	return _c
}

// Uptime provides a mock function for the type Process
func (_mock *Process) Uptime() int64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Uptime")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func() int64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// Process_Uptime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Uptime'
type Process_Uptime_Call struct {
	*mock.Call
}

// Uptime is a helper method to define mock.On call
func (_e *Process_Expecter) Uptime() *Process_Uptime_Call {
	return &Process_Uptime_Call{Call: _e.mock.On("Uptime")}
}

func (_c *Process_Uptime_Call) Run(run func()) *Process_Uptime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Process_Uptime_Call) Return(n int64) *Process_Uptime_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *Process_Uptime_Call) RunAndReturn(run func() int64) *Process_Uptime_Call {
	_c.Call.Return(run)
	return _c
}
