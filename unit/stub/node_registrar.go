// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package stub

import (
	"ergo.services/ergo/gen"
	mock "github.com/stretchr/testify/mock"
)

// NewNodeRegistrar creates a new instance of NodeRegistrar. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeRegistrar(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeRegistrar {
	mock := &NodeRegistrar{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// NodeRegistrar is an autogenerated mock type for the NodeRegistrar type
type NodeRegistrar struct {
	mock.Mock
}

type NodeRegistrar_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeRegistrar) EXPECT() *NodeRegistrar_Expecter {
	return &NodeRegistrar_Expecter{mock: &_m.Mock}
}

// Creation provides a mock function for the type NodeRegistrar
func (_mock *NodeRegistrar) Creation() int64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Creation")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func() int64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// NodeRegistrar_Creation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Creation'
type NodeRegistrar_Creation_Call struct {
	*mock.Call
}

// Creation is a helper method to define mock.On call
func (_e *NodeRegistrar_Expecter) Creation() *NodeRegistrar_Creation_Call {
	return &NodeRegistrar_Creation_Call{Call: _e.mock.On("Creation")}
}

func (_c *NodeRegistrar_Creation_Call) Run(run func()) *NodeRegistrar_Creation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeRegistrar_Creation_Call) Return(n int64) *NodeRegistrar_Creation_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *NodeRegistrar_Creation_Call) RunAndReturn(run func() int64) *NodeRegistrar_Creation_Call {
	_c.Call.Return(run)
	return _c
}

// Log provides a mock function for the type NodeRegistrar
func (_mock *NodeRegistrar) Log() gen.Log {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 gen.Log
	if returnFunc, ok := ret.Get(0).(func() gen.Log); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gen.Log)
		}
	}
	return r0
}

// NodeRegistrar_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type NodeRegistrar_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
func (_e *NodeRegistrar_Expecter) Log() *NodeRegistrar_Log_Call {
	return &NodeRegistrar_Log_Call{Call: _e.mock.On("Log")}
}

func (_c *NodeRegistrar_Log_Call) Run(run func()) *NodeRegistrar_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeRegistrar_Log_Call) Return(log gen.Log) *NodeRegistrar_Log_Call {
	_c.Call.Return(log)
	return _c
}

func (_c *NodeRegistrar_Log_Call) RunAndReturn(run func() gen.Log) *NodeRegistrar_Log_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type NodeRegistrar
func (_mock *NodeRegistrar) Name() gen.Atom {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 gen.Atom
	if returnFunc, ok := ret.Get(0).(func() gen.Atom); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.Atom)
	}
	return r0
}

// NodeRegistrar_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type NodeRegistrar_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *NodeRegistrar_Expecter) Name() *NodeRegistrar_Name_Call {
	return &NodeRegistrar_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *NodeRegistrar_Name_Call) Run(run func()) *NodeRegistrar_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeRegistrar_Name_Call) Return(atom gen.Atom) *NodeRegistrar_Name_Call {
	_c.Call.Return(atom)
	return _c
}

func (_c *NodeRegistrar_Name_Call) RunAndReturn(run func() gen.Atom) *NodeRegistrar_Name_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterEvent provides a mock function for the type NodeRegistrar
func (_mock *NodeRegistrar) RegisterEvent(name gen.Atom, options gen.EventOptions) (gen.Ref, error) {
	ret := _mock.Called(name, options)

	if len(ret) == 0 {
		panic("no return value specified for RegisterEvent")
	}

	var r0 gen.Ref
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.EventOptions) (gen.Ref, error)); ok {
		return returnFunc(name, options)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.EventOptions) gen.Ref); ok {
		r0 = returnFunc(name, options)
	} else {
		r0 = ret.Get(0).(gen.Ref)
	}
	if returnFunc, ok := ret.Get(1).(func(gen.Atom, gen.EventOptions) error); ok {
		r1 = returnFunc(name, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// NodeRegistrar_RegisterEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterEvent'
type NodeRegistrar_RegisterEvent_Call struct {
	*mock.Call
}

// RegisterEvent is a helper method to define mock.On call
//   - name
//   - options
func (_e *NodeRegistrar_Expecter) RegisterEvent(name interface{}, options interface{}) *NodeRegistrar_RegisterEvent_Call {
	return &NodeRegistrar_RegisterEvent_Call{Call: _e.mock.On("RegisterEvent", name, options)}
}

func (_c *NodeRegistrar_RegisterEvent_Call) Run(run func(name gen.Atom, options gen.EventOptions)) *NodeRegistrar_RegisterEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Atom), args[1].(gen.EventOptions))
	})
	return _c
}

func (_c *NodeRegistrar_RegisterEvent_Call) Return(ref gen.Ref, err error) *NodeRegistrar_RegisterEvent_Call {
	_c.Call.Return(ref, err)
	return _c
}

func (_c *NodeRegistrar_RegisterEvent_Call) RunAndReturn(run func(name gen.Atom, options gen.EventOptions) (gen.Ref, error)) *NodeRegistrar_RegisterEvent_Call {
	_c.Call.Return(run)
	return _c
}

// SendEvent provides a mock function for the type NodeRegistrar
func (_mock *NodeRegistrar) SendEvent(name gen.Atom, token gen.Ref, options gen.MessageOptions, message any) error {
	ret := _mock.Called(name, token, options, message)

	if len(ret) == 0 {
		panic("no return value specified for SendEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.Ref, gen.MessageOptions, any) error); ok {
		r0 = returnFunc(name, token, options, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// NodeRegistrar_SendEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEvent'
type NodeRegistrar_SendEvent_Call struct {
	*mock.Call
}

// SendEvent is a helper method to define mock.On call
//   - name
//   - token
//   - options
//   - message
func (_e *NodeRegistrar_Expecter) SendEvent(name interface{}, token interface{}, options interface{}, message interface{}) *NodeRegistrar_SendEvent_Call {
	return &NodeRegistrar_SendEvent_Call{Call: _e.mock.On("SendEvent", name, token, options, message)}
}

func (_c *NodeRegistrar_SendEvent_Call) Run(run func(name gen.Atom, token gen.Ref, options gen.MessageOptions, message any)) *NodeRegistrar_SendEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Atom), args[1].(gen.Ref), args[2].(gen.MessageOptions), args[3].(any))
	})
	return _c
}

func (_c *NodeRegistrar_SendEvent_Call) Return(err error) *NodeRegistrar_SendEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *NodeRegistrar_SendEvent_Call) RunAndReturn(run func(name gen.Atom, token gen.Ref, options gen.MessageOptions, message any) error) *NodeRegistrar_SendEvent_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type NodeRegistrar
func (_mock *NodeRegistrar) Stop() {
	_mock.Called()
	return
}

// NodeRegistrar_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type NodeRegistrar_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *NodeRegistrar_Expecter) Stop() *NodeRegistrar_Stop_Call {
	return &NodeRegistrar_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *NodeRegistrar_Stop_Call) Run(run func()) *NodeRegistrar_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeRegistrar_Stop_Call) Return() *NodeRegistrar_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *NodeRegistrar_Stop_Call) RunAndReturn(run func()) *NodeRegistrar_Stop_Call {
	_c.Run(run)
	return _c
}

// StopForce provides a mock function for the type NodeRegistrar
func (_mock *NodeRegistrar) StopForce() {
	_mock.Called()
	return
}

// NodeRegistrar_StopForce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopForce'
type NodeRegistrar_StopForce_Call struct {
	*mock.Call
}

// StopForce is a helper method to define mock.On call
func (_e *NodeRegistrar_Expecter) StopForce() *NodeRegistrar_StopForce_Call {
	return &NodeRegistrar_StopForce_Call{Call: _e.mock.On("StopForce")}
}

func (_c *NodeRegistrar_StopForce_Call) Run(run func()) *NodeRegistrar_StopForce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeRegistrar_StopForce_Call) Return() *NodeRegistrar_StopForce_Call {
	_c.Call.Return()
	return _c
}

func (_c *NodeRegistrar_StopForce_Call) RunAndReturn(run func()) *NodeRegistrar_StopForce_Call {
	_c.Run(run)
	return _c
}

// UnregisterEvent provides a mock function for the type NodeRegistrar
func (_mock *NodeRegistrar) UnregisterEvent(name gen.Atom) error {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom) error); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// NodeRegistrar_UnregisterEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterEvent'
type NodeRegistrar_UnregisterEvent_Call struct {
	*mock.Call
}

// UnregisterEvent is a helper method to define mock.On call
//   - name
func (_e *NodeRegistrar_Expecter) UnregisterEvent(name interface{}) *NodeRegistrar_UnregisterEvent_Call {
	return &NodeRegistrar_UnregisterEvent_Call{Call: _e.mock.On("UnregisterEvent", name)}
}

func (_c *NodeRegistrar_UnregisterEvent_Call) Run(run func(name gen.Atom)) *NodeRegistrar_UnregisterEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Atom))
	})
	return _c
}

func (_c *NodeRegistrar_UnregisterEvent_Call) Return(err error) *NodeRegistrar_UnregisterEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *NodeRegistrar_UnregisterEvent_Call) RunAndReturn(run func(name gen.Atom) error) *NodeRegistrar_UnregisterEvent_Call {
	_c.Call.Return(run)
	return _c
}
