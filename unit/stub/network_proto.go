// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package stub

import (
	"ergo.services/ergo/gen"
	mock "github.com/stretchr/testify/mock"
)

// NewNetworkProto creates a new instance of NetworkProto. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNetworkProto(t interface {
	mock.TestingT
	Cleanup(func())
}) *NetworkProto {
	mock := &NetworkProto{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// NetworkProto is an autogenerated mock type for the NetworkProto type
type NetworkProto struct {
	mock.Mock
}

type NetworkProto_Expecter struct {
	mock *mock.Mock
}

func (_m *NetworkProto) EXPECT() *NetworkProto_Expecter {
	return &NetworkProto_Expecter{mock: &_m.Mock}
}

// NewConnection provides a mock function for the type NetworkProto
func (_mock *NetworkProto) NewConnection(core gen.Core, result gen.HandshakeResult, log gen.Log) (gen.Connection, error) {
	ret := _mock.Called(core, result, log)

	if len(ret) == 0 {
		panic("no return value specified for NewConnection")
	}

	var r0 gen.Connection
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.Core, gen.HandshakeResult, gen.Log) (gen.Connection, error)); ok {
		return returnFunc(core, result, log)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.Core, gen.HandshakeResult, gen.Log) gen.Connection); ok {
		r0 = returnFunc(core, result, log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gen.Connection)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(gen.Core, gen.HandshakeResult, gen.Log) error); ok {
		r1 = returnFunc(core, result, log)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// NetworkProto_NewConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewConnection'
type NetworkProto_NewConnection_Call struct {
	*mock.Call
}

// NewConnection is a helper method to define mock.On call
//   - core
//   - result
//   - log
func (_e *NetworkProto_Expecter) NewConnection(core interface{}, result interface{}, log interface{}) *NetworkProto_NewConnection_Call {
	return &NetworkProto_NewConnection_Call{Call: _e.mock.On("NewConnection", core, result, log)}
}

func (_c *NetworkProto_NewConnection_Call) Run(run func(core gen.Core, result gen.HandshakeResult, log gen.Log)) *NetworkProto_NewConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Core), args[1].(gen.HandshakeResult), args[2].(gen.Log))
	})
	return _c
}

func (_c *NetworkProto_NewConnection_Call) Return(connection gen.Connection, err error) *NetworkProto_NewConnection_Call {
	_c.Call.Return(connection, err)
	return _c
}

func (_c *NetworkProto_NewConnection_Call) RunAndReturn(run func(core gen.Core, result gen.HandshakeResult, log gen.Log) (gen.Connection, error)) *NetworkProto_NewConnection_Call {
	_c.Call.Return(run)
	return _c
}

// Serve provides a mock function for the type NetworkProto
func (_mock *NetworkProto) Serve(conn gen.Connection, dial gen.NetworkDial) error {
	ret := _mock.Called(conn, dial)

	if len(ret) == 0 {
		panic("no return value specified for Serve")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Connection, gen.NetworkDial) error); ok {
		r0 = returnFunc(conn, dial)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// NetworkProto_Serve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Serve'
type NetworkProto_Serve_Call struct {
	*mock.Call
}

// Serve is a helper method to define mock.On call
//   - conn
//   - dial
func (_e *NetworkProto_Expecter) Serve(conn interface{}, dial interface{}) *NetworkProto_Serve_Call {
	return &NetworkProto_Serve_Call{Call: _e.mock.On("Serve", conn, dial)}
}

func (_c *NetworkProto_Serve_Call) Run(run func(conn gen.Connection, dial gen.NetworkDial)) *NetworkProto_Serve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Connection), args[1].(gen.NetworkDial))
	})
	return _c
}

func (_c *NetworkProto_Serve_Call) Return(err error) *NetworkProto_Serve_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *NetworkProto_Serve_Call) RunAndReturn(run func(conn gen.Connection, dial gen.NetworkDial) error) *NetworkProto_Serve_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function for the type NetworkProto
func (_mock *NetworkProto) Version() gen.Version {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 gen.Version
	if returnFunc, ok := ret.Get(0).(func() gen.Version); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.Version)
	}
	return r0
}

// NetworkProto_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type NetworkProto_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *NetworkProto_Expecter) Version() *NetworkProto_Version_Call {
	return &NetworkProto_Version_Call{Call: _e.mock.On("Version")}
}

func (_c *NetworkProto_Version_Call) Run(run func()) *NetworkProto_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NetworkProto_Version_Call) Return(version gen.Version) *NetworkProto_Version_Call {
	_c.Call.Return(version)
	return _c
}

func (_c *NetworkProto_Version_Call) RunAndReturn(run func() gen.Version) *NetworkProto_Version_Call {
	_c.Call.Return(run)
	return _c
}
