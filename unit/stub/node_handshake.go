// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package stub

import (
	"ergo.services/ergo/gen"
	mock "github.com/stretchr/testify/mock"
)

// NewNodeHandshake creates a new instance of NodeHandshake. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeHandshake(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeHandshake {
	mock := &NodeHandshake{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// NodeHandshake is an autogenerated mock type for the NodeHandshake type
type NodeHandshake struct {
	mock.Mock
}

type NodeHandshake_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeHandshake) EXPECT() *NodeHandshake_Expecter {
	return &NodeHandshake_Expecter{mock: &_m.Mock}
}

// Creation provides a mock function for the type NodeHandshake
func (_mock *NodeHandshake) Creation() int64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Creation")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func() int64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// NodeHandshake_Creation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Creation'
type NodeHandshake_Creation_Call struct {
	*mock.Call
}

// Creation is a helper method to define mock.On call
func (_e *NodeHandshake_Expecter) Creation() *NodeHandshake_Creation_Call {
	return &NodeHandshake_Creation_Call{Call: _e.mock.On("Creation")}
}

func (_c *NodeHandshake_Creation_Call) Run(run func()) *NodeHandshake_Creation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeHandshake_Creation_Call) Return(n int64) *NodeHandshake_Creation_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *NodeHandshake_Creation_Call) RunAndReturn(run func() int64) *NodeHandshake_Creation_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type NodeHandshake
func (_mock *NodeHandshake) Name() gen.Atom {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 gen.Atom
	if returnFunc, ok := ret.Get(0).(func() gen.Atom); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.Atom)
	}
	return r0
}

// NodeHandshake_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type NodeHandshake_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *NodeHandshake_Expecter) Name() *NodeHandshake_Name_Call {
	return &NodeHandshake_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *NodeHandshake_Name_Call) Run(run func()) *NodeHandshake_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeHandshake_Name_Call) Return(atom gen.Atom) *NodeHandshake_Name_Call {
	_c.Call.Return(atom)
	return _c
}

func (_c *NodeHandshake_Name_Call) RunAndReturn(run func() gen.Atom) *NodeHandshake_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function for the type NodeHandshake
func (_mock *NodeHandshake) Version() gen.Version {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 gen.Version
	if returnFunc, ok := ret.Get(0).(func() gen.Version); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.Version)
	}
	return r0
}

// NodeHandshake_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type NodeHandshake_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *NodeHandshake_Expecter) Version() *NodeHandshake_Version_Call {
	return &NodeHandshake_Version_Call{Call: _e.mock.On("Version")}
}

func (_c *NodeHandshake_Version_Call) Run(run func()) *NodeHandshake_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeHandshake_Version_Call) Return(version gen.Version) *NodeHandshake_Version_Call {
	_c.Call.Return(version)
	return _c
}

func (_c *NodeHandshake_Version_Call) RunAndReturn(run func() gen.Version) *NodeHandshake_Version_Call {
	_c.Call.Return(run)
	return _c
}
