// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package stub

import (
	"ergo.services/ergo/gen"
	mock "github.com/stretchr/testify/mock"
)

// NewMetaBehavior creates a new instance of MetaBehavior. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetaBehavior(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetaBehavior {
	mock := &MetaBehavior{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MetaBehavior is an autogenerated mock type for the MetaBehavior type
type MetaBehavior struct {
	mock.Mock
}

type MetaBehavior_Expecter struct {
	mock *mock.Mock
}

func (_m *MetaBehavior) EXPECT() *MetaBehavior_Expecter {
	return &MetaBehavior_Expecter{mock: &_m.Mock}
}

// HandleCall provides a mock function for the type MetaBehavior
func (_mock *MetaBehavior) HandleCall(from gen.PID, ref gen.Ref, request any) (any, error) {
	ret := _mock.Called(from, ref, request)

	if len(ret) == 0 {
		panic("no return value specified for HandleCall")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Ref, any) (any, error)); ok {
		return returnFunc(from, ref, request)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Ref, any) any); ok {
		r0 = returnFunc(from, ref, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(gen.PID, gen.Ref, any) error); ok {
		r1 = returnFunc(from, ref, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MetaBehavior_HandleCall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleCall'
type MetaBehavior_HandleCall_Call struct {
	*mock.Call
}

// HandleCall is a helper method to define mock.On call
//   - from
//   - ref
//   - request
func (_e *MetaBehavior_Expecter) HandleCall(from interface{}, ref interface{}, request interface{}) *MetaBehavior_HandleCall_Call {
	return &MetaBehavior_HandleCall_Call{Call: _e.mock.On("HandleCall", from, ref, request)}
}

func (_c *MetaBehavior_HandleCall_Call) Run(run func(from gen.PID, ref gen.Ref, request any)) *MetaBehavior_HandleCall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.Ref), args[2].(any))
	})
	return _c
}

func (_c *MetaBehavior_HandleCall_Call) Return(v any, err error) *MetaBehavior_HandleCall_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MetaBehavior_HandleCall_Call) RunAndReturn(run func(from gen.PID, ref gen.Ref, request any) (any, error)) *MetaBehavior_HandleCall_Call {
	_c.Call.Return(run)
	return _c
}

// HandleInspect provides a mock function for the type MetaBehavior
func (_mock *MetaBehavior) HandleInspect(from gen.PID, item ...string) map[string]string {
	var tmpRet mock.Arguments
	if len(item) > 0 {
		tmpRet = _mock.Called(from, item)
	} else {
		tmpRet = _mock.Called(from)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for HandleInspect")
	}

	var r0 map[string]string
	if returnFunc, ok := ret.Get(0).(func(gen.PID, ...string) map[string]string); ok {
		r0 = returnFunc(from, item...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	return r0
}

// MetaBehavior_HandleInspect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleInspect'
type MetaBehavior_HandleInspect_Call struct {
	*mock.Call
}

// HandleInspect is a helper method to define mock.On call
//   - from
//   - item
func (_e *MetaBehavior_Expecter) HandleInspect(from interface{}, item ...interface{}) *MetaBehavior_HandleInspect_Call {
	return &MetaBehavior_HandleInspect_Call{Call: _e.mock.On("HandleInspect",
		append([]interface{}{from}, item...)...)}
}

func (_c *MetaBehavior_HandleInspect_Call) Run(run func(from gen.PID, item ...string)) *MetaBehavior_HandleInspect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]string)
		run(args[0].(gen.PID), variadicArgs...)
	})
	return _c
}

func (_c *MetaBehavior_HandleInspect_Call) Return(stringToString map[string]string) *MetaBehavior_HandleInspect_Call {
	_c.Call.Return(stringToString)
	return _c
}

func (_c *MetaBehavior_HandleInspect_Call) RunAndReturn(run func(from gen.PID, item ...string) map[string]string) *MetaBehavior_HandleInspect_Call {
	_c.Call.Return(run)
	return _c
}

// HandleMessage provides a mock function for the type MetaBehavior
func (_mock *MetaBehavior) HandleMessage(from gen.PID, message any) error {
	ret := _mock.Called(from, message)

	if len(ret) == 0 {
		panic("no return value specified for HandleMessage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, any) error); ok {
		r0 = returnFunc(from, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MetaBehavior_HandleMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleMessage'
type MetaBehavior_HandleMessage_Call struct {
	*mock.Call
}

// HandleMessage is a helper method to define mock.On call
//   - from
//   - message
func (_e *MetaBehavior_Expecter) HandleMessage(from interface{}, message interface{}) *MetaBehavior_HandleMessage_Call {
	return &MetaBehavior_HandleMessage_Call{Call: _e.mock.On("HandleMessage", from, message)}
}

func (_c *MetaBehavior_HandleMessage_Call) Run(run func(from gen.PID, message any)) *MetaBehavior_HandleMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(any))
	})
	return _c
}

func (_c *MetaBehavior_HandleMessage_Call) Return(err error) *MetaBehavior_HandleMessage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MetaBehavior_HandleMessage_Call) RunAndReturn(run func(from gen.PID, message any) error) *MetaBehavior_HandleMessage_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function for the type MetaBehavior
func (_mock *MetaBehavior) Init(process gen.MetaProcess) error {
	ret := _mock.Called(process)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.MetaProcess) error); ok {
		r0 = returnFunc(process)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MetaBehavior_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MetaBehavior_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - process
func (_e *MetaBehavior_Expecter) Init(process interface{}) *MetaBehavior_Init_Call {
	return &MetaBehavior_Init_Call{Call: _e.mock.On("Init", process)}
}

func (_c *MetaBehavior_Init_Call) Run(run func(process gen.MetaProcess)) *MetaBehavior_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.MetaProcess))
	})
	return _c
}

func (_c *MetaBehavior_Init_Call) Return(err error) *MetaBehavior_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MetaBehavior_Init_Call) RunAndReturn(run func(process gen.MetaProcess) error) *MetaBehavior_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MetaBehavior
func (_mock *MetaBehavior) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MetaBehavior_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MetaBehavior_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MetaBehavior_Expecter) Start() *MetaBehavior_Start_Call {
	return &MetaBehavior_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MetaBehavior_Start_Call) Run(run func()) *MetaBehavior_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetaBehavior_Start_Call) Return(err error) *MetaBehavior_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MetaBehavior_Start_Call) RunAndReturn(run func() error) *MetaBehavior_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Terminate provides a mock function for the type MetaBehavior
func (_mock *MetaBehavior) Terminate(reason error) {
	_mock.Called(reason)
	return
}

// MetaBehavior_Terminate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Terminate'
type MetaBehavior_Terminate_Call struct {
	*mock.Call
}

// Terminate is a helper method to define mock.On call
//   - reason
func (_e *MetaBehavior_Expecter) Terminate(reason interface{}) *MetaBehavior_Terminate_Call {
	return &MetaBehavior_Terminate_Call{Call: _e.mock.On("Terminate", reason)}
}

func (_c *MetaBehavior_Terminate_Call) Run(run func(reason error)) *MetaBehavior_Terminate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MetaBehavior_Terminate_Call) Return() *MetaBehavior_Terminate_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetaBehavior_Terminate_Call) RunAndReturn(run func(reason error)) *MetaBehavior_Terminate_Call {
	_c.Run(run)
	return _c
}
