// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package stub

import (
	"ergo.services/ergo/gen"
	mock "github.com/stretchr/testify/mock"
)

// NewCore creates a new instance of Core. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Core {
	mock := &Core{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Core is an autogenerated mock type for the Core type
type Core struct {
	mock.Mock
}

type Core_Expecter struct {
	mock *mock.Mock
}

func (_m *Core) EXPECT() *Core_Expecter {
	return &Core_Expecter{mock: &_m.Mock}
}

// Creation provides a mock function for the type Core
func (_mock *Core) Creation() int64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Creation")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func() int64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// Core_Creation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Creation'
type Core_Creation_Call struct {
	*mock.Call
}

// Creation is a helper method to define mock.On call
func (_e *Core_Expecter) Creation() *Core_Creation_Call {
	return &Core_Creation_Call{Call: _e.mock.On("Creation")}
}

func (_c *Core_Creation_Call) Run(run func()) *Core_Creation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Core_Creation_Call) Return(n int64) *Core_Creation_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *Core_Creation_Call) RunAndReturn(run func() int64) *Core_Creation_Call {
	_c.Call.Return(run)
	return _c
}

// EnvList provides a mock function for the type Core
func (_mock *Core) EnvList() map[gen.Env]any {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnvList")
	}

	var r0 map[gen.Env]any
	if returnFunc, ok := ret.Get(0).(func() map[gen.Env]any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[gen.Env]any)
		}
	}
	return r0
}

// Core_EnvList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnvList'
type Core_EnvList_Call struct {
	*mock.Call
}

// EnvList is a helper method to define mock.On call
func (_e *Core_Expecter) EnvList() *Core_EnvList_Call {
	return &Core_EnvList_Call{Call: _e.mock.On("EnvList")}
}

func (_c *Core_EnvList_Call) Run(run func()) *Core_EnvList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Core_EnvList_Call) Return(envToV map[gen.Env]any) *Core_EnvList_Call {
	_c.Call.Return(envToV)
	return _c
}

func (_c *Core_EnvList_Call) RunAndReturn(run func() map[gen.Env]any) *Core_EnvList_Call {
	_c.Call.Return(run)
	return _c
}

// LogLevel provides a mock function for the type Core
func (_mock *Core) LogLevel() gen.LogLevel {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LogLevel")
	}

	var r0 gen.LogLevel
	if returnFunc, ok := ret.Get(0).(func() gen.LogLevel); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.LogLevel)
	}
	return r0
}

// Core_LogLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogLevel'
type Core_LogLevel_Call struct {
	*mock.Call
}

// LogLevel is a helper method to define mock.On call
func (_e *Core_Expecter) LogLevel() *Core_LogLevel_Call {
	return &Core_LogLevel_Call{Call: _e.mock.On("LogLevel")}
}

func (_c *Core_LogLevel_Call) Run(run func()) *Core_LogLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Core_LogLevel_Call) Return(logLevel gen.LogLevel) *Core_LogLevel_Call {
	_c.Call.Return(logLevel)
	return _c
}

func (_c *Core_LogLevel_Call) RunAndReturn(run func() gen.LogLevel) *Core_LogLevel_Call {
	_c.Call.Return(run)
	return _c
}

// MakeRef provides a mock function for the type Core
func (_mock *Core) MakeRef() gen.Ref {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeRef")
	}

	var r0 gen.Ref
	if returnFunc, ok := ret.Get(0).(func() gen.Ref); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.Ref)
	}
	return r0
}

// Core_MakeRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeRef'
type Core_MakeRef_Call struct {
	*mock.Call
}

// MakeRef is a helper method to define mock.On call
func (_e *Core_Expecter) MakeRef() *Core_MakeRef_Call {
	return &Core_MakeRef_Call{Call: _e.mock.On("MakeRef")}
}

func (_c *Core_MakeRef_Call) Run(run func()) *Core_MakeRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Core_MakeRef_Call) Return(ref gen.Ref) *Core_MakeRef_Call {
	_c.Call.Return(ref)
	return _c
}

func (_c *Core_MakeRef_Call) RunAndReturn(run func() gen.Ref) *Core_MakeRef_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type Core
func (_mock *Core) Name() gen.Atom {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 gen.Atom
	if returnFunc, ok := ret.Get(0).(func() gen.Atom); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.Atom)
	}
	return r0
}

// Core_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Core_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Core_Expecter) Name() *Core_Name_Call {
	return &Core_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Core_Name_Call) Run(run func()) *Core_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Core_Name_Call) Return(atom gen.Atom) *Core_Name_Call {
	_c.Call.Return(atom)
	return _c
}

func (_c *Core_Name_Call) RunAndReturn(run func() gen.Atom) *Core_Name_Call {
	_c.Call.Return(run)
	return _c
}

// PID provides a mock function for the type Core
func (_mock *Core) PID() gen.PID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for PID")
	}

	var r0 gen.PID
	if returnFunc, ok := ret.Get(0).(func() gen.PID); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.PID)
	}
	return r0
}

// Core_PID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PID'
type Core_PID_Call struct {
	*mock.Call
}

// PID is a helper method to define mock.On call
func (_e *Core_Expecter) PID() *Core_PID_Call {
	return &Core_PID_Call{Call: _e.mock.On("PID")}
}

func (_c *Core_PID_Call) Run(run func()) *Core_PID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Core_PID_Call) Return(pID gen.PID) *Core_PID_Call {
	_c.Call.Return(pID)
	return _c
}

func (_c *Core_PID_Call) RunAndReturn(run func() gen.PID) *Core_PID_Call {
	_c.Call.Return(run)
	return _c
}

// RouteApplicationStart provides a mock function for the type Core
func (_mock *Core) RouteApplicationStart(name gen.Atom, mode gen.ApplicationMode, options gen.ApplicationOptionsExtra, source gen.Atom) error {
	ret := _mock.Called(name, mode, options, source)

	if len(ret) == 0 {
		panic("no return value specified for RouteApplicationStart")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.ApplicationMode, gen.ApplicationOptionsExtra, gen.Atom) error); ok {
		r0 = returnFunc(name, mode, options, source)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteApplicationStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteApplicationStart'
type Core_RouteApplicationStart_Call struct {
	*mock.Call
}

// RouteApplicationStart is a helper method to define mock.On call
//   - name
//   - mode
//   - options
//   - source
func (_e *Core_Expecter) RouteApplicationStart(name interface{}, mode interface{}, options interface{}, source interface{}) *Core_RouteApplicationStart_Call {
	return &Core_RouteApplicationStart_Call{Call: _e.mock.On("RouteApplicationStart", name, mode, options, source)}
}

func (_c *Core_RouteApplicationStart_Call) Run(run func(name gen.Atom, mode gen.ApplicationMode, options gen.ApplicationOptionsExtra, source gen.Atom)) *Core_RouteApplicationStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Atom), args[1].(gen.ApplicationMode), args[2].(gen.ApplicationOptionsExtra), args[3].(gen.Atom))
	})
	return _c
}

func (_c *Core_RouteApplicationStart_Call) Return(err error) *Core_RouteApplicationStart_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteApplicationStart_Call) RunAndReturn(run func(name gen.Atom, mode gen.ApplicationMode, options gen.ApplicationOptionsExtra, source gen.Atom) error) *Core_RouteApplicationStart_Call {
	_c.Call.Return(run)
	return _c
}

// RouteCallAlias provides a mock function for the type Core
func (_mock *Core) RouteCallAlias(from gen.PID, to gen.Alias, options gen.MessageOptions, message any) error {
	ret := _mock.Called(from, to, options, message)

	if len(ret) == 0 {
		panic("no return value specified for RouteCallAlias")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Alias, gen.MessageOptions, any) error); ok {
		r0 = returnFunc(from, to, options, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteCallAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteCallAlias'
type Core_RouteCallAlias_Call struct {
	*mock.Call
}

// RouteCallAlias is a helper method to define mock.On call
//   - from
//   - to
//   - options
//   - message
func (_e *Core_Expecter) RouteCallAlias(from interface{}, to interface{}, options interface{}, message interface{}) *Core_RouteCallAlias_Call {
	return &Core_RouteCallAlias_Call{Call: _e.mock.On("RouteCallAlias", from, to, options, message)}
}

func (_c *Core_RouteCallAlias_Call) Run(run func(from gen.PID, to gen.Alias, options gen.MessageOptions, message any)) *Core_RouteCallAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.Alias), args[2].(gen.MessageOptions), args[3].(any))
	})
	return _c
}

func (_c *Core_RouteCallAlias_Call) Return(err error) *Core_RouteCallAlias_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteCallAlias_Call) RunAndReturn(run func(from gen.PID, to gen.Alias, options gen.MessageOptions, message any) error) *Core_RouteCallAlias_Call {
	_c.Call.Return(run)
	return _c
}

// RouteCallPID provides a mock function for the type Core
func (_mock *Core) RouteCallPID(from gen.PID, to gen.PID, options gen.MessageOptions, message any) error {
	ret := _mock.Called(from, to, options, message)

	if len(ret) == 0 {
		panic("no return value specified for RouteCallPID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.PID, gen.MessageOptions, any) error); ok {
		r0 = returnFunc(from, to, options, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteCallPID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteCallPID'
type Core_RouteCallPID_Call struct {
	*mock.Call
}

// RouteCallPID is a helper method to define mock.On call
//   - from
//   - to
//   - options
//   - message
func (_e *Core_Expecter) RouteCallPID(from interface{}, to interface{}, options interface{}, message interface{}) *Core_RouteCallPID_Call {
	return &Core_RouteCallPID_Call{Call: _e.mock.On("RouteCallPID", from, to, options, message)}
}

func (_c *Core_RouteCallPID_Call) Run(run func(from gen.PID, to gen.PID, options gen.MessageOptions, message any)) *Core_RouteCallPID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.PID), args[2].(gen.MessageOptions), args[3].(any))
	})
	return _c
}

func (_c *Core_RouteCallPID_Call) Return(err error) *Core_RouteCallPID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteCallPID_Call) RunAndReturn(run func(from gen.PID, to gen.PID, options gen.MessageOptions, message any) error) *Core_RouteCallPID_Call {
	_c.Call.Return(run)
	return _c
}

// RouteCallProcessID provides a mock function for the type Core
func (_mock *Core) RouteCallProcessID(from gen.PID, to gen.ProcessID, options gen.MessageOptions, message any) error {
	ret := _mock.Called(from, to, options, message)

	if len(ret) == 0 {
		panic("no return value specified for RouteCallProcessID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.ProcessID, gen.MessageOptions, any) error); ok {
		r0 = returnFunc(from, to, options, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteCallProcessID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteCallProcessID'
type Core_RouteCallProcessID_Call struct {
	*mock.Call
}

// RouteCallProcessID is a helper method to define mock.On call
//   - from
//   - to
//   - options
//   - message
func (_e *Core_Expecter) RouteCallProcessID(from interface{}, to interface{}, options interface{}, message interface{}) *Core_RouteCallProcessID_Call {
	return &Core_RouteCallProcessID_Call{Call: _e.mock.On("RouteCallProcessID", from, to, options, message)}
}

func (_c *Core_RouteCallProcessID_Call) Run(run func(from gen.PID, to gen.ProcessID, options gen.MessageOptions, message any)) *Core_RouteCallProcessID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.ProcessID), args[2].(gen.MessageOptions), args[3].(any))
	})
	return _c
}

func (_c *Core_RouteCallProcessID_Call) Return(err error) *Core_RouteCallProcessID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteCallProcessID_Call) RunAndReturn(run func(from gen.PID, to gen.ProcessID, options gen.MessageOptions, message any) error) *Core_RouteCallProcessID_Call {
	_c.Call.Return(run)
	return _c
}

// RouteDemonitorAlias provides a mock function for the type Core
func (_mock *Core) RouteDemonitorAlias(pid gen.PID, target gen.Alias) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for RouteDemonitorAlias")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Alias) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteDemonitorAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteDemonitorAlias'
type Core_RouteDemonitorAlias_Call struct {
	*mock.Call
}

// RouteDemonitorAlias is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Core_Expecter) RouteDemonitorAlias(pid interface{}, target interface{}) *Core_RouteDemonitorAlias_Call {
	return &Core_RouteDemonitorAlias_Call{Call: _e.mock.On("RouteDemonitorAlias", pid, target)}
}

func (_c *Core_RouteDemonitorAlias_Call) Run(run func(pid gen.PID, target gen.Alias)) *Core_RouteDemonitorAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.Alias))
	})
	return _c
}

func (_c *Core_RouteDemonitorAlias_Call) Return(err error) *Core_RouteDemonitorAlias_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteDemonitorAlias_Call) RunAndReturn(run func(pid gen.PID, target gen.Alias) error) *Core_RouteDemonitorAlias_Call {
	_c.Call.Return(run)
	return _c
}

// RouteDemonitorEvent provides a mock function for the type Core
func (_mock *Core) RouteDemonitorEvent(pid gen.PID, target gen.Event) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for RouteDemonitorEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Event) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteDemonitorEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteDemonitorEvent'
type Core_RouteDemonitorEvent_Call struct {
	*mock.Call
}

// RouteDemonitorEvent is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Core_Expecter) RouteDemonitorEvent(pid interface{}, target interface{}) *Core_RouteDemonitorEvent_Call {
	return &Core_RouteDemonitorEvent_Call{Call: _e.mock.On("RouteDemonitorEvent", pid, target)}
}

func (_c *Core_RouteDemonitorEvent_Call) Run(run func(pid gen.PID, target gen.Event)) *Core_RouteDemonitorEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.Event))
	})
	return _c
}

func (_c *Core_RouteDemonitorEvent_Call) Return(err error) *Core_RouteDemonitorEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteDemonitorEvent_Call) RunAndReturn(run func(pid gen.PID, target gen.Event) error) *Core_RouteDemonitorEvent_Call {
	_c.Call.Return(run)
	return _c
}

// RouteDemonitorPID provides a mock function for the type Core
func (_mock *Core) RouteDemonitorPID(pid gen.PID, target gen.PID) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for RouteDemonitorPID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.PID) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteDemonitorPID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteDemonitorPID'
type Core_RouteDemonitorPID_Call struct {
	*mock.Call
}

// RouteDemonitorPID is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Core_Expecter) RouteDemonitorPID(pid interface{}, target interface{}) *Core_RouteDemonitorPID_Call {
	return &Core_RouteDemonitorPID_Call{Call: _e.mock.On("RouteDemonitorPID", pid, target)}
}

func (_c *Core_RouteDemonitorPID_Call) Run(run func(pid gen.PID, target gen.PID)) *Core_RouteDemonitorPID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.PID))
	})
	return _c
}

func (_c *Core_RouteDemonitorPID_Call) Return(err error) *Core_RouteDemonitorPID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteDemonitorPID_Call) RunAndReturn(run func(pid gen.PID, target gen.PID) error) *Core_RouteDemonitorPID_Call {
	_c.Call.Return(run)
	return _c
}

// RouteDemonitorProcessID provides a mock function for the type Core
func (_mock *Core) RouteDemonitorProcessID(pid gen.PID, target gen.ProcessID) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for RouteDemonitorProcessID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.ProcessID) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteDemonitorProcessID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteDemonitorProcessID'
type Core_RouteDemonitorProcessID_Call struct {
	*mock.Call
}

// RouteDemonitorProcessID is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Core_Expecter) RouteDemonitorProcessID(pid interface{}, target interface{}) *Core_RouteDemonitorProcessID_Call {
	return &Core_RouteDemonitorProcessID_Call{Call: _e.mock.On("RouteDemonitorProcessID", pid, target)}
}

func (_c *Core_RouteDemonitorProcessID_Call) Run(run func(pid gen.PID, target gen.ProcessID)) *Core_RouteDemonitorProcessID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.ProcessID))
	})
	return _c
}

func (_c *Core_RouteDemonitorProcessID_Call) Return(err error) *Core_RouteDemonitorProcessID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteDemonitorProcessID_Call) RunAndReturn(run func(pid gen.PID, target gen.ProcessID) error) *Core_RouteDemonitorProcessID_Call {
	_c.Call.Return(run)
	return _c
}

// RouteLinkAlias provides a mock function for the type Core
func (_mock *Core) RouteLinkAlias(pid gen.PID, target gen.Alias) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for RouteLinkAlias")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Alias) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteLinkAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteLinkAlias'
type Core_RouteLinkAlias_Call struct {
	*mock.Call
}

// RouteLinkAlias is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Core_Expecter) RouteLinkAlias(pid interface{}, target interface{}) *Core_RouteLinkAlias_Call {
	return &Core_RouteLinkAlias_Call{Call: _e.mock.On("RouteLinkAlias", pid, target)}
}

func (_c *Core_RouteLinkAlias_Call) Run(run func(pid gen.PID, target gen.Alias)) *Core_RouteLinkAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.Alias))
	})
	return _c
}

func (_c *Core_RouteLinkAlias_Call) Return(err error) *Core_RouteLinkAlias_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteLinkAlias_Call) RunAndReturn(run func(pid gen.PID, target gen.Alias) error) *Core_RouteLinkAlias_Call {
	_c.Call.Return(run)
	return _c
}

// RouteLinkEvent provides a mock function for the type Core
func (_mock *Core) RouteLinkEvent(pid gen.PID, target gen.Event) ([]gen.MessageEvent, error) {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for RouteLinkEvent")
	}

	var r0 []gen.MessageEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Event) ([]gen.MessageEvent, error)); ok {
		return returnFunc(pid, target)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Event) []gen.MessageEvent); ok {
		r0 = returnFunc(pid, target)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gen.MessageEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(gen.PID, gen.Event) error); ok {
		r1 = returnFunc(pid, target)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Core_RouteLinkEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteLinkEvent'
type Core_RouteLinkEvent_Call struct {
	*mock.Call
}

// RouteLinkEvent is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Core_Expecter) RouteLinkEvent(pid interface{}, target interface{}) *Core_RouteLinkEvent_Call {
	return &Core_RouteLinkEvent_Call{Call: _e.mock.On("RouteLinkEvent", pid, target)}
}

func (_c *Core_RouteLinkEvent_Call) Run(run func(pid gen.PID, target gen.Event)) *Core_RouteLinkEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.Event))
	})
	return _c
}

func (_c *Core_RouteLinkEvent_Call) Return(messageEvents []gen.MessageEvent, err error) *Core_RouteLinkEvent_Call {
	_c.Call.Return(messageEvents, err)
	return _c
}

func (_c *Core_RouteLinkEvent_Call) RunAndReturn(run func(pid gen.PID, target gen.Event) ([]gen.MessageEvent, error)) *Core_RouteLinkEvent_Call {
	_c.Call.Return(run)
	return _c
}

// RouteLinkPID provides a mock function for the type Core
func (_mock *Core) RouteLinkPID(pid gen.PID, target gen.PID) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for RouteLinkPID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.PID) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteLinkPID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteLinkPID'
type Core_RouteLinkPID_Call struct {
	*mock.Call
}

// RouteLinkPID is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Core_Expecter) RouteLinkPID(pid interface{}, target interface{}) *Core_RouteLinkPID_Call {
	return &Core_RouteLinkPID_Call{Call: _e.mock.On("RouteLinkPID", pid, target)}
}

func (_c *Core_RouteLinkPID_Call) Run(run func(pid gen.PID, target gen.PID)) *Core_RouteLinkPID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.PID))
	})
	return _c
}

func (_c *Core_RouteLinkPID_Call) Return(err error) *Core_RouteLinkPID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteLinkPID_Call) RunAndReturn(run func(pid gen.PID, target gen.PID) error) *Core_RouteLinkPID_Call {
	_c.Call.Return(run)
	return _c
}

// RouteLinkProcessID provides a mock function for the type Core
func (_mock *Core) RouteLinkProcessID(pid gen.PID, target gen.ProcessID) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for RouteLinkProcessID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.ProcessID) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteLinkProcessID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteLinkProcessID'
type Core_RouteLinkProcessID_Call struct {
	*mock.Call
}

// RouteLinkProcessID is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Core_Expecter) RouteLinkProcessID(pid interface{}, target interface{}) *Core_RouteLinkProcessID_Call {
	return &Core_RouteLinkProcessID_Call{Call: _e.mock.On("RouteLinkProcessID", pid, target)}
}

func (_c *Core_RouteLinkProcessID_Call) Run(run func(pid gen.PID, target gen.ProcessID)) *Core_RouteLinkProcessID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.ProcessID))
	})
	return _c
}

func (_c *Core_RouteLinkProcessID_Call) Return(err error) *Core_RouteLinkProcessID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteLinkProcessID_Call) RunAndReturn(run func(pid gen.PID, target gen.ProcessID) error) *Core_RouteLinkProcessID_Call {
	_c.Call.Return(run)
	return _c
}

// RouteMonitorAlias provides a mock function for the type Core
func (_mock *Core) RouteMonitorAlias(pid gen.PID, target gen.Alias) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for RouteMonitorAlias")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Alias) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteMonitorAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteMonitorAlias'
type Core_RouteMonitorAlias_Call struct {
	*mock.Call
}

// RouteMonitorAlias is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Core_Expecter) RouteMonitorAlias(pid interface{}, target interface{}) *Core_RouteMonitorAlias_Call {
	return &Core_RouteMonitorAlias_Call{Call: _e.mock.On("RouteMonitorAlias", pid, target)}
}

func (_c *Core_RouteMonitorAlias_Call) Run(run func(pid gen.PID, target gen.Alias)) *Core_RouteMonitorAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.Alias))
	})
	return _c
}

func (_c *Core_RouteMonitorAlias_Call) Return(err error) *Core_RouteMonitorAlias_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteMonitorAlias_Call) RunAndReturn(run func(pid gen.PID, target gen.Alias) error) *Core_RouteMonitorAlias_Call {
	_c.Call.Return(run)
	return _c
}

// RouteMonitorEvent provides a mock function for the type Core
func (_mock *Core) RouteMonitorEvent(pid gen.PID, target gen.Event) ([]gen.MessageEvent, error) {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for RouteMonitorEvent")
	}

	var r0 []gen.MessageEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Event) ([]gen.MessageEvent, error)); ok {
		return returnFunc(pid, target)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Event) []gen.MessageEvent); ok {
		r0 = returnFunc(pid, target)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gen.MessageEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(gen.PID, gen.Event) error); ok {
		r1 = returnFunc(pid, target)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Core_RouteMonitorEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteMonitorEvent'
type Core_RouteMonitorEvent_Call struct {
	*mock.Call
}

// RouteMonitorEvent is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Core_Expecter) RouteMonitorEvent(pid interface{}, target interface{}) *Core_RouteMonitorEvent_Call {
	return &Core_RouteMonitorEvent_Call{Call: _e.mock.On("RouteMonitorEvent", pid, target)}
}

func (_c *Core_RouteMonitorEvent_Call) Run(run func(pid gen.PID, target gen.Event)) *Core_RouteMonitorEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.Event))
	})
	return _c
}

func (_c *Core_RouteMonitorEvent_Call) Return(messageEvents []gen.MessageEvent, err error) *Core_RouteMonitorEvent_Call {
	_c.Call.Return(messageEvents, err)
	return _c
}

func (_c *Core_RouteMonitorEvent_Call) RunAndReturn(run func(pid gen.PID, target gen.Event) ([]gen.MessageEvent, error)) *Core_RouteMonitorEvent_Call {
	_c.Call.Return(run)
	return _c
}

// RouteMonitorPID provides a mock function for the type Core
func (_mock *Core) RouteMonitorPID(pid gen.PID, target gen.PID) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for RouteMonitorPID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.PID) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteMonitorPID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteMonitorPID'
type Core_RouteMonitorPID_Call struct {
	*mock.Call
}

// RouteMonitorPID is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Core_Expecter) RouteMonitorPID(pid interface{}, target interface{}) *Core_RouteMonitorPID_Call {
	return &Core_RouteMonitorPID_Call{Call: _e.mock.On("RouteMonitorPID", pid, target)}
}

func (_c *Core_RouteMonitorPID_Call) Run(run func(pid gen.PID, target gen.PID)) *Core_RouteMonitorPID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.PID))
	})
	return _c
}

func (_c *Core_RouteMonitorPID_Call) Return(err error) *Core_RouteMonitorPID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteMonitorPID_Call) RunAndReturn(run func(pid gen.PID, target gen.PID) error) *Core_RouteMonitorPID_Call {
	_c.Call.Return(run)
	return _c
}

// RouteMonitorProcessID provides a mock function for the type Core
func (_mock *Core) RouteMonitorProcessID(pid gen.PID, target gen.ProcessID) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for RouteMonitorProcessID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.ProcessID) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteMonitorProcessID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteMonitorProcessID'
type Core_RouteMonitorProcessID_Call struct {
	*mock.Call
}

// RouteMonitorProcessID is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Core_Expecter) RouteMonitorProcessID(pid interface{}, target interface{}) *Core_RouteMonitorProcessID_Call {
	return &Core_RouteMonitorProcessID_Call{Call: _e.mock.On("RouteMonitorProcessID", pid, target)}
}

func (_c *Core_RouteMonitorProcessID_Call) Run(run func(pid gen.PID, target gen.ProcessID)) *Core_RouteMonitorProcessID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.ProcessID))
	})
	return _c
}

func (_c *Core_RouteMonitorProcessID_Call) Return(err error) *Core_RouteMonitorProcessID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteMonitorProcessID_Call) RunAndReturn(run func(pid gen.PID, target gen.ProcessID) error) *Core_RouteMonitorProcessID_Call {
	_c.Call.Return(run)
	return _c
}

// RouteNodeDown provides a mock function for the type Core
func (_mock *Core) RouteNodeDown(node gen.Atom, reason error) {
	_mock.Called(node, reason)
	return
}

// Core_RouteNodeDown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteNodeDown'
type Core_RouteNodeDown_Call struct {
	*mock.Call
}

// RouteNodeDown is a helper method to define mock.On call
//   - node
//   - reason
func (_e *Core_Expecter) RouteNodeDown(node interface{}, reason interface{}) *Core_RouteNodeDown_Call {
	return &Core_RouteNodeDown_Call{Call: _e.mock.On("RouteNodeDown", node, reason)}
}

func (_c *Core_RouteNodeDown_Call) Run(run func(node gen.Atom, reason error)) *Core_RouteNodeDown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Atom), args[1].(error))
	})
	return _c
}

func (_c *Core_RouteNodeDown_Call) Return() *Core_RouteNodeDown_Call {
	_c.Call.Return()
	return _c
}

func (_c *Core_RouteNodeDown_Call) RunAndReturn(run func(node gen.Atom, reason error)) *Core_RouteNodeDown_Call {
	_c.Run(run)
	return _c
}

// RouteSendAlias provides a mock function for the type Core
func (_mock *Core) RouteSendAlias(from gen.PID, to gen.Alias, options gen.MessageOptions, message any) error {
	ret := _mock.Called(from, to, options, message)

	if len(ret) == 0 {
		panic("no return value specified for RouteSendAlias")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Alias, gen.MessageOptions, any) error); ok {
		r0 = returnFunc(from, to, options, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteSendAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteSendAlias'
type Core_RouteSendAlias_Call struct {
	*mock.Call
}

// RouteSendAlias is a helper method to define mock.On call
//   - from
//   - to
//   - options
//   - message
func (_e *Core_Expecter) RouteSendAlias(from interface{}, to interface{}, options interface{}, message interface{}) *Core_RouteSendAlias_Call {
	return &Core_RouteSendAlias_Call{Call: _e.mock.On("RouteSendAlias", from, to, options, message)}
}

func (_c *Core_RouteSendAlias_Call) Run(run func(from gen.PID, to gen.Alias, options gen.MessageOptions, message any)) *Core_RouteSendAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.Alias), args[2].(gen.MessageOptions), args[3].(any))
	})
	return _c
}

func (_c *Core_RouteSendAlias_Call) Return(err error) *Core_RouteSendAlias_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteSendAlias_Call) RunAndReturn(run func(from gen.PID, to gen.Alias, options gen.MessageOptions, message any) error) *Core_RouteSendAlias_Call {
	_c.Call.Return(run)
	return _c
}

// RouteSendEvent provides a mock function for the type Core
func (_mock *Core) RouteSendEvent(from gen.PID, token gen.Ref, options gen.MessageOptions, message gen.MessageEvent) error {
	ret := _mock.Called(from, token, options, message)

	if len(ret) == 0 {
		panic("no return value specified for RouteSendEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Ref, gen.MessageOptions, gen.MessageEvent) error); ok {
		r0 = returnFunc(from, token, options, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteSendEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteSendEvent'
type Core_RouteSendEvent_Call struct {
	*mock.Call
}

// RouteSendEvent is a helper method to define mock.On call
//   - from
//   - token
//   - options
//   - message
func (_e *Core_Expecter) RouteSendEvent(from interface{}, token interface{}, options interface{}, message interface{}) *Core_RouteSendEvent_Call {
	return &Core_RouteSendEvent_Call{Call: _e.mock.On("RouteSendEvent", from, token, options, message)}
}

func (_c *Core_RouteSendEvent_Call) Run(run func(from gen.PID, token gen.Ref, options gen.MessageOptions, message gen.MessageEvent)) *Core_RouteSendEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.Ref), args[2].(gen.MessageOptions), args[3].(gen.MessageEvent))
	})
	return _c
}

func (_c *Core_RouteSendEvent_Call) Return(err error) *Core_RouteSendEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteSendEvent_Call) RunAndReturn(run func(from gen.PID, token gen.Ref, options gen.MessageOptions, message gen.MessageEvent) error) *Core_RouteSendEvent_Call {
	_c.Call.Return(run)
	return _c
}

// RouteSendExit provides a mock function for the type Core
func (_mock *Core) RouteSendExit(from gen.PID, to gen.PID, reason error) error {
	ret := _mock.Called(from, to, reason)

	if len(ret) == 0 {
		panic("no return value specified for RouteSendExit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.PID, error) error); ok {
		r0 = returnFunc(from, to, reason)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteSendExit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteSendExit'
type Core_RouteSendExit_Call struct {
	*mock.Call
}

// RouteSendExit is a helper method to define mock.On call
//   - from
//   - to
//   - reason
func (_e *Core_Expecter) RouteSendExit(from interface{}, to interface{}, reason interface{}) *Core_RouteSendExit_Call {
	return &Core_RouteSendExit_Call{Call: _e.mock.On("RouteSendExit", from, to, reason)}
}

func (_c *Core_RouteSendExit_Call) Run(run func(from gen.PID, to gen.PID, reason error)) *Core_RouteSendExit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.PID), args[2].(error))
	})
	return _c
}

func (_c *Core_RouteSendExit_Call) Return(err error) *Core_RouteSendExit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteSendExit_Call) RunAndReturn(run func(from gen.PID, to gen.PID, reason error) error) *Core_RouteSendExit_Call {
	_c.Call.Return(run)
	return _c
}

// RouteSendPID provides a mock function for the type Core
func (_mock *Core) RouteSendPID(from gen.PID, to gen.PID, options gen.MessageOptions, message any) error {
	ret := _mock.Called(from, to, options, message)

	if len(ret) == 0 {
		panic("no return value specified for RouteSendPID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.PID, gen.MessageOptions, any) error); ok {
		r0 = returnFunc(from, to, options, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteSendPID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteSendPID'
type Core_RouteSendPID_Call struct {
	*mock.Call
}

// RouteSendPID is a helper method to define mock.On call
//   - from
//   - to
//   - options
//   - message
func (_e *Core_Expecter) RouteSendPID(from interface{}, to interface{}, options interface{}, message interface{}) *Core_RouteSendPID_Call {
	return &Core_RouteSendPID_Call{Call: _e.mock.On("RouteSendPID", from, to, options, message)}
}

func (_c *Core_RouteSendPID_Call) Run(run func(from gen.PID, to gen.PID, options gen.MessageOptions, message any)) *Core_RouteSendPID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.PID), args[2].(gen.MessageOptions), args[3].(any))
	})
	return _c
}

func (_c *Core_RouteSendPID_Call) Return(err error) *Core_RouteSendPID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteSendPID_Call) RunAndReturn(run func(from gen.PID, to gen.PID, options gen.MessageOptions, message any) error) *Core_RouteSendPID_Call {
	_c.Call.Return(run)
	return _c
}

// RouteSendProcessID provides a mock function for the type Core
func (_mock *Core) RouteSendProcessID(from gen.PID, to gen.ProcessID, options gen.MessageOptions, message any) error {
	ret := _mock.Called(from, to, options, message)

	if len(ret) == 0 {
		panic("no return value specified for RouteSendProcessID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.ProcessID, gen.MessageOptions, any) error); ok {
		r0 = returnFunc(from, to, options, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteSendProcessID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteSendProcessID'
type Core_RouteSendProcessID_Call struct {
	*mock.Call
}

// RouteSendProcessID is a helper method to define mock.On call
//   - from
//   - to
//   - options
//   - message
func (_e *Core_Expecter) RouteSendProcessID(from interface{}, to interface{}, options interface{}, message interface{}) *Core_RouteSendProcessID_Call {
	return &Core_RouteSendProcessID_Call{Call: _e.mock.On("RouteSendProcessID", from, to, options, message)}
}

func (_c *Core_RouteSendProcessID_Call) Run(run func(from gen.PID, to gen.ProcessID, options gen.MessageOptions, message any)) *Core_RouteSendProcessID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.ProcessID), args[2].(gen.MessageOptions), args[3].(any))
	})
	return _c
}

func (_c *Core_RouteSendProcessID_Call) Return(err error) *Core_RouteSendProcessID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteSendProcessID_Call) RunAndReturn(run func(from gen.PID, to gen.ProcessID, options gen.MessageOptions, message any) error) *Core_RouteSendProcessID_Call {
	_c.Call.Return(run)
	return _c
}

// RouteSendResponse provides a mock function for the type Core
func (_mock *Core) RouteSendResponse(from gen.PID, to gen.PID, options gen.MessageOptions, message any) error {
	ret := _mock.Called(from, to, options, message)

	if len(ret) == 0 {
		panic("no return value specified for RouteSendResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.PID, gen.MessageOptions, any) error); ok {
		r0 = returnFunc(from, to, options, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteSendResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteSendResponse'
type Core_RouteSendResponse_Call struct {
	*mock.Call
}

// RouteSendResponse is a helper method to define mock.On call
//   - from
//   - to
//   - options
//   - message
func (_e *Core_Expecter) RouteSendResponse(from interface{}, to interface{}, options interface{}, message interface{}) *Core_RouteSendResponse_Call {
	return &Core_RouteSendResponse_Call{Call: _e.mock.On("RouteSendResponse", from, to, options, message)}
}

func (_c *Core_RouteSendResponse_Call) Run(run func(from gen.PID, to gen.PID, options gen.MessageOptions, message any)) *Core_RouteSendResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.PID), args[2].(gen.MessageOptions), args[3].(any))
	})
	return _c
}

func (_c *Core_RouteSendResponse_Call) Return(err error) *Core_RouteSendResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteSendResponse_Call) RunAndReturn(run func(from gen.PID, to gen.PID, options gen.MessageOptions, message any) error) *Core_RouteSendResponse_Call {
	_c.Call.Return(run)
	return _c
}

// RouteSendResponseError provides a mock function for the type Core
func (_mock *Core) RouteSendResponseError(from gen.PID, to gen.PID, options gen.MessageOptions, err error) error {
	ret := _mock.Called(from, to, options, err)

	if len(ret) == 0 {
		panic("no return value specified for RouteSendResponseError")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.PID, gen.MessageOptions, error) error); ok {
		r0 = returnFunc(from, to, options, err)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteSendResponseError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteSendResponseError'
type Core_RouteSendResponseError_Call struct {
	*mock.Call
}

// RouteSendResponseError is a helper method to define mock.On call
//   - from
//   - to
//   - options
//   - err
func (_e *Core_Expecter) RouteSendResponseError(from interface{}, to interface{}, options interface{}, err interface{}) *Core_RouteSendResponseError_Call {
	return &Core_RouteSendResponseError_Call{Call: _e.mock.On("RouteSendResponseError", from, to, options, err)}
}

func (_c *Core_RouteSendResponseError_Call) Run(run func(from gen.PID, to gen.PID, options gen.MessageOptions, err error)) *Core_RouteSendResponseError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.PID), args[2].(gen.MessageOptions), args[3].(error))
	})
	return _c
}

func (_c *Core_RouteSendResponseError_Call) Return(err1 error) *Core_RouteSendResponseError_Call {
	_c.Call.Return(err1)
	return _c
}

func (_c *Core_RouteSendResponseError_Call) RunAndReturn(run func(from gen.PID, to gen.PID, options gen.MessageOptions, err error) error) *Core_RouteSendResponseError_Call {
	_c.Call.Return(run)
	return _c
}

// RouteSpawn provides a mock function for the type Core
func (_mock *Core) RouteSpawn(node gen.Atom, name gen.Atom, options gen.ProcessOptionsExtra, source gen.Atom) (gen.PID, error) {
	ret := _mock.Called(node, name, options, source)

	if len(ret) == 0 {
		panic("no return value specified for RouteSpawn")
	}

	var r0 gen.PID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.Atom, gen.ProcessOptionsExtra, gen.Atom) (gen.PID, error)); ok {
		return returnFunc(node, name, options, source)
	}
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.Atom, gen.ProcessOptionsExtra, gen.Atom) gen.PID); ok {
		r0 = returnFunc(node, name, options, source)
	} else {
		r0 = ret.Get(0).(gen.PID)
	}
	if returnFunc, ok := ret.Get(1).(func(gen.Atom, gen.Atom, gen.ProcessOptionsExtra, gen.Atom) error); ok {
		r1 = returnFunc(node, name, options, source)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Core_RouteSpawn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteSpawn'
type Core_RouteSpawn_Call struct {
	*mock.Call
}

// RouteSpawn is a helper method to define mock.On call
//   - node
//   - name
//   - options
//   - source
func (_e *Core_Expecter) RouteSpawn(node interface{}, name interface{}, options interface{}, source interface{}) *Core_RouteSpawn_Call {
	return &Core_RouteSpawn_Call{Call: _e.mock.On("RouteSpawn", node, name, options, source)}
}

func (_c *Core_RouteSpawn_Call) Run(run func(node gen.Atom, name gen.Atom, options gen.ProcessOptionsExtra, source gen.Atom)) *Core_RouteSpawn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Atom), args[1].(gen.Atom), args[2].(gen.ProcessOptionsExtra), args[3].(gen.Atom))
	})
	return _c
}

func (_c *Core_RouteSpawn_Call) Return(pID gen.PID, err error) *Core_RouteSpawn_Call {
	_c.Call.Return(pID, err)
	return _c
}

func (_c *Core_RouteSpawn_Call) RunAndReturn(run func(node gen.Atom, name gen.Atom, options gen.ProcessOptionsExtra, source gen.Atom) (gen.PID, error)) *Core_RouteSpawn_Call {
	_c.Call.Return(run)
	return _c
}

// RouteTerminateAlias provides a mock function for the type Core
func (_mock *Core) RouteTerminateAlias(terget gen.Alias, reason error) error {
	ret := _mock.Called(terget, reason)

	if len(ret) == 0 {
		panic("no return value specified for RouteTerminateAlias")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Alias, error) error); ok {
		r0 = returnFunc(terget, reason)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteTerminateAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteTerminateAlias'
type Core_RouteTerminateAlias_Call struct {
	*mock.Call
}

// RouteTerminateAlias is a helper method to define mock.On call
//   - terget
//   - reason
func (_e *Core_Expecter) RouteTerminateAlias(terget interface{}, reason interface{}) *Core_RouteTerminateAlias_Call {
	return &Core_RouteTerminateAlias_Call{Call: _e.mock.On("RouteTerminateAlias", terget, reason)}
}

func (_c *Core_RouteTerminateAlias_Call) Run(run func(terget gen.Alias, reason error)) *Core_RouteTerminateAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Alias), args[1].(error))
	})
	return _c
}

func (_c *Core_RouteTerminateAlias_Call) Return(err error) *Core_RouteTerminateAlias_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteTerminateAlias_Call) RunAndReturn(run func(terget gen.Alias, reason error) error) *Core_RouteTerminateAlias_Call {
	_c.Call.Return(run)
	return _c
}

// RouteTerminateEvent provides a mock function for the type Core
func (_mock *Core) RouteTerminateEvent(target gen.Event, reason error) error {
	ret := _mock.Called(target, reason)

	if len(ret) == 0 {
		panic("no return value specified for RouteTerminateEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Event, error) error); ok {
		r0 = returnFunc(target, reason)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteTerminateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteTerminateEvent'
type Core_RouteTerminateEvent_Call struct {
	*mock.Call
}

// RouteTerminateEvent is a helper method to define mock.On call
//   - target
//   - reason
func (_e *Core_Expecter) RouteTerminateEvent(target interface{}, reason interface{}) *Core_RouteTerminateEvent_Call {
	return &Core_RouteTerminateEvent_Call{Call: _e.mock.On("RouteTerminateEvent", target, reason)}
}

func (_c *Core_RouteTerminateEvent_Call) Run(run func(target gen.Event, reason error)) *Core_RouteTerminateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Event), args[1].(error))
	})
	return _c
}

func (_c *Core_RouteTerminateEvent_Call) Return(err error) *Core_RouteTerminateEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteTerminateEvent_Call) RunAndReturn(run func(target gen.Event, reason error) error) *Core_RouteTerminateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// RouteTerminatePID provides a mock function for the type Core
func (_mock *Core) RouteTerminatePID(target gen.PID, reason error) error {
	ret := _mock.Called(target, reason)

	if len(ret) == 0 {
		panic("no return value specified for RouteTerminatePID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, error) error); ok {
		r0 = returnFunc(target, reason)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteTerminatePID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteTerminatePID'
type Core_RouteTerminatePID_Call struct {
	*mock.Call
}

// RouteTerminatePID is a helper method to define mock.On call
//   - target
//   - reason
func (_e *Core_Expecter) RouteTerminatePID(target interface{}, reason interface{}) *Core_RouteTerminatePID_Call {
	return &Core_RouteTerminatePID_Call{Call: _e.mock.On("RouteTerminatePID", target, reason)}
}

func (_c *Core_RouteTerminatePID_Call) Run(run func(target gen.PID, reason error)) *Core_RouteTerminatePID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(error))
	})
	return _c
}

func (_c *Core_RouteTerminatePID_Call) Return(err error) *Core_RouteTerminatePID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteTerminatePID_Call) RunAndReturn(run func(target gen.PID, reason error) error) *Core_RouteTerminatePID_Call {
	_c.Call.Return(run)
	return _c
}

// RouteTerminateProcessID provides a mock function for the type Core
func (_mock *Core) RouteTerminateProcessID(target gen.ProcessID, reason error) error {
	ret := _mock.Called(target, reason)

	if len(ret) == 0 {
		panic("no return value specified for RouteTerminateProcessID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.ProcessID, error) error); ok {
		r0 = returnFunc(target, reason)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteTerminateProcessID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteTerminateProcessID'
type Core_RouteTerminateProcessID_Call struct {
	*mock.Call
}

// RouteTerminateProcessID is a helper method to define mock.On call
//   - target
//   - reason
func (_e *Core_Expecter) RouteTerminateProcessID(target interface{}, reason interface{}) *Core_RouteTerminateProcessID_Call {
	return &Core_RouteTerminateProcessID_Call{Call: _e.mock.On("RouteTerminateProcessID", target, reason)}
}

func (_c *Core_RouteTerminateProcessID_Call) Run(run func(target gen.ProcessID, reason error)) *Core_RouteTerminateProcessID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.ProcessID), args[1].(error))
	})
	return _c
}

func (_c *Core_RouteTerminateProcessID_Call) Return(err error) *Core_RouteTerminateProcessID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteTerminateProcessID_Call) RunAndReturn(run func(target gen.ProcessID, reason error) error) *Core_RouteTerminateProcessID_Call {
	_c.Call.Return(run)
	return _c
}

// RouteUnlinkAlias provides a mock function for the type Core
func (_mock *Core) RouteUnlinkAlias(pid gen.PID, target gen.Alias) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for RouteUnlinkAlias")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Alias) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteUnlinkAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteUnlinkAlias'
type Core_RouteUnlinkAlias_Call struct {
	*mock.Call
}

// RouteUnlinkAlias is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Core_Expecter) RouteUnlinkAlias(pid interface{}, target interface{}) *Core_RouteUnlinkAlias_Call {
	return &Core_RouteUnlinkAlias_Call{Call: _e.mock.On("RouteUnlinkAlias", pid, target)}
}

func (_c *Core_RouteUnlinkAlias_Call) Run(run func(pid gen.PID, target gen.Alias)) *Core_RouteUnlinkAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.Alias))
	})
	return _c
}

func (_c *Core_RouteUnlinkAlias_Call) Return(err error) *Core_RouteUnlinkAlias_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteUnlinkAlias_Call) RunAndReturn(run func(pid gen.PID, target gen.Alias) error) *Core_RouteUnlinkAlias_Call {
	_c.Call.Return(run)
	return _c
}

// RouteUnlinkEvent provides a mock function for the type Core
func (_mock *Core) RouteUnlinkEvent(pid gen.PID, target gen.Event) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for RouteUnlinkEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.Event) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteUnlinkEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteUnlinkEvent'
type Core_RouteUnlinkEvent_Call struct {
	*mock.Call
}

// RouteUnlinkEvent is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Core_Expecter) RouteUnlinkEvent(pid interface{}, target interface{}) *Core_RouteUnlinkEvent_Call {
	return &Core_RouteUnlinkEvent_Call{Call: _e.mock.On("RouteUnlinkEvent", pid, target)}
}

func (_c *Core_RouteUnlinkEvent_Call) Run(run func(pid gen.PID, target gen.Event)) *Core_RouteUnlinkEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.Event))
	})
	return _c
}

func (_c *Core_RouteUnlinkEvent_Call) Return(err error) *Core_RouteUnlinkEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteUnlinkEvent_Call) RunAndReturn(run func(pid gen.PID, target gen.Event) error) *Core_RouteUnlinkEvent_Call {
	_c.Call.Return(run)
	return _c
}

// RouteUnlinkPID provides a mock function for the type Core
func (_mock *Core) RouteUnlinkPID(pid gen.PID, target gen.PID) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for RouteUnlinkPID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.PID) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteUnlinkPID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteUnlinkPID'
type Core_RouteUnlinkPID_Call struct {
	*mock.Call
}

// RouteUnlinkPID is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Core_Expecter) RouteUnlinkPID(pid interface{}, target interface{}) *Core_RouteUnlinkPID_Call {
	return &Core_RouteUnlinkPID_Call{Call: _e.mock.On("RouteUnlinkPID", pid, target)}
}

func (_c *Core_RouteUnlinkPID_Call) Run(run func(pid gen.PID, target gen.PID)) *Core_RouteUnlinkPID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.PID))
	})
	return _c
}

func (_c *Core_RouteUnlinkPID_Call) Return(err error) *Core_RouteUnlinkPID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteUnlinkPID_Call) RunAndReturn(run func(pid gen.PID, target gen.PID) error) *Core_RouteUnlinkPID_Call {
	_c.Call.Return(run)
	return _c
}

// RouteUnlinkProcessID provides a mock function for the type Core
func (_mock *Core) RouteUnlinkProcessID(pid gen.PID, target gen.ProcessID) error {
	ret := _mock.Called(pid, target)

	if len(ret) == 0 {
		panic("no return value specified for RouteUnlinkProcessID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.PID, gen.ProcessID) error); ok {
		r0 = returnFunc(pid, target)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Core_RouteUnlinkProcessID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RouteUnlinkProcessID'
type Core_RouteUnlinkProcessID_Call struct {
	*mock.Call
}

// RouteUnlinkProcessID is a helper method to define mock.On call
//   - pid
//   - target
func (_e *Core_Expecter) RouteUnlinkProcessID(pid interface{}, target interface{}) *Core_RouteUnlinkProcessID_Call {
	return &Core_RouteUnlinkProcessID_Call{Call: _e.mock.On("RouteUnlinkProcessID", pid, target)}
}

func (_c *Core_RouteUnlinkProcessID_Call) Run(run func(pid gen.PID, target gen.ProcessID)) *Core_RouteUnlinkProcessID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.PID), args[1].(gen.ProcessID))
	})
	return _c
}

func (_c *Core_RouteUnlinkProcessID_Call) Return(err error) *Core_RouteUnlinkProcessID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Core_RouteUnlinkProcessID_Call) RunAndReturn(run func(pid gen.PID, target gen.ProcessID) error) *Core_RouteUnlinkProcessID_Call {
	_c.Call.Return(run)
	return _c
}

// Security provides a mock function for the type Core
func (_mock *Core) Security() gen.SecurityOptions {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Security")
	}

	var r0 gen.SecurityOptions
	if returnFunc, ok := ret.Get(0).(func() gen.SecurityOptions); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.SecurityOptions)
	}
	return r0
}

// Core_Security_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Security'
type Core_Security_Call struct {
	*mock.Call
}

// Security is a helper method to define mock.On call
func (_e *Core_Expecter) Security() *Core_Security_Call {
	return &Core_Security_Call{Call: _e.mock.On("Security")}
}

func (_c *Core_Security_Call) Run(run func()) *Core_Security_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Core_Security_Call) Return(securityOptions gen.SecurityOptions) *Core_Security_Call {
	_c.Call.Return(securityOptions)
	return _c
}

func (_c *Core_Security_Call) RunAndReturn(run func() gen.SecurityOptions) *Core_Security_Call {
	_c.Call.Return(run)
	return _c
}
