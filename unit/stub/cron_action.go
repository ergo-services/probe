// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package stub

import (
	"time"

	"ergo.services/ergo/gen"
	mock "github.com/stretchr/testify/mock"
)

// NewCronAction creates a new instance of CronAction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCronAction(t interface {
	mock.TestingT
	Cleanup(func())
}) *CronAction {
	mock := &CronAction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// CronAction is an autogenerated mock type for the CronAction type
type CronAction struct {
	mock.Mock
}

type CronAction_Expecter struct {
	mock *mock.Mock
}

func (_m *CronAction) EXPECT() *CronAction_Expecter {
	return &CronAction_Expecter{mock: &_m.Mock}
}

// Do provides a mock function for the type CronAction
func (_mock *CronAction) Do(job gen.Atom, node gen.Node, atime time.Time) error {
	ret := _mock.Called(job, node, atime)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(gen.Atom, gen.Node, time.Time) error); ok {
		r0 = returnFunc(job, node, atime)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// CronAction_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type CronAction_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - job
//   - node
//   - atime
func (_e *CronAction_Expecter) Do(job interface{}, node interface{}, atime interface{}) *CronAction_Do_Call {
	return &CronAction_Do_Call{Call: _e.mock.On("Do", job, node, atime)}
}

func (_c *CronAction_Do_Call) Run(run func(job gen.Atom, node gen.Node, atime time.Time)) *CronAction_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.Atom), args[1].(gen.Node), args[2].(time.Time))
	})
	return _c
}

func (_c *CronAction_Do_Call) Return(err error) *CronAction_Do_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *CronAction_Do_Call) RunAndReturn(run func(job gen.Atom, node gen.Node, atime time.Time) error) *CronAction_Do_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function for the type CronAction
func (_mock *CronAction) Info() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// CronAction_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type CronAction_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
func (_e *CronAction_Expecter) Info() *CronAction_Info_Call {
	return &CronAction_Info_Call{Call: _e.mock.On("Info")}
}

func (_c *CronAction_Info_Call) Run(run func()) *CronAction_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CronAction_Info_Call) Return(s string) *CronAction_Info_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *CronAction_Info_Call) RunAndReturn(run func() string) *CronAction_Info_Call {
	_c.Call.Return(run)
	return _c
}
