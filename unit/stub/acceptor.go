// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package stub

import (
	"ergo.services/ergo/gen"
	mock "github.com/stretchr/testify/mock"
)

// NewAcceptor creates a new instance of Acceptor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAcceptor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Acceptor {
	mock := &Acceptor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Acceptor is an autogenerated mock type for the Acceptor type
type Acceptor struct {
	mock.Mock
}

type Acceptor_Expecter struct {
	mock *mock.Mock
}

func (_m *Acceptor) EXPECT() *Acceptor_Expecter {
	return &Acceptor_Expecter{mock: &_m.Mock}
}

// Cookie provides a mock function for the type Acceptor
func (_mock *Acceptor) Cookie() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Cookie")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Acceptor_Cookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cookie'
type Acceptor_Cookie_Call struct {
	*mock.Call
}

// Cookie is a helper method to define mock.On call
func (_e *Acceptor_Expecter) Cookie() *Acceptor_Cookie_Call {
	return &Acceptor_Cookie_Call{Call: _e.mock.On("Cookie")}
}

func (_c *Acceptor_Cookie_Call) Run(run func()) *Acceptor_Cookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Acceptor_Cookie_Call) Return(s string) *Acceptor_Cookie_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Acceptor_Cookie_Call) RunAndReturn(run func() string) *Acceptor_Cookie_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function for the type Acceptor
func (_mock *Acceptor) Info() gen.AcceptorInfo {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 gen.AcceptorInfo
	if returnFunc, ok := ret.Get(0).(func() gen.AcceptorInfo); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.AcceptorInfo)
	}
	return r0
}

// Acceptor_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type Acceptor_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
func (_e *Acceptor_Expecter) Info() *Acceptor_Info_Call {
	return &Acceptor_Info_Call{Call: _e.mock.On("Info")}
}

func (_c *Acceptor_Info_Call) Run(run func()) *Acceptor_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Acceptor_Info_Call) Return(acceptorInfo gen.AcceptorInfo) *Acceptor_Info_Call {
	_c.Call.Return(acceptorInfo)
	return _c
}

func (_c *Acceptor_Info_Call) RunAndReturn(run func() gen.AcceptorInfo) *Acceptor_Info_Call {
	_c.Call.Return(run)
	return _c
}

// MaxMessageSize provides a mock function for the type Acceptor
func (_mock *Acceptor) MaxMessageSize() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for MaxMessageSize")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// Acceptor_MaxMessageSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaxMessageSize'
type Acceptor_MaxMessageSize_Call struct {
	*mock.Call
}

// MaxMessageSize is a helper method to define mock.On call
func (_e *Acceptor_Expecter) MaxMessageSize() *Acceptor_MaxMessageSize_Call {
	return &Acceptor_MaxMessageSize_Call{Call: _e.mock.On("MaxMessageSize")}
}

func (_c *Acceptor_MaxMessageSize_Call) Run(run func()) *Acceptor_MaxMessageSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Acceptor_MaxMessageSize_Call) Return(n int) *Acceptor_MaxMessageSize_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *Acceptor_MaxMessageSize_Call) RunAndReturn(run func() int) *Acceptor_MaxMessageSize_Call {
	_c.Call.Return(run)
	return _c
}

// NetworkFlags provides a mock function for the type Acceptor
func (_mock *Acceptor) NetworkFlags() gen.NetworkFlags {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for NetworkFlags")
	}

	var r0 gen.NetworkFlags
	if returnFunc, ok := ret.Get(0).(func() gen.NetworkFlags); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(gen.NetworkFlags)
	}
	return r0
}

// Acceptor_NetworkFlags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NetworkFlags'
type Acceptor_NetworkFlags_Call struct {
	*mock.Call
}

// NetworkFlags is a helper method to define mock.On call
func (_e *Acceptor_Expecter) NetworkFlags() *Acceptor_NetworkFlags_Call {
	return &Acceptor_NetworkFlags_Call{Call: _e.mock.On("NetworkFlags")}
}

func (_c *Acceptor_NetworkFlags_Call) Run(run func()) *Acceptor_NetworkFlags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Acceptor_NetworkFlags_Call) Return(networkFlags gen.NetworkFlags) *Acceptor_NetworkFlags_Call {
	_c.Call.Return(networkFlags)
	return _c
}

func (_c *Acceptor_NetworkFlags_Call) RunAndReturn(run func() gen.NetworkFlags) *Acceptor_NetworkFlags_Call {
	_c.Call.Return(run)
	return _c
}

// SetCookie provides a mock function for the type Acceptor
func (_mock *Acceptor) SetCookie(cokie string) {
	_mock.Called(cokie)
	return
}

// Acceptor_SetCookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCookie'
type Acceptor_SetCookie_Call struct {
	*mock.Call
}

// SetCookie is a helper method to define mock.On call
//   - cokie
func (_e *Acceptor_Expecter) SetCookie(cokie interface{}) *Acceptor_SetCookie_Call {
	return &Acceptor_SetCookie_Call{Call: _e.mock.On("SetCookie", cokie)}
}

func (_c *Acceptor_SetCookie_Call) Run(run func(cokie string)) *Acceptor_SetCookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Acceptor_SetCookie_Call) Return() *Acceptor_SetCookie_Call {
	_c.Call.Return()
	return _c
}

func (_c *Acceptor_SetCookie_Call) RunAndReturn(run func(cokie string)) *Acceptor_SetCookie_Call {
	_c.Run(run)
	return _c
}

// SetMaxMessageSize provides a mock function for the type Acceptor
func (_mock *Acceptor) SetMaxMessageSize(size int) {
	_mock.Called(size)
	return
}

// Acceptor_SetMaxMessageSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMaxMessageSize'
type Acceptor_SetMaxMessageSize_Call struct {
	*mock.Call
}

// SetMaxMessageSize is a helper method to define mock.On call
//   - size
func (_e *Acceptor_Expecter) SetMaxMessageSize(size interface{}) *Acceptor_SetMaxMessageSize_Call {
	return &Acceptor_SetMaxMessageSize_Call{Call: _e.mock.On("SetMaxMessageSize", size)}
}

func (_c *Acceptor_SetMaxMessageSize_Call) Run(run func(size int)) *Acceptor_SetMaxMessageSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Acceptor_SetMaxMessageSize_Call) Return() *Acceptor_SetMaxMessageSize_Call {
	_c.Call.Return()
	return _c
}

func (_c *Acceptor_SetMaxMessageSize_Call) RunAndReturn(run func(size int)) *Acceptor_SetMaxMessageSize_Call {
	_c.Run(run)
	return _c
}

// SetNetworkFlags provides a mock function for the type Acceptor
func (_mock *Acceptor) SetNetworkFlags(flags gen.NetworkFlags) {
	_mock.Called(flags)
	return
}

// Acceptor_SetNetworkFlags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNetworkFlags'
type Acceptor_SetNetworkFlags_Call struct {
	*mock.Call
}

// SetNetworkFlags is a helper method to define mock.On call
//   - flags
func (_e *Acceptor_Expecter) SetNetworkFlags(flags interface{}) *Acceptor_SetNetworkFlags_Call {
	return &Acceptor_SetNetworkFlags_Call{Call: _e.mock.On("SetNetworkFlags", flags)}
}

func (_c *Acceptor_SetNetworkFlags_Call) Run(run func(flags gen.NetworkFlags)) *Acceptor_SetNetworkFlags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gen.NetworkFlags))
	})
	return _c
}

func (_c *Acceptor_SetNetworkFlags_Call) Return() *Acceptor_SetNetworkFlags_Call {
	_c.Call.Return()
	return _c
}

func (_c *Acceptor_SetNetworkFlags_Call) RunAndReturn(run func(flags gen.NetworkFlags)) *Acceptor_SetNetworkFlags_Call {
	_c.Run(run)
	return _c
}
