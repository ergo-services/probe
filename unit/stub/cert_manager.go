// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package stub

import (
	"crypto/tls"

	mock "github.com/stretchr/testify/mock"
)

// NewCertManager creates a new instance of CertManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCertManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *CertManager {
	mock := &CertManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// CertManager is an autogenerated mock type for the CertManager type
type CertManager struct {
	mock.Mock
}

type CertManager_Expecter struct {
	mock *mock.Mock
}

func (_m *CertManager) EXPECT() *CertManager_Expecter {
	return &CertManager_Expecter{mock: &_m.Mock}
}

// GetCertificate provides a mock function for the type CertManager
func (_mock *CertManager) GetCertificate() tls.Certificate {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCertificate")
	}

	var r0 tls.Certificate
	if returnFunc, ok := ret.Get(0).(func() tls.Certificate); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(tls.Certificate)
	}
	return r0
}

// CertManager_GetCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCertificate'
type CertManager_GetCertificate_Call struct {
	*mock.Call
}

// GetCertificate is a helper method to define mock.On call
func (_e *CertManager_Expecter) GetCertificate() *CertManager_GetCertificate_Call {
	return &CertManager_GetCertificate_Call{Call: _e.mock.On("GetCertificate")}
}

func (_c *CertManager_GetCertificate_Call) Run(run func()) *CertManager_GetCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CertManager_GetCertificate_Call) Return(certificate tls.Certificate) *CertManager_GetCertificate_Call {
	_c.Call.Return(certificate)
	return _c
}

func (_c *CertManager_GetCertificate_Call) RunAndReturn(run func() tls.Certificate) *CertManager_GetCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// GetCertificateFunc provides a mock function for the type CertManager
func (_mock *CertManager) GetCertificateFunc() func(*tls.ClientHelloInfo) (*tls.Certificate, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCertificateFunc")
	}

	var r0 func(*tls.ClientHelloInfo) (*tls.Certificate, error)
	if returnFunc, ok := ret.Get(0).(func() func(*tls.ClientHelloInfo) (*tls.Certificate, error)); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(*tls.ClientHelloInfo) (*tls.Certificate, error))
		}
	}
	return r0
}

// CertManager_GetCertificateFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCertificateFunc'
type CertManager_GetCertificateFunc_Call struct {
	*mock.Call
}

// GetCertificateFunc is a helper method to define mock.On call
func (_e *CertManager_Expecter) GetCertificateFunc() *CertManager_GetCertificateFunc_Call {
	return &CertManager_GetCertificateFunc_Call{Call: _e.mock.On("GetCertificateFunc")}
}

func (_c *CertManager_GetCertificateFunc_Call) Run(run func()) *CertManager_GetCertificateFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CertManager_GetCertificateFunc_Call) Return(fn func(*tls.ClientHelloInfo) (*tls.Certificate, error)) *CertManager_GetCertificateFunc_Call {
	_c.Call.Return(fn)
	return _c
}

func (_c *CertManager_GetCertificateFunc_Call) RunAndReturn(run func() func(*tls.ClientHelloInfo) (*tls.Certificate, error)) *CertManager_GetCertificateFunc_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type CertManager
func (_mock *CertManager) Update(cert tls.Certificate) {
	_mock.Called(cert)
	return
}

// CertManager_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type CertManager_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - cert
func (_e *CertManager_Expecter) Update(cert interface{}) *CertManager_Update_Call {
	return &CertManager_Update_Call{Call: _e.mock.On("Update", cert)}
}

func (_c *CertManager_Update_Call) Run(run func(cert tls.Certificate)) *CertManager_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(tls.Certificate))
	})
	return _c
}

func (_c *CertManager_Update_Call) Return() *CertManager_Update_Call {
	_c.Call.Return()
	return _c
}

func (_c *CertManager_Update_Call) RunAndReturn(run func(cert tls.Certificate)) *CertManager_Update_Call {
	_c.Run(run)
	return _c
}
